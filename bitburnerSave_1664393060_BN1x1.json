{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":30,\"max\":30},\"skills\":{\"hacking\":252,\"strength\":207,\"defense\":207,\"dexterity\":207,\"agility\":207,\"charisma\":204,\"intelligence\":0},\"exp\":{\"hacking\":222657.5776213873,\"strength\":184825.6013362472,\"defense\":184825.6013362472,\"dexterity\":184825.6013362472,\"agility\":184825.6013362472,\"charisma\":168684.38583197023,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.1598557580972209,\"hacking_speed\":1.172123718144295,\"hacking_money\":1.1046245315211627,\"hacking_grow\":1.1046245315211627,\"hacking\":1.303097944222228,\"strength\":1.1046245315211627,\"defense\":1.1046245315211627,\"dexterity\":1.1046245315211627,\"agility\":1.1046245315211627,\"charisma\":1.1046245315211627,\"hacking_exp\":1.215086984673279,\"strength_exp\":1.215086984673279,\"defense_exp\":1.215086984673279,\"dexterity_exp\":1.215086984673279,\"agility_exp\":1.215086984673279,\"charisma_exp\":1.215086984673279,\"company_rep\":1.1046245315211627,\"faction_rep\":1.1046245315211627,\"crime_money\":1.1046245315211627,\"crime_success\":1.1046245315211627,\"hacknet_node_money\":1.1046245315211627,\"hacknet_node_purchase_cost\":0.9052849827831668,\"hacknet_node_ram_cost\":0.9052849827831668,\"hacknet_node_core_cost\":0.9052849827831668,\"hacknet_node_level_cost\":0.9052849827831668,\"work_money\":1.1046245315211627,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"money\":1900455432.5206327,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\",\"The Syndicate\",\"Slum Snakes\",\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"}],\"augmentations\":[{\"level\":10,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-3430.087500000003,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"entropy\":0,\"lastUpdate\":1664393059657,\"lastSave\":1664393056068,\"totalPlaytime\":2187016800,\"playtimeSinceLastAug\":260932600,\"playtimeSinceLastBitnode\":2187016800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":2120879100.5206327,\"gang\":0,\"hacking\":23145310,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":1900454410.5206327,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":-243569999.99999997}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":2861403515.408284,\"gang\":0,\"hacking\":115517520.32042888,\"hacknet\":65337105.61923983,\"hacknet_expenses\":-5811296.140997813,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":2268610251.483472,\"work\":0,\"servers\":-14283432.915763203,\"other\":0,\"augmentations\":-753553160.807269}},\"scriptProdSinceLastAug\":23145310,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1662228404642},{\"ID\":\"WORKOUT\",\"unlockedOn\":1662231464633},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1662299145636},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1662300345649},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1662313588616},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1662376891797},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1662411716634},{\"ID\":\"NS2\",\"unlockedOn\":1662837533059},{\"ID\":\"FROZE\",\"unlockedOn\":1662838211428}],\"terminalCommandHistory\":[\"run launch-hacking.js\",\"connect n00dles\",\"ls\",\"top\",\"home\",\"nano launch-hacking.js\",\"scan-analyze 2\",\"scan-analyze 3\",\"scan-analyze 4\",\"scan-analyze 3\",\"connect joesguns\",\"connect CSEC\",\"run NUKE.exe\",\"run BruteSSH.exe\",\"run NUKE.exe\",\"backdoor\",\"ls\",\"scan\",\"home\",\"scan-analyze 3\",\"connect iron-gym\",\"ls\",\"top\",\"man top\",\"top --help\",\"scan\",\"connect max-hardware\",\"ls\",\"top\",\"scan-analyze\",\"connect iron-gym\",\"scan-analyze\",\"top\",\"connect max-hardware\",\"top\",\"home\",\"ls\",\"scan\",\"scan-analyze 2\",\"connect iron-gym\",\"connect max-hardware\",\"ls\",\"run grow-server.js\",\"cat grow-server.js\",\"scan\",\"scan-analyze\",\"home\",\"nano launch-hacking.js\",\"nano hack-server.js\",\"nano launch-hacking.js hack-server.js\"],\"focus\":false,\"currentWork\":null,\"identifier\":\"14f7204efe591a\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"76.4.2.8\",\"isConnectedTo\":true,\"maxRam\":64,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\"],\"ramUsed\":51.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[6676506,914,0,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3664.945363171595,\"onlineMoneyMade\":6676506,\"onlineRunningTime\":9797.809999997295,\"pid\":2,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///35b7d0b5-b922-4b19-90a1-e8b150722d57\",\"moduleSequenceNumber\":441}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[0,0,286,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1146.7990961346404,\"onlineMoneyMade\":0,\"onlineRunningTime\":9797.809999997295,\"pid\":3,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///a61a2ed9-3283-4c1b-a1c9-1fe3a092ea93\",\"moduleSequenceNumber\":442}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[0,0,0,229]},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":918.2412343175951,\"onlineMoneyMade\":0,\"onlineRunningTime\":9797.809999997295,\"pid\":4,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///8727ec6e-1681-4cf3-a2c3-5d4b4b79f800\",\"moduleSequenceNumber\":443}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[1983039,892,0,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6503.1455419713475,\"onlineMoneyMade\":1983039,\"onlineRunningTime\":9797.809999997295,\"pid\":5,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///35b7d0b5-b922-4b19-90a1-e8b150722d57\",\"moduleSequenceNumber\":441}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,279,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2034.0556123430617,\"onlineMoneyMade\":0,\"onlineRunningTime\":9797.809999997295,\"pid\":6,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///a61a2ed9-3283-4c1b-a1c9-1fe3a092ea93\",\"moduleSequenceNumber\":442}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,223]},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1625.786385492842,\"onlineMoneyMade\":0,\"onlineRunningTime\":9797.809999997295,\"pid\":7,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///8727ec6e-1681-4cf3-a2c3-5d4b4b79f800\",\"moduleSequenceNumber\":443}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2276176,793,0,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5781.383873075446,\"onlineMoneyMade\":2276176,\"onlineRunningTime\":9797.809999997295,\"pid\":8,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///35b7d0b5-b922-4b19-90a1-e8b150722d57\",\"moduleSequenceNumber\":441}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,248,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1808.049433193833,\"onlineMoneyMade\":0,\"onlineRunningTime\":9797.809999997295,\"pid\":9,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///a61a2ed9-3283-4c1b-a1c9-1fe3a092ea93\",\"moduleSequenceNumber\":442}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,0,198]},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1443.5233377918512,\"onlineMoneyMade\":0,\"onlineRunningTime\":9797.809999997295,\"pid\":10,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///8727ec6e-1681-4cf3-a2c3-5d4b4b79f800\",\"moduleSequenceNumber\":443}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2287193,564,0,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5148.931097553026,\"onlineMoneyMade\":2287193,\"onlineRunningTime\":9797.809999997295,\"pid\":11,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///35b7d0b5-b922-4b19-90a1-e8b150722d57\",\"moduleSequenceNumber\":441}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,177,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1613.027972153772,\"onlineMoneyMade\":0,\"onlineRunningTime\":9797.809999997295,\"pid\":12,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///a61a2ed9-3283-4c1b-a1c9-1fe3a092ea93\",\"moduleSequenceNumber\":442}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,0,142]},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1294.06763867704,\"onlineMoneyMade\":0,\"onlineRunningTime\":9797.809999997295,\"pid\":13,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///8727ec6e-1681-4cf3-a2c3-5d4b4b79f800\",\"moduleSequenceNumber\":443}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1913462,282,0,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2615.474734509216,\"onlineMoneyMade\":1913462,\"onlineRunningTime\":9797.809999997295,\"pid\":14,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///35b7d0b5-b922-4b19-90a1-e8b150722d57\",\"moduleSequenceNumber\":441}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,94,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":856.6363241946624,\"onlineMoneyMade\":0,\"onlineRunningTime\":9797.809999997295,\"pid\":15,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///a61a2ed9-3283-4c1b-a1c9-1fe3a092ea93\",\"moduleSequenceNumber\":442}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,0,75]},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":683.48642887872,\"onlineMoneyMade\":0,\"onlineRunningTime\":9797.809999997295,\"pid\":16,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///8727ec6e-1681-4cf3-a2c3-5d4b4b79f800\",\"moduleSequenceNumber\":443}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[2139966,221,0,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2066.407303309985,\"onlineMoneyMade\":2139966,\"onlineRunningTime\":9797.809999997295,\"pid\":17,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///35b7d0b5-b922-4b19-90a1-e8b150722d57\",\"moduleSequenceNumber\":441}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,76,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":692.5995812637696,\"onlineMoneyMade\":0,\"onlineRunningTime\":9797.809999997295,\"pid\":18,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///a61a2ed9-3283-4c1b-a1c9-1fe3a092ea93\",\"moduleSequenceNumber\":442}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,0,61]},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":555.9022954880255,\"onlineMoneyMade\":0,\"onlineRunningTime\":9797.809999997295,\"pid\":19,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///8727ec6e-1681-4cf3-a2c3-5d4b4b79f800\",\"moduleSequenceNumber\":443}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[1056912,29,0,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":513.9817945167966,\"onlineMoneyMade\":1056912,\"onlineRunningTime\":9797.809999997295,\"pid\":20,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///35b7d0b5-b922-4b19-90a1-e8b150722d57\",\"moduleSequenceNumber\":441}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,16,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":233.29670105726962,\"onlineMoneyMade\":0,\"onlineRunningTime\":9797.809999997295,\"pid\":21,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///a61a2ed9-3283-4c1b-a1c9-1fe3a092ea93\",\"moduleSequenceNumber\":442}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,0,13]},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":189.55356960903154,\"onlineMoneyMade\":0,\"onlineRunningTime\":9797.809999997295,\"pid\":22,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///8727ec6e-1681-4cf3-a2c3-5d4b4b79f800\",\"moduleSequenceNumber\":443}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.tprint(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    const target = getHostname();\\n    ns.tprint('hacking server: ' + targer);\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.tprint('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.tprint('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            ns.tprint('Sleeping for 30 sec');\\n\\n            await ns.sleep(1000*30);\\n\\n            ns.tprint('Done sleeping');\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            await program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///78f6ee14-0745-441d-bf98-25c3d1695d68\",\"moduleSequenceNumber\":292}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":31162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet servers_to_scan = ['home'];\\n\\tlet hacked_servers = [];\\n\\n\\tlet counter = 0;\\n\\n\\twhile (servers_to_scan.length>0) {\\n\\t\\tconst server = servers_to_scan.pop();\\n\\n\\t\\thacked_servers.push(server);\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tns.tprint('on server: ' + server);\\n\\t\\tns.tprint('\\\\tneighbors:\\\\n' + JSON.stringify(neighbors));\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (!hacked_servers.includes(neighbor)) {\\n\\t\\t\\t\\tns.tprint('Copying script to ' + neighbor);\\n\\t\\t\\t\\tns.scp(['hack-server.js', 'grow-server.js', 'weaken-server.js'], neighbor);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tns.tprint('Hacking ' + neighbor + ' from ' + server);\\n\\t\\t\\tns.exec('hack-server.js', server, 1, neighbor);\\n\\t\\t\\t\\n\\t\\t\\tns.tprint('Growing ' + neighbor + ' from ' + server);\\n\\t\\t\\tns.exec('grow-server.js', server, 1, neighbor);\\n\\t\\t\\t\\n\\t\\t\\tns.tprint('Weakening ' + neighbor + ' from ' + server);\\n\\t\\t\\tns.exec('weaken-server.js', server, 1, neighbor);\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\tif (!servers_to_scan.includes(neighbor) && !hacked_servers.includes(neighbor)) {\\n\\t\\t\\t\\tservers_to_scan.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (counter>=100) {\\n\\t\\t\\tns.tprint('Counter is at ' + counter);\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tcounter++;\\n\\t}\\n}\",\"filename\":\"launch-hacking.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"launch-hacking.js\",\"url\":\"blob:file:///6ce5e31f-4921-4978-9424-e4249dcc6c7d\",\"moduleSequenceNumber\":5343}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":8116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///72540660-8a33-4751-ae9e-09ee55e92e8c\",\"moduleSequenceNumber\":293}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///26b0ca6b-65b3-480d-8d05-bba0ffcbc55f\",\"moduleSequenceNumber\":294}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"75.5.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ecorp\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"ecorp\",\"moduleSequenceNumber\":386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"ecorp\",\"moduleSequenceNumber\":387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":56049751318,\"moneyMax\":1401243782950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1213,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"65.2.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"megacorp\",\"moduleSequenceNumber\":367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"megacorp\",\"moduleSequenceNumber\":368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"megacorp\",\"moduleSequenceNumber\":369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":55605689547,\"moneyMax\":1390142238675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1256,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"60.1.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"b-and-a\",\"moduleSequenceNumber\":364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"b-and-a\",\"moduleSequenceNumber\":365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"b-and-a\",\"moduleSequenceNumber\":366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":16505615194,\"moneyMax\":412640379850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1108,\"serverGrowth\":74}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"56.6.5.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"blade\",\"moduleSequenceNumber\":421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"blade\",\"moduleSequenceNumber\":422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"blade\",\"moduleSequenceNumber\":423,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":11673224661,\"moneyMax\":291830616525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":900,\"serverGrowth\":77}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"32.1.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nwo\",\"moduleSequenceNumber\":370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"nwo\",\"moduleSequenceNumber\":371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"nwo\",\"moduleSequenceNumber\":372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":23802603067,\"moneyMax\":595065076675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1037,\"serverGrowth\":73}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"36.3.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"clarkinc\",\"moduleSequenceNumber\":373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"clarkinc\",\"moduleSequenceNumber\":374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"clarkinc\",\"moduleSequenceNumber\":375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":16101455563,\"moneyMax\":402536389075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1152,\"serverGrowth\":56}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"61.5.2.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omnitek\",\"moduleSequenceNumber\":418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"omnitek\",\"moduleSequenceNumber\":419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"omnitek\",\"moduleSequenceNumber\":420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":21666190532,\"moneyMax\":541654763300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1016,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"14.6.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"4sigma\",\"moduleSequenceNumber\":424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"4sigma\",\"moduleSequenceNumber\":425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"4sigma\",\"moduleSequenceNumber\":426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":17969646793,\"moneyMax\":449241169825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1229,\"serverGrowth\":96}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"23.0.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\",\"nwo\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":23857505666,\"moneyMax\":596437641650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1291,\"serverGrowth\":93}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"13.9.5.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1682213179,\"moneyMax\":42055329475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1122,\"serverGrowth\":93}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"39.4.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1295,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"25.4.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"stormtech\",\"moduleSequenceNumber\":355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"stormtech\",\"moduleSequenceNumber\":356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"stormtech\",\"moduleSequenceNumber\":357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1116587188,\"moneyMax\":27914679700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1063,\"serverGrowth\":86}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"91.8.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"defcomm\",\"moduleSequenceNumber\":394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"defcomm\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"defcomm\",\"moduleSequenceNumber\":396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":890929583,\"moneyMax\":22273239575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":899,\"serverGrowth\":52}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"20.7.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"infocomm\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"infocomm\",\"moduleSequenceNumber\":401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"infocomm\",\"moduleSequenceNumber\":402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"icarus\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":638064917,\"moneyMax\":15951622925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":887,\"serverGrowth\":74}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-955695.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":32,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"26.3.7.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"helios\",\"moduleSequenceNumber\":349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"helios\",\"moduleSequenceNumber\":350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"helios\",\"moduleSequenceNumber\":351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":733457334,\"moneyMax\":18336433350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":854,\"serverGrowth\":73}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"26.5.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"vitalife\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"vitalife\",\"moduleSequenceNumber\":416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"vitalife\",\"moduleSequenceNumber\":417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":763123089,\"moneyMax\":19078077225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":820,\"serverGrowth\":71}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-638367.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":12182336753275,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"36.0.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"icarus\",\"moduleSequenceNumber\":397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"icarus\",\"moduleSequenceNumber\":398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"icarus\",\"moduleSequenceNumber\":399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":930104804,\"moneyMax\":23252620100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":855,\"serverGrowth\":88}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"20.7.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"univ-energy\",\"moduleSequenceNumber\":332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"univ-energy\",\"moduleSequenceNumber\":333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1164401980,\"moneyMax\":29110049500,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":870,\"serverGrowth\":88}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"54.2.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"titan-labs\",\"moduleSequenceNumber\":353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"titan-labs\",\"moduleSequenceNumber\":354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":840024436,\"moneyMax\":21000610900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":873,\"serverGrowth\":65}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"88.5.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"microdyne\",\"moduleSequenceNumber\":346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"microdyne\",\"moduleSequenceNumber\":347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"microdyne\",\"moduleSequenceNumber\":348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":651589574,\"moneyMax\":16289739350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":818,\"serverGrowth\":72}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"13.2.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":823896862,\"moneyMax\":20597421550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":876,\"serverGrowth\":79}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"17.6.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":792422185,\"moneyMax\":19810554625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":833,\"serverGrowth\":88}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-151303.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"zzzzzzzzzzGvx6zzzzzGgE86lVohVohVohVoVoVoVoVoI1vi5jxiiiiN64N64NOsj\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"50.9.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"aerocorp\",\"moduleSequenceNumber\":388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"aerocorp\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"aerocorp\",\"moduleSequenceNumber\":390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1189213218,\"moneyMax\":29730330450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":869,\"serverGrowth\":65}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"3.1.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omnia\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"omnia\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"omnia\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":901331929,\"moneyMax\":22533298225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":917,\"serverGrowth\":69}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-238630.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"uvEGFsiGFsssssssssssssssssssssssAlXFss1mv3VH61mv3XeQo37eQo37LA7LA70j7\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"32.8.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zb-def\",\"moduleSequenceNumber\":403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"zb-def\",\"moduleSequenceNumber\":404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"zb-def\",\"moduleSequenceNumber\":405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":1040927200,\"moneyMax\":26023180000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":781,\"serverGrowth\":74}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"68.3.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":820829613,\"moneyMax\":20520740325,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":788,\"serverGrowth\":70}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"26.5.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"solaris\",\"moduleSequenceNumber\":334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"solaris\",\"moduleSequenceNumber\":335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"solaris\",\"moduleSequenceNumber\":336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":814790945,\"moneyMax\":20369773625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":829,\"serverGrowth\":70}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"32.1.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"deltaone\",\"moduleSequenceNumber\":328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"deltaone\",\"moduleSequenceNumber\":329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"deltaone\",\"moduleSequenceNumber\":330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1552818559,\"moneyMax\":38820463975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":846,\"serverGrowth\":58}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"62.1.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"global-pharm\",\"moduleSequenceNumber\":326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"global-pharm\",\"moduleSequenceNumber\":327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1569074875,\"moneyMax\":39226871875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":775,\"serverGrowth\":86}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"52.3.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nova-med\",\"moduleSequenceNumber\":343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"nova-med\",\"moduleSequenceNumber\":344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"nova-med\",\"moduleSequenceNumber\":345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1202911817,\"moneyMax\":30072795425,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":824,\"serverGrowth\":75}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"96.2.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zeus-med\",\"moduleSequenceNumber\":337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"zeus-med\",\"moduleSequenceNumber\":338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"zeus-med\",\"moduleSequenceNumber\":339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":1433232586,\"moneyMax\":35830814650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":803,\"serverGrowth\":80}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"55.5.5.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"unitalife\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"unitalife\",\"moduleSequenceNumber\":392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"unitalife\",\"moduleSequenceNumber\":393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1012554697,\"moneyMax\":25313867425,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":816,\"serverGrowth\":80}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"96.5.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":754554931,\"moneyMax\":18863873275,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":667,\"serverGrowth\":58}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"0.7.4.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"rho-construction\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"rho-construction\",\"moduleSequenceNumber\":321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":529008553,\"moneyMax\":13225213825,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":503,\"serverGrowth\":53}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"94.9.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":635509757,\"moneyMax\":15887743925,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":526,\"serverGrowth\":53}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"21.2.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"aevum-police\",\"moduleSequenceNumber\":449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"aevum-police\",\"moduleSequenceNumber\":450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":347406357,\"moneyMax\":8685158925,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":421,\"serverGrowth\":35}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"4.0.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":184673191,\"moneyMax\":4616829775,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":396,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"26.0.8.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"zb-institute\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"zb-institute\",\"moduleSequenceNumber\":474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":926271129,\"moneyMax\":23156778225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":755,\"serverGrowth\":81}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"78.0.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"summit-uni\",\"moduleSequenceNumber\":443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"summit-uni\",\"moduleSequenceNumber\":444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":266971998,\"moneyMax\":6674299950,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":429,\"serverGrowth\":44}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"6.2.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"syscore\",\"moduleSequenceNumber\":313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"syscore\",\"moduleSequenceNumber\":314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"syscore\",\"moduleSequenceNumber\":315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":588715724,\"moneyMax\":14717893100,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":603,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"73.0.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"catalyst\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"catalyst\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"catalyst\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":395325902,\"moneyMax\":9883147550,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":419,\"serverGrowth\":50}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"66.3.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"the-hub\",\"moduleSequenceNumber\":307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"the-hub\",\"moduleSequenceNumber\":308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"the-hub\",\"moduleSequenceNumber\":309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":170101138,\"moneyMax\":4252528450,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":291,\"serverGrowth\":48}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"62.8.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"computek\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"computek\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"computek\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":238506180,\"moneyMax\":5962654500,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":358,\"serverGrowth\":58}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"56.0.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"netlink\",\"moduleSequenceNumber\":433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"netlink\",\"moduleSequenceNumber\":434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"netlink\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":417,\"serverGrowth\":54}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"8.0.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":78831474,\"moneyMax\":1970786850,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":294,\"serverGrowth\":63}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"91.6.2.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":52,\"ramUsage\":2.4,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///a705ef5c-d594-48db-a0a1-a6c54d51e004\",\"moduleSequenceNumber\":5371}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":5371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"n00dles\",\"moduleSequenceNumber\":254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"n00dles\",\"moduleSequenceNumber\":255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1742027,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"47.7.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":7.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":49,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":50,\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":51,\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///420c438b-6df9-4df7-b406-b69021c11469\",\"moduleSequenceNumber\":5368}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":5368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///30ce46f1-81be-4057-8db5-dcc7da6adde9\",\"moduleSequenceNumber\":5369}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":5369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///ddc71761-29c3-4749-aa14-8618a0e5d403\",\"moduleSequenceNumber\":5370}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":5370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.0099999999999993,\"minDifficulty\":3,\"moneyAvailable\":44210.544652389646,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"96.0.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":43,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":44,\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":45,\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[968808,58,0,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":794.2112303570723,\"onlineMoneyMade\":968808,\"onlineRunningTime\":8671.209999998326,\"pid\":46,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,23,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":293.4435067985968,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":47,\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,0,18]},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":229.65144010324968,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":48,\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///3042801b-0ec6-4b91-a257-0e9a21d66981\",\"moduleSequenceNumber\":5365}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":5365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///a46d42b3-ecfe-4cc6-83f6-f64ea46088cf\",\"moduleSequenceNumber\":5366}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":5366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///a40bac23-b8fb-4ee2-b024-050af5a2468f\",\"moduleSequenceNumber\":5367}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":5367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.0039999999999996,\"minDifficulty\":3,\"moneyAvailable\":87415.60304686893,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"96.6.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":37,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":38,\"ramUsage\":2.45,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":39,\"ramUsage\":2.45,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[1591570,245,0,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2744.881498376949,\"onlineMoneyMade\":1591570,\"onlineRunningTime\":8671.209999998326,\"pid\":40,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,84,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":918.605760413001,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":41,\"ramUsage\":2.45,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,0,67]},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":732.6974517579883,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":42,\"ramUsage\":2.45,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///988ede4c-3070-40ef-a7a5-e4c2ab09e6c0\",\"moduleSequenceNumber\":5359}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"joesguns\",\"moduleSequenceNumber\":5359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///1fc5ceea-ef56-4830-bd57-6308ff39c484\",\"moduleSequenceNumber\":5360}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"joesguns\",\"moduleSequenceNumber\":5360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///4e624af7-91a3-4822-a819-97bc500f6890\",\"moduleSequenceNumber\":5361}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"joesguns\",\"moduleSequenceNumber\":5361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":9.736000000000198,\"minDifficulty\":5,\"moneyAvailable\":307784.6785307829,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"95.9.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zer0\",\"moduleSequenceNumber\":478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"zer0\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"zer0\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":24.307999999999954,\"minDifficulty\":8,\"moneyAvailable\":6617825.064914901,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"47.5.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"nectar-net\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"nectar-net\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"joesguns\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":17.475999999999793,\"minDifficulty\":7,\"moneyAvailable\":1227979.9430761186,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"30.5.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"neo-net\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"neo-net\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"neo-net\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-172407-Sector-12.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"kkvv660000000dddddddddddd6666662266dd1555555555556dOOn66666666666666XIIKKlllllll\",\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"43.5.0.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"silver-helix\",\"moduleSequenceNumber\":299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"silver-helix\",\"moduleSequenceNumber\":300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"netlink\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"8.9.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":7.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":34,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":35,\"ramUsage\":2.45,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":36,\"ramUsage\":2.45,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///62dd03ac-2479-4f23-afe0-5ef4339ab37b\",\"moduleSequenceNumber\":5353}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":5353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///c55052da-c684-4bca-9cea-25e2a4e4a3d9\",\"moduleSequenceNumber\":5354}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":5354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///46bba7e8-0eca-4173-b2ae-2524833747fa\",\"moduleSequenceNumber\":5355}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":5355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":12.190000000000094,\"minDifficulty\":5,\"moneyAvailable\":1174892.7793707119,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"46.1.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":7.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":31,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":32,\"ramUsage\":2.45,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":33,\"ramUsage\":2.45,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///0fe8d781-24c3-4fab-a741-41aa3caed528\",\"moduleSequenceNumber\":5350}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":5350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///82ac04bc-56dc-4f09-9143-b3883a6a5fc0\",\"moduleSequenceNumber\":5351}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":5351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///d6a5808d-adf7-495a-894e-ad3632921790\",\"moduleSequenceNumber\":5352}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":5352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":12.69600000000007,\"minDifficulty\":5,\"moneyAvailable\":2071978.4711374657,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"79.3.1.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"phantasy\",\"moduleSequenceNumber\":301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"phantasy\",\"moduleSequenceNumber\":302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"phantasy\",\"moduleSequenceNumber\":303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"63.0.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///d5306160-bf01-40e6-8a2f-ad11d49b2264\",\"moduleSequenceNumber\":11071}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"max-hardware\",\"moduleSequenceNumber\":11071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"max-hardware\",\"moduleSequenceNumber\":297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":13.932000000000029,\"minDifficulty\":5,\"moneyAvailable\":7965118.109839513,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"98.3.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omega-net\",\"moduleSequenceNumber\":304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"omega-net\",\"moduleSequenceNumber\":305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"omega-net\",\"moduleSequenceNumber\":306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":33,\"hackDifficulty\":33,\"minDifficulty\":11,\"moneyAvailable\":67892353,\"moneyMax\":1697308825,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":202,\"serverGrowth\":37}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"81.7.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":54988136,\"moneyMax\":1374703400,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":266,\"serverGrowth\":29}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"53.0.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":14.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":25,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":26,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":27,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[2251678,96,0,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":915.8718146974846,\"onlineMoneyMade\":2251678,\"onlineRunningTime\":8671.209999998326,\"pid\":28,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,35,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":318.9603334767359,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":29,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,0,28]},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":255.1682667813887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8671.209999998326,\"pid\":30,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///85bbac94-472a-457e-ab25-6adf8dbd0797\",\"moduleSequenceNumber\":5347}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":5347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///3ca17b1c-77cc-4309-8ef3-e83781f96b18\",\"moduleSequenceNumber\":5348}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"iron-gym\",\"moduleSequenceNumber\":5348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///cdd5d045-de29-46f3-a88d-406384830ff4\",\"moduleSequenceNumber\":5349}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"iron-gym\",\"moduleSequenceNumber\":5349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":29.47199999999998,\"minDifficulty\":10,\"moneyAvailable\":19012749.478905782,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-751503.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"CLOUD CACHE SHELL FLASH INBOX\",11],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"13.9.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":492,\"serverGrowth\":31}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"96.4.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":991,\"serverGrowth\":52}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"49.7.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":737,\"serverGrowth\":41}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"90.8.5.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":506,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"42.7.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":346,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"29.7.6.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":205,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"23.3.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\".\",\"moduleSequenceNumber\":361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\".\",\"moduleSequenceNumber\":362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\".\",\"moduleSequenceNumber\":363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":541,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"55.9.7.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"CSEC\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"CSEC\",\"moduleSequenceNumber\":464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"CSEC\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":51,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"69.5.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"The-Cave\",\"moduleSequenceNumber\":382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"The-Cave\",\"moduleSequenceNumber\":383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"The-Cave\",\"moduleSequenceNumber\":384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"53.8.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"40.4.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":2.0042,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":386.32401949067497}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"The Syndicate\",\"playerReputation\":2.3473271294824687}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":2.0042,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":7187.115800663797}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":79.0693,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":1982.5932873457582}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#98C379\",\"primary\":\"#98C379\",\"primarydark\":\"#98C379\",\"successlight\":\"#98C379\",\"success\":\"#98C379\",\"successdark\":\"#98C379\",\"errorlight\":\"#E06C75\",\"error\":\"#BE5046\",\"errordark\":\"#BE5046\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E5C07B\",\"warning\":\"#E5C07B\",\"warningdark\":\"#D19A66\",\"infolight\":\"#61AFEF\",\"info\":\"#61AFEF\",\"infodark\":\"#61AFEF\",\"welllight\":\"#4B5263\",\"well\":\"#282C34\",\"white\":\"#ABB2BF\",\"black\":\"#282C34\",\"hp\":\"#E06C75\",\"money\":\"#E5C07B\",\"hack\":\"#98C379\",\"combat\":\"#ABB2BF\",\"cha\":\"#C678DD\",\"int\":\"#61AFEF\",\"rep\":\"#ABB2BF\",\"disabled\":\"#56B6C2\",\"backgroundprimary\":\"#282C34\",\"backgroundsecondary\":\"#21252B\",\"button\":\"#4B5263\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-10,\"y\":675,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"25","AllGangsSave":"","LastExportBonus":"1664393059671","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}