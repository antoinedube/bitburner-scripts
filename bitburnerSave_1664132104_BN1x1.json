{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":24,\"max\":24},\"skills\":{\"hacking\":281,\"strength\":140,\"defense\":140,\"dexterity\":140,\"agility\":140,\"charisma\":140,\"intelligence\":0},\"exp\":{\"hacking\":1269503.4878514057,\"strength\":30375,\"defense\":30375,\"dexterity\":30375,\"agility\":30375,\"charisma\":30375,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.07213698684911,\"hacking_speed\":1.1043010964545832,\"hacking_money\":1.07213698684911,\"hacking_grow\":1.07213698684911,\"hacking\":1.1257438361915655,\"strength\":1.07213698684911,\"defense\":1.07213698684911,\"dexterity\":1.07213698684911,\"agility\":1.07213698684911,\"charisma\":1.07213698684911,\"hacking_exp\":1.179350685534021,\"strength_exp\":1.179350685534021,\"defense_exp\":1.179350685534021,\"dexterity_exp\":1.179350685534021,\"agility_exp\":1.179350685534021,\"charisma_exp\":1.179350685534021,\"company_rep\":1.07213698684911,\"faction_rep\":1.07213698684911,\"crime_money\":1.07213698684911,\"crime_success\":1.07213698684911,\"hacknet_node_money\":1.07213698684911,\"hacknet_node_purchase_cost\":0.9327166325442117,\"hacknet_node_ram_cost\":0.9327166325442117,\"hacknet_node_core_cost\":0.9327166325442117,\"hacknet_node_level_cost\":0.9327166325442117,\"work_money\":1.07213698684911,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"money\":245792647.09954378,\"city\":\"Sector-12\",\"location\":\"National Security Agency\",\"jobs\":{},\"currentServer\":\"n00dles\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":30,\"moneyGainRatePerSecond\":48.24616440820995,\"onlineTimeSeconds\":158854.60000017085,\"ram\":1,\"totalMoneyGenerated\":7661467.74987544,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":30,\"moneyGainRatePerSecond\":48.24616440820995,\"onlineTimeSeconds\":158854.00000017087,\"ram\":1,\"totalMoneyGenerated\":7661405.673143902,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":30,\"moneyGainRatePerSecond\":48.24616440820995,\"onlineTimeSeconds\":158853.40000017086,\"ram\":1,\"totalMoneyGenerated\":7661306.6076863175,\"name\":\"hacknet-node-2\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\",\"Slum Snakes\",\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":8,\"name\":\"NeuroFlux Governor\"},{\"level\":9,\"name\":\"NeuroFlux Governor\"},{\"level\":10,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":7,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-1686.3375000000028,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"entropy\":0,\"lastUpdate\":1664132104160,\"lastSave\":1664132097193,\"totalPlaytime\":1926061400,\"playtimeSinceLastAug\":1709237200,\"playtimeSinceLastBitnode\":1926061400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":514625753.6875728,\"gang\":0,\"hacking\":68998708.99940738,\"hacknet\":22984180.030753326,\"hacknet_expenses\":-82918.42154172808,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":245791625.09954378,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":-360734099.19605297}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":740524414.8876523,\"gang\":0,\"hacking\":92348877.32042888,\"hacknet\":65333805.581595115,\"hacknet_expenses\":-5811296.140997813,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":368129207.9251999,\"work\":0,\"servers\":-14283432.915763203,\"other\":0,\"augmentations\":-509983160.807269}},\"scriptProdSinceLastAug\":67888460,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1662228404642},{\"ID\":\"WORKOUT\",\"unlockedOn\":1662231464633},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1662299145636},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1662300345649},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1662313588616},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1662376891797},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1662411716634},{\"ID\":\"NS2\",\"unlockedOn\":1662837533059},{\"ID\":\"FROZE\",\"unlockedOn\":1662838211428}],\"terminalCommandHistory\":[\"ls\",\"rm test-script.js\",\"nano launch-hacking.js\",\"run launch-hacking.js\",\"nano launch-hacking.js\",\"top\",\"ls\",\"nano launch-hacking.js\",\"run launch-hacking.js\",\"top\",\"run launch-hacking.js\",\"top\",\"ls\",\"nano hack-server.js\",\"run hack-server.js n00dles\",\"cp hack-server.js grow-server.js\",\"cp hack-server.js weaken-server.js\",\"nano grow-server.js weaken-server.js\",\"run hack-server.js n00dles -t 2\",\"run grow-server.js n00dles\",\"run weaken-server.js n00dles\",\"run launch-hacking.js\",\"scan-analyze\",\"top\",\"ls\",\"nano launch-hacking.js hack-server.js grow-server.js weaken-server.js\",\"run launch-hacking.js\",\"scan\",\"scan-analyze 2\",\"connect n00dles\",\"connect CSEC\",\"backdoor\",\"run NUKE.exe\",\"top\",\"home\",\"top\",\"scan-analyze 2\",\"scan-analyze 3\",\"connect n00dles\",\"connect CSEC\",\"run NUKE.exe\",\"run BruteSSH.exe\",\"run FTPCrack.exe\",\"run NUKE.exe\",\"backdoor\",\"home\",\"scan\",\"connect n00dles\",\"top\",\"cat hack-server.js\"],\"focus\":false,\"currentWork\":null,\"identifier\":\"14f7204efe591a\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"76.4.2.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"BruteSSH.exe\",\"ServerProfiler.exe\",\"FTPCrack.exe\",\"DeepscanV1.exe\"],\"ramUsed\":51.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[40264077,5298,0,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":15454.635831779025,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.060000000005,\"onlineExpGained\":20619.059775464222,\"onlineMoneyMade\":40264077,\"onlineRunningTime\":118822.00999989083,\"pid\":1,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///52133bf3-a2a8-44ef-b671-0105e52c1b88\",\"moduleSequenceNumber\":152}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[0,0,1655,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4829.137565678537,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.076,\"onlineExpGained\":6441.023769044209,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":2,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///2a1109a9-e6f8-49e9-8a25-56d1874c5785\",\"moduleSequenceNumber\":153}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[0,0,0,1324]},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3861.9094254284582,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.088,\"onlineExpGained\":5152.819015235348,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":3,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///3e0d9a86-507e-4452-9a48-429ee18c43e5\",\"moduleSequenceNumber\":154}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[2014483,5221,0,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":21568.336273871013,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.104,\"onlineExpGained\":29095.17108746669,\"onlineMoneyMade\":2014483,\"onlineRunningTime\":118822.00999989083,\"pid\":4,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///52133bf3-a2a8-44ef-b671-0105e52c1b88\",\"moduleSequenceNumber\":152}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,1635,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8665.567533588377,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.116,\"onlineExpGained\":11569.430225089201,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":5,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///2a1109a9-e6f8-49e9-8a25-56d1874c5785\",\"moduleSequenceNumber\":153}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,1308]},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6932.455926546628,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.127,\"onlineExpGained\":9255.544180071309,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":6,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///3e0d9a86-507e-4452-9a48-429ee18c43e5\",\"moduleSequenceNumber\":154}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2374096,4870,0,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":21184.457474182207,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.139,\"onlineExpGained\":28635.224320108166,\"onlineMoneyMade\":2374096,\"onlineRunningTime\":118822.00999989083,\"pid\":7,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///52133bf3-a2a8-44ef-b671-0105e52c1b88\",\"moduleSequenceNumber\":152}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,1528,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8085.746167713594,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.151000000005,\"onlineExpGained\":10812.287084976313,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":8,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///2a1109a9-e6f8-49e9-8a25-56d1874c5785\",\"moduleSequenceNumber\":153}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,0,1222]},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6467.324518219668,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.163,\"onlineExpGained\":8646.999226335716,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":9,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///3e0d9a86-507e-4452-9a48-429ee18c43e5\",\"moduleSequenceNumber\":154}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[2640440,3937,0,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":24495.397169616946,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.175,\"onlineExpGained\":33346.14063347219,\"onlineMoneyMade\":2640440,\"onlineRunningTime\":118822.00999989083,\"pid\":10,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///52133bf3-a2a8-44ef-b671-0105e52c1b88\",\"moduleSequenceNumber\":152}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,1264,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8291.241804808267,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.184,\"onlineExpGained\":11180.244498862317,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":11,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///2a1109a9-e6f8-49e9-8a25-56d1874c5785\",\"moduleSequenceNumber\":153}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,0,1011]},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6634.588695634363,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.198000000004,\"onlineExpGained\":8942.426573061719,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":12,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///3e0d9a86-507e-4452-9a48-429ee18c43e5\",\"moduleSequenceNumber\":154}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[3214920,2356,0,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":15274.292485781209,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.208,\"onlineExpGained\":21341.08774891541,\"onlineMoneyMade\":3214920,\"onlineRunningTime\":118822.00999989083,\"pid\":13,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///52133bf3-a2a8-44ef-b671-0105e52c1b88\",\"moduleSequenceNumber\":152}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,806,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5153.159134975085,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.223000000005,\"onlineExpGained\":7129.17489405322,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":14,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///2a1109a9-e6f8-49e9-8a25-56d1874c5785\",\"moduleSequenceNumber\":153}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,0,645]},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4125.714214663085,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.233,\"onlineExpGained\":5705.108941270874,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":15,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///3e0d9a86-507e-4452-9a48-429ee18c43e5\",\"moduleSequenceNumber\":154}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[4688996,1876,0,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":11994.840366589078,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.244,\"onlineExpGained\":17146.284779306974,\"onlineMoneyMade\":4688996,\"onlineRunningTime\":118822.00999989083,\"pid\":16,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///52133bf3-a2a8-44ef-b671-0105e52c1b88\",\"moduleSequenceNumber\":152}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,663,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4173.504697493405,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.255000000005,\"onlineExpGained\":5864.321283817969,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":17,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///2a1109a9-e6f8-49e9-8a25-56d1874c5785\",\"moduleSequenceNumber\":153}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,0,531]},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3345.1763542221106,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.265,\"onlineExpGained\":4696.764105139276,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":18,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///3e0d9a86-507e-4452-9a48-429ee18c43e5\",\"moduleSequenceNumber\":154}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[5369383,187,0,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2325.6953692799557,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.288,\"onlineExpGained\":3191.3229550550654,\"onlineMoneyMade\":5369383,\"onlineRunningTime\":118822.00999989083,\"pid\":19,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///52133bf3-a2a8-44ef-b671-0105e52c1b88\",\"moduleSequenceNumber\":152}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,106,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1095.944774458165,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.312000000005,\"onlineExpGained\":1500.134071999273,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":20,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///2a1109a9-e6f8-49e9-8a25-56d1874c5785\",\"moduleSequenceNumber\":153}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,0,85]},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":879.3048788193211,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.328,\"onlineExpGained\":1202.9376992447003,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":21,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///3e0d9a86-507e-4452-9a48-429ee18c43e5\",\"moduleSequenceNumber\":154}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///35b7d0b5-b922-4b19-90a1-e8b150722d57\",\"moduleSequenceNumber\":441}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet servers_to_scan = ['home'];\\n\\tlet hacked_servers = [];\\n\\n\\tlet counter = 0;\\n\\n\\twhile (servers_to_scan.length>0) {\\n\\t\\tconst server = servers_to_scan.pop();\\n\\n\\t\\thacked_servers.push(server);\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tns.print('on server: ' + server);\\n\\t\\tns.print('\\\\tneighbors:\\\\n' + JSON.stringify(neighbors));\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (!hacked_servers.includes(neighbor)) {\\n\\t\\t\\t\\tns.print('Copying script to ' + neighbor);\\n\\t\\t\\t\\tns.scp(['hack-server.js', 'grow-server.js', 'weaken-server.js'], neighbor);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tns.print('Hacking ' + neighbor + ' from ' + server);\\n\\t\\t\\tns.exec('hack-server.js', server, 1, neighbor);\\n\\t\\t\\t\\n\\t\\t\\tns.print('Growing ' + neighbor + ' from ' + server);\\n\\t\\t\\tns.exec('grow-server.js', server, 1, neighbor);\\n\\t\\t\\t\\n\\t\\t\\tns.print('Weakening ' + neighbor + ' from ' + server);\\n\\t\\t\\tns.exec('weaken-server.js', server, 1, neighbor);\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\tif (!servers_to_scan.includes(neighbor) && !hacked_servers.includes(neighbor)) {\\n\\t\\t\\t\\tservers_to_scan.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (counter>=100) {\\n\\t\\t\\tns.print('Counter is at ' + counter);\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tcounter++;\\n\\t}\\n}\",\"filename\":\"launch-hacking.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"launch-hacking.js\",\"url\":\"blob:file:///1217bd6d-eb2f-45fd-9ac8-f7ca82298911\",\"moduleSequenceNumber\":2123}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home\",\"moduleSequenceNumber\":213,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///a61a2ed9-3283-4c1b-a1c9-1fe3a092ea93\",\"moduleSequenceNumber\":442}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///8727ec6e-1681-4cf3-a2c3-5d4b4b79f800\",\"moduleSequenceNumber\":443}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"85.4.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ecorp\",\"moduleSequenceNumber\":216,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"ecorp\",\"moduleSequenceNumber\":217,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"ecorp\",\"moduleSequenceNumber\":218,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":67900681460,\"moneyMax\":1697517036500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1317,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-128317.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":370710684089,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-128753.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[172,131,88,169,24,115,11,133,49,182,83,11],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"65.5.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"megacorp\",\"moduleSequenceNumber\":219,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"megacorp\",\"moduleSequenceNumber\":220,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"megacorp\",\"moduleSequenceNumber\":221,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":52284761090,\"moneyMax\":1307119027250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1140,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-188524.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[9,189,187,175,81,111,55,98,149,102,121,132,164,150,52,86,171,159,186,39,61,166,8,60,70,151,13,154,200,102,140,111,183,82,113,51]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"28.1.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"b-and-a\",\"moduleSequenceNumber\":222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"b-and-a\",\"moduleSequenceNumber\":223,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"b-and-a\",\"moduleSequenceNumber\":224,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":15513940173,\"moneyMax\":387848504325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1072,\"serverGrowth\":66}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-897237.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1110001011110000010100110010010100101110101110011100001110010100\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"49.4.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"blade\",\"moduleSequenceNumber\":225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"blade\",\"moduleSequenceNumber\":226,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"blade\",\"moduleSequenceNumber\":227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":27694267534,\"moneyMax\":692356688350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1080,\"serverGrowth\":62}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"78.1.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nwo\",\"moduleSequenceNumber\":228,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"nwo\",\"moduleSequenceNumber\":229,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"nwo\",\"moduleSequenceNumber\":230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":37279995469,\"moneyMax\":931999886725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1207,\"serverGrowth\":82}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-939139.cct\",\"type\":\"Array Jumping Game II\",\"data\":[4,5,3,4,0,2,3,0,0,0,3,0,0,2,2,5,2],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-620543.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[1,0,-10,3,-5,9,5,5,2,2,4,-1],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"13.3.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"clarkinc\",\"moduleSequenceNumber\":231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"clarkinc\",\"moduleSequenceNumber\":232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"clarkinc\",\"moduleSequenceNumber\":233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":19463082778,\"moneyMax\":486577069450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":961,\"serverGrowth\":52}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"7.6.3.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omnitek\",\"moduleSequenceNumber\":234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"omnitek\",\"moduleSequenceNumber\":235,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"omnitek\",\"moduleSequenceNumber\":236,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":20980113704,\"moneyMax\":524502842600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":954,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"58.0.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"4sigma\",\"moduleSequenceNumber\":237,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"4sigma\",\"moduleSequenceNumber\":238,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"4sigma\",\"moduleSequenceNumber\":239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":15583338617,\"moneyMax\":389583465425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":972,\"serverGrowth\":82}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-93756.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"3x3nfg7zpccnfgycnfgycZB5ChsDx6e6f6g81ZZZZZy81ZZZ81ZZZyZZyZZyZZyovT0ATovByeN74UM\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"6.5.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":29717857624,\"moneyMax\":742946440600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1163,\"serverGrowth\":94}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"12.2.5.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1709156342,\"moneyMax\":42728908550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1123,\"serverGrowth\":95}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-912340.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,2,0,7,3,3,5,0,8,10,2,0,1,9,2,4,9,2,6,0,4,7,0,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"2.0.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1164,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"9.0.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"stormtech\",\"moduleSequenceNumber\":249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"stormtech\",\"moduleSequenceNumber\":250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"stormtech\",\"moduleSequenceNumber\":251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":1027996393,\"moneyMax\":25699909825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1020,\"serverGrowth\":81}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"55.7.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"defcomm\",\"moduleSequenceNumber\":252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"defcomm\",\"moduleSequenceNumber\":253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"defcomm\",\"moduleSequenceNumber\":254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":856250469,\"moneyMax\":21406261725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":998,\"serverGrowth\":73}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"7.4.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"infocomm\",\"moduleSequenceNumber\":255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"infocomm\",\"moduleSequenceNumber\":256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"infocomm\",\"moduleSequenceNumber\":257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":728895747,\"moneyMax\":18222393675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":912,\"serverGrowth\":40}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"41.1.1.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"helios\",\"moduleSequenceNumber\":258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"helios\",\"moduleSequenceNumber\":259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"helios\",\"moduleSequenceNumber\":260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":688756463,\"moneyMax\":17218911575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":897,\"serverGrowth\":70}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"81.2.3.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"vitalife\",\"moduleSequenceNumber\":261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"vitalife\",\"moduleSequenceNumber\":262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"vitalife\",\"moduleSequenceNumber\":263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":743580229,\"moneyMax\":18589505725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":854,\"serverGrowth\":78}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"42.9.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"icarus\",\"moduleSequenceNumber\":264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"icarus\",\"moduleSequenceNumber\":265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"icarus\",\"moduleSequenceNumber\":266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":957028792,\"moneyMax\":23925719800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":915,\"serverGrowth\":93}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-803083.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0],[0,0,1,0,1],[0,0,1,0,0],[0,0,0,0,0],[0,0,0,0,0],[1,0,0,0,0],[0,0,0,0,1],[0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-841860.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9yUPJhZt7a2621b613BQ3583JrD495I6abb739tWvEbMsut564l1C6117OPtGRvj\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"83.0.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"univ-energy\",\"moduleSequenceNumber\":268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"univ-energy\",\"moduleSequenceNumber\":269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1115867789,\"moneyMax\":27896694725,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":883,\"serverGrowth\":89}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"67.2.0.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"titan-labs\",\"moduleSequenceNumber\":271,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"titan-labs\",\"moduleSequenceNumber\":272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":779167287,\"moneyMax\":19479182175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":871,\"serverGrowth\":70}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"7.3.8.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"microdyne\",\"moduleSequenceNumber\":273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"microdyne\",\"moduleSequenceNumber\":274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"microdyne\",\"moduleSequenceNumber\":275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":519340136,\"moneyMax\":12983503400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":854,\"serverGrowth\":80}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-587892.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[22,31],[24,33],[23,31],[12,16],[17,21],[15,20],[2,7],[7,11],[21,25],[14,23],[20,27],[8,17],[25,31],[1,3],[5,6],[14,23]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"90.7.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":869817685,\"moneyMax\":21745442125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":862,\"serverGrowth\":77}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-981498.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[67,26,4,120,35,184,19,112]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"90.9.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":772020732,\"moneyMax\":19300518300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":846,\"serverGrowth\":80}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-41958.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-8,-2,-6,-6,-9,6,5,8,-6,3,2,-3,-7,-4,6,2,3,-3,-1,7,-5,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"37.6.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"aerocorp\",\"moduleSequenceNumber\":282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"aerocorp\",\"moduleSequenceNumber\":283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"aerocorp\",\"moduleSequenceNumber\":284,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1009656012,\"moneyMax\":25241400300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":921,\"serverGrowth\":58}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"94.0.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omnia\",\"moduleSequenceNumber\":285,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"omnia\",\"moduleSequenceNumber\":286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"omnia\",\"moduleSequenceNumber\":287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":958282016,\"moneyMax\":23957050400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":860,\"serverGrowth\":60}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"8.7.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zb-def\",\"moduleSequenceNumber\":288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"zb-def\",\"moduleSequenceNumber\":289,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"zb-def\",\"moduleSequenceNumber\":290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"univ-energy\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":974966308,\"moneyMax\":24374157700,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":802,\"serverGrowth\":74}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-61047.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":1009,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"39.0.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":765627009,\"moneyMax\":19140675225,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":845,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-82794.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"11001000000100110101111010111001\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"30.0.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"solaris\",\"moduleSequenceNumber\":294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"solaris\",\"moduleSequenceNumber\":295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"solaris\",\"moduleSequenceNumber\":296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":819963498,\"moneyMax\":20499087450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":80}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"33.6.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"deltaone\",\"moduleSequenceNumber\":297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"deltaone\",\"moduleSequenceNumber\":298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"deltaone\",\"moduleSequenceNumber\":299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"icarus\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1551117471,\"moneyMax\":38777936775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":820,\"serverGrowth\":55}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-188161.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0110000010010000\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"74.1.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"global-pharm\",\"moduleSequenceNumber\":301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"global-pharm\",\"moduleSequenceNumber\":302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1599942638,\"moneyMax\":39998565950,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":793,\"serverGrowth\":83}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-46992.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[5,10],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"4.9.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nova-med\",\"moduleSequenceNumber\":303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"nova-med\",\"moduleSequenceNumber\":304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"nova-med\",\"moduleSequenceNumber\":305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":1189166642,\"moneyMax\":29729166050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":80}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-69127.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[62,124,111,129,161,109,32,48,15,105,111,185,24,90,84,73,136,41,96,16,143,109,133,89,81,79,7,73,114,146,97,198,165,22,136,30,93]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"20.7.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zeus-med\",\"moduleSequenceNumber\":306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"zeus-med\",\"moduleSequenceNumber\":307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"zeus-med\",\"moduleSequenceNumber\":308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1376369648,\"moneyMax\":34409241200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":806,\"serverGrowth\":70}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"57.6.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"unitalife\",\"moduleSequenceNumber\":309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"unitalife\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"unitalife\",\"moduleSequenceNumber\":311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aerocorp\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1037349641,\"moneyMax\":25933741025,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":785,\"serverGrowth\":71}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"66.5.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":792553322,\"moneyMax\":19813833050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":659,\"serverGrowth\":62}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"62.0.8.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"rho-construction\",\"moduleSequenceNumber\":316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"rho-construction\",\"moduleSequenceNumber\":317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":558047563,\"moneyMax\":13951189075,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":500,\"serverGrowth\":59}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"33.6.7.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":716284399,\"moneyMax\":17907109975,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":569,\"serverGrowth\":53}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-767288.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"148236162139\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"41.4.9.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"aevum-police\",\"moduleSequenceNumber\":322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"aevum-police\",\"moduleSequenceNumber\":323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":220525966,\"moneyMax\":5513149150,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":409,\"serverGrowth\":42}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-971192.cct\",\"type\":\"Total Ways to Sum\",\"data\":72,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-573278.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"17511883162\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"63.5.5.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"netlink\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":180313569,\"moneyMax\":4507839225,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":399,\"serverGrowth\":40}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"70.8.3.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"zb-institute\",\"moduleSequenceNumber\":328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"zb-institute\",\"moduleSequenceNumber\":329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":867481129,\"moneyMax\":21687028225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":744,\"serverGrowth\":81}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-972557.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1805325361\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"81.2.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"summit-uni\",\"moduleSequenceNumber\":331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"summit-uni\",\"moduleSequenceNumber\":332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":242629795,\"moneyMax\":6065744875,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":449,\"serverGrowth\":58}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"58.7.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"syscore\",\"moduleSequenceNumber\":333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"syscore\",\"moduleSequenceNumber\":334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"syscore\",\"moduleSequenceNumber\":335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":439680349,\"moneyMax\":10992008725,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":606,\"serverGrowth\":65}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"21.8.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"catalyst\",\"moduleSequenceNumber\":336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"catalyst\",\"moduleSequenceNumber\":337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"catalyst\",\"moduleSequenceNumber\":338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":462026461,\"moneyMax\":11550661525,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":408,\"serverGrowth\":40}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"27.0.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"the-hub\",\"moduleSequenceNumber\":339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"the-hub\",\"moduleSequenceNumber\":340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"the-hub\",\"moduleSequenceNumber\":341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":151062141,\"moneyMax\":3776553525,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":307,\"serverGrowth\":51}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-664206.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[9,[[4,7],[2,7],[5,6],[3,7],[1,3],[4,8],[1,2],[0,8],[0,5],[2,8]]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"43.5.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"computek\",\"moduleSequenceNumber\":342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"computek\",\"moduleSequenceNumber\":343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"computek\",\"moduleSequenceNumber\":344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":225042752,\"moneyMax\":5626068800,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":375,\"serverGrowth\":53}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"5.6.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"netlink\",\"moduleSequenceNumber\":345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"netlink\",\"moduleSequenceNumber\":346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"netlink\",\"moduleSequenceNumber\":347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":405,\"serverGrowth\":61}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-512049.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":36441158841,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-706964.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":49146,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"60.2.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":74271908,\"moneyMax\":1856797700,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":284,\"serverGrowth\":47}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-612466.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"FaNpWQ2lpNpWQL3L3L3L3L3LMLiTMLiTMLixF4xF4xF4xF4xkx2j66M6dyQdyQdmqSfwQdmqS7S7S7\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"64.9.0.4\",\"isConnectedTo\":true,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.343,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":22,\"ramUsage\":2.4,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///1b63dac2-c20b-47dd-a353-ac4ef746245b\",\"moduleSequenceNumber\":571}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///b61e84a9-714b-41cc-92ad-b61e7fe46259\",\"moduleSequenceNumber\":444}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"n00dles\",\"moduleSequenceNumber\":352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"n00dles\",\"moduleSequenceNumber\":353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.002,\"minDifficulty\":1,\"moneyAvailable\":1734557,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-881607.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"INBOXENTERMEDIAPASTETABLE\",\"DATABASE\"],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"5.1.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":7.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.359000000004,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":23,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///d3834a51-0e35-45ea-9d67-e6097b1c5450\",\"moduleSequenceNumber\":568}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.375,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":24,\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///ecbc9b78-b269-468b-bf0b-e9607349365c\",\"moduleSequenceNumber\":569}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.391,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":25,\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///42661529-887d-48e4-b61d-1041ed74a5af\",\"moduleSequenceNumber\":570}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///f4459985-8dfa-4f30-905a-b7c96406f1b8\",\"moduleSequenceNumber\":445}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///350f2bf2-56d1-427e-87ff-8f4e697f1925\",\"moduleSequenceNumber\":446}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///574174c2-6b1e-4f62-a6bf-624707dfb20a\",\"moduleSequenceNumber\":447}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.004,\"minDifficulty\":3,\"moneyAvailable\":231.62041352928992,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-713496.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"mD1ho2Yh1AnNOF1AnNRQNRQNRQNL6XjNiL6oT6oT6oT6oAflmU6MoAflmdTdicuKxIdTdicuKxIZCC\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"54.0.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.407,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":26,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.441,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":27,\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.464,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":28,\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[2922828,2355,0,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":18355.55976344299,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.482,\"onlineExpGained\":25662.376079548438,\"onlineMoneyMade\":2922828,\"onlineRunningTime\":118822.00999989083,\"pid\":29,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,813,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6202.951201695936,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.514,\"onlineExpGained\":8629.30896605236,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":30,\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,0,651]},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4970.008735684505,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.527,\"onlineExpGained\":6909.815666543797,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":31,\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///88fc912d-d89a-4ea7-b4c6-451d622242b4\",\"moduleSequenceNumber\":451}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///eedcef57-ae28-4575-b851-f34a576cecbc\",\"moduleSequenceNumber\":452}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///d0728a6a-d16f-4127-ac7e-071290117d15\",\"moduleSequenceNumber\":453}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.0099999999999993,\"minDifficulty\":3,\"moneyAvailable\":234.07447798808965,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"21.9.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.538,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":32,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.548,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":33,\"ramUsage\":2.45,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.557,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":34,\"ramUsage\":2.45,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[4381281,359,0,0]},\"filename\":\"hack-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3621.180736475927,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.568,\"onlineExpGained\":5108.062656719246,\"onlineMoneyMade\":4381281,\"onlineRunningTime\":118822.00999989083,\"pid\":35,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,178,0]},\"filename\":\"grow-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1583.3957809559204,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.577000000005,\"onlineExpGained\":2204.2064312630887,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":36,\"ramUsage\":2.45,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,0,142]},\"filename\":\"weaken-server.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1260.0266594993957,\"offlineMoneyMade\":0,\"offlineRunningTime\":40142.591,\"onlineExpGained\":1758.4118721312286,\"onlineMoneyMade\":0,\"onlineRunningTime\":118822.00999989083,\"pid\":37,\"ramUsage\":2.45,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-server.js\",\"url\":\"blob:file:///62559318-5c50-44d3-88af-7f941d31d9c6\",\"moduleSequenceNumber\":457}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"joesguns\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-server.js\",\"url\":\"blob:file:///ffadf03e-5c48-4922-8d1c-5ed7d1ea1df3\",\"moduleSequenceNumber\":458}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"joesguns\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-server.js\",\"url\":\"blob:file:///1eb83375-8899-4655-9c26-35d09787b043\",\"moduleSequenceNumber\":459}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"joesguns\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.009999999999999,\"minDifficulty\":5,\"moneyAvailable\":243.05471868629425,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"91.7.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zer0\",\"moduleSequenceNumber\":363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"zer0\",\"moduleSequenceNumber\":364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"zer0\",\"moduleSequenceNumber\":365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":17.03599999999974,\"minDifficulty\":8,\"moneyAvailable\":3907301.576388946,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"43.5.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"nectar-net\",\"moduleSequenceNumber\":367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"nectar-net\",\"moduleSequenceNumber\":368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.007999999999999,\"minDifficulty\":7,\"moneyAvailable\":1625.0085096941293,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"83.5.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"neo-net\",\"moduleSequenceNumber\":369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"neo-net\",\"moduleSequenceNumber\":370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"neo-net\",\"moduleSequenceNumber\":371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"51.2.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"silver-helix\",\"moduleSequenceNumber\":373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"silver-helix\",\"moduleSequenceNumber\":374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-319409.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[13,[[5,12],[2,5],[0,2],[7,8],[5,11],[6,8],[1,9],[0,8],[0,10],[1,10],[6,10],[1,10],[3,5],[6,12],[1,8],[4,8],[5,9],[4,11],[1,11],[0,9],[3,7],[4,10],[2,4],[2,7]]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"89.0.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.009999999999999,\"minDifficulty\":5,\"moneyAvailable\":1778.655532808953,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"22.4.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.009999999999999,\"minDifficulty\":5,\"moneyAvailable\":26444.983099676563,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-145425.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0],[0,0,0,1,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,1,0,0],[0,1,0,0,1,0],[0,0,0,0,0,1],[0,0,1,1,0,0],[0,0,1,0,0,0],[0,0,1,1,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"19.2.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"phantasy\",\"moduleSequenceNumber\":381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"phantasy\",\"moduleSequenceNumber\":382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"phantasy\",\"moduleSequenceNumber\":383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-261506.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"218182103139\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"37.4.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"max-hardware\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"max-hardware\",\"moduleSequenceNumber\":386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"joesguns\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"7.6.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omega-net\",\"moduleSequenceNumber\":387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"omega-net\",\"moduleSequenceNumber\":388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"omega-net\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"netlink\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":62065457,\"moneyMax\":1551636425,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":211,\"serverGrowth\":39}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"54.4.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":38,\"minDifficulty\":13,\"moneyAvailable\":52617739,\"moneyMax\":1315443475,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":261,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"95.3.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"iron-gym\",\"moduleSequenceNumber\":394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"iron-gym\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":25.153999999999872,\"minDifficulty\":10,\"moneyAvailable\":15215782.668863853,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-953597.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":743399,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"3.6.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":523,\"serverGrowth\":32}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"32.2.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":986,\"serverGrowth\":59}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"14.7.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"lexo-corp\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":726,\"serverGrowth\":47}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"20.0.9.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":527,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"43.5.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":344,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-876212.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,0,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"83.8.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":207,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-38303.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"SjfddddddddsdsdsdsdX2sdsssdX2s541G8STvvvvvvvvttFuTagb5BQBQBQBQBQBIQBIQBIQ\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-455036.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"2hm914yUmm331Y932vD877dKmWvDY811y27842aUuOm0922gr45\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"69.6.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\".\",\"moduleSequenceNumber\":414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\".\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\".\",\"moduleSequenceNumber\":416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":549,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"66.6.1.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"CSEC\",\"moduleSequenceNumber\":417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"CSEC\",\"moduleSequenceNumber\":418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"CSEC\",\"moduleSequenceNumber\":419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\",\"neo-net\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":58,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"37.2.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.hack(target);\\n    }\\n}\",\"filename\":\"hack-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"The-Cave\",\"moduleSequenceNumber\":420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.grow(target);\\n    }\\n}\",\"filename\":\"grow-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"The-Cave\",\"moduleSequenceNumber\":421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function buildHackingProgramList(ns) {\\n    return [\\n        {name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\"},\\n        {name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\"},\\n        {name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\"},\\n        {name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\"},\\n        {name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\"}\\n    ];\\n}\\n\\nfunction countAvailablePrograms(ns, hackingPrograms) {\\n    var count = 0;\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            ns.print(program.executableName + ' is available');\\n            count++;\\n        }        \\n    }\\n\\n    ns.print(\\\"There are \\\" + count + \\\" existing programs\\\");\\n\\n    return count;\\n}\\n\\nexport async function main(ns) {\\n    // ns.print(\\\"arguments: \\\" + JSON.stringify(arguments));\\n    // arguments: {\\n    //    \\\"0\\\":{\\n    //        \\\"args\\\":[\\\"n00dles\\\"],\\n    //        \\\"enums\\\":{\\n    //            \\\"toast\\\":{\\n    //                \\\"SUCCESS\\\":\\\"success\\\",\\n    //                \\\"WARNING\\\":\\\"warning\\\",\\n    //                \\\"ERROR\\\":\\\"error\\\",\\n    //                \\\"INFO\\\":\\\"info\\\"\\n    //            }\\n    //        },\\n    //        \\\"singularity\\\":{},\\n    //        \\\"gang\\\":{},\\n    //        \\\"bladeburner\\\":{},\\n    //        \\\"codingcontract\\\":{},\\n    //        \\\"sleeve\\\":{},\\n    //        \\\"corporation\\\":{},\\n    //        \\\"stanek\\\":{},\\n    //        \\\"infiltration\\\":{},\\n    //        \\\"ui\\\":{},\\n    //        \\\"formulas\\\":{\\n    //            \\\"reputation\\\":{},\\n    //            \\\"skills\\\":{},\\n    //            \\\"hacking\\\":{},\\n    //            \\\"hacknetNodes\\\":{},\\n    //            \\\"hacknetServers\\\":{},\\n    //            \\\"gang\\\":{},\\n    //            \\\"work\\\":{}\\n    //        },\\n    //        \\\"stock\\\":{},\\n    //        \\\"grafting\\\":{},\\n    //        \\\"hacknet\\\":{},\\n    //        \\\"heart\\\":{}\\n    //    }\\n    //  }\\n    const args = arguments[\\\"0\\\"].args;\\n    var target = args[0];\\n    ns.print('hacking server: ' + target);\\n\\n    const hackingPrograms = buildHackingProgramList(ns);\\n\\n    while (true) {\\n        var playerHackingLevel = ns.getHackingLevel();\\n        var machineHackingLevel = ns.getServerRequiredHackingLevel(target);\\n        ns.print('Level player, level machine: ' + playerHackingLevel + ', ' + machineHackingLevel);\\n\\n        var requiredNumberOfPorts = ns.getServerNumPortsRequired(target);\\n        var currentNumberOfPorts = countAvailablePrograms(ns, hackingPrograms);\\n        ns.print('Required num ports, current num ports: ' + requiredNumberOfPorts + ', ' + currentNumberOfPorts);\\n        \\n        if (playerHackingLevel>=machineHackingLevel && currentNumberOfPorts>=requiredNumberOfPorts) {\\n            break;\\n        }\\n\\n        await ns.sleep(1000*60*2);  // 1000 * 60 * 2 = 2 min\\n    }\\n\\n    for (const program of hackingPrograms) {\\n        if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n            program.functionName(target);\\n        }        \\n    }\\n\\n    if (ns.hasRootAccess(target) == false) {\\n        ns.nuke(target);\\n    }\\n\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\",\"filename\":\"weaken-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"The-Cave\",\"moduleSequenceNumber\":422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"86.7.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"97.2.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":1.0721369868491106}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":1.0721369868491106}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":27.2497,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":74428.35181375327}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#98C379\",\"primary\":\"#98C379\",\"primarydark\":\"#98C379\",\"successlight\":\"#98C379\",\"success\":\"#98C379\",\"successdark\":\"#98C379\",\"errorlight\":\"#E06C75\",\"error\":\"#BE5046\",\"errordark\":\"#BE5046\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E5C07B\",\"warning\":\"#E5C07B\",\"warningdark\":\"#D19A66\",\"infolight\":\"#61AFEF\",\"info\":\"#61AFEF\",\"infodark\":\"#61AFEF\",\"welllight\":\"#4B5263\",\"well\":\"#282C34\",\"white\":\"#ABB2BF\",\"black\":\"#282C34\",\"hp\":\"#E06C75\",\"money\":\"#E5C07B\",\"hack\":\"#98C379\",\"combat\":\"#ABB2BF\",\"cha\":\"#C678DD\",\"int\":\"#61AFEF\",\"rep\":\"#ABB2BF\",\"disabled\":\"#56B6C2\",\"backgroundprimary\":\"#282C34\",\"backgroundsecondary\":\"#21252B\",\"button\":\"#4B5263\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-10,\"y\":675,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"25","AllGangsSave":"","LastExportBonus":"1664132104295","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}