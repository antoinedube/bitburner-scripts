function computeTargetLevel(currentLevel, targetLevel, a, b) {
    return (a * currentLevel + b * targetLevel) / (a + b);
}
export async function main(ns) {
    ns.disableLog('getServerSecurityLevel');
    ns.disableLog('getServerMinSecurityLevel');
    ns.disableLog('getServerMoneyAvailable');
    ns.disableLog('getServerMaxMoney');
    const decimalPlaces = 3;
    let a = 10;
    let b = 1;
    const targetHost = ns.getHostname();
    while (true) {
        const currentLevel = ns.getServerSecurityLevel(targetHost);
        const minLevel = ns.getServerMinSecurityLevel(targetHost);
        const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);
        const currentMoney = ns.getServerMoneyAvailable(targetHost);
        const maxMoney = ns.getServerMaxMoney(targetHost);
        const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);
        ns.print(`a: ${a}, b: ${b}`);
        ns.print('Security\tcurrent: ' + currentLevel.toFixed(decimalPlaces)
            + ', minimum: ' + minLevel.toFixed(decimalPlaces)
            + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));
        ns.print('Money\tcurrent: ' + currentMoney.toFixed(decimalPlaces)
            + ', maximum: ' + maxMoney.toFixed(decimalPlaces)
            + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));
        for (let i = 0; i < 25; i++) {
            while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {
                ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)
                    + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));
                await ns.weaken(targetHost);
            }
            while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {
                ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)
                    + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));
                await ns.grow(targetHost);
            }
            await ns.hack(targetHost);
        }
        if (a > 1) {
            a--;
        }
        else if (b < 100) {
            b++;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay1zZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zY3JpcHRzL2hhY2stc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLFNBQVMsa0JBQWtCLENBQUMsWUFBb0IsRUFBRSxXQUFtQixFQUFFLENBQVMsRUFBRSxDQUFTO0lBQ3pGLE9BQU8sQ0FBQyxDQUFDLEdBQUcsWUFBWSxHQUFHLENBQUMsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN4RCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixFQUFFLENBQUMsVUFBVSxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFDeEMsRUFBRSxDQUFDLFVBQVUsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0lBQzNDLEVBQUUsQ0FBQyxVQUFVLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUN6QyxFQUFFLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFFbkMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNYLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVWLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUVwQyxPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMzRCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUQsTUFBTSxtQkFBbUIsR0FBRyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3RSxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUQsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2xELE1BQU0saUJBQWlCLEdBQUcsa0JBQWtCLENBQUMsWUFBWSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFM0UsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzdCLEVBQUUsQ0FBQyxLQUFLLENBQUMscUJBQXFCLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7Y0FDaEUsYUFBYSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO2NBQy9DLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUMvRCxFQUFFLENBQUMsS0FBSyxDQUFDLGtCQUFrQixHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO2NBQzdELGFBQWEsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztjQUMvQyxZQUFZLEdBQUcsaUJBQWlCLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFFN0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMzQixPQUFPLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLEdBQUcsbUJBQW1CLEVBQUU7Z0JBQ3pFLEVBQUUsQ0FBQyxLQUFLLENBQUMsc0JBQXNCLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7c0JBQzFGLEtBQUssR0FBRyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztnQkFDeEQsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQzdCO1lBRUQsT0FBTyxFQUFFLENBQUMsdUJBQXVCLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxHQUFHLGlCQUFpQixFQUFFO2dCQUN4RSxFQUFFLENBQUMsS0FBSyxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztzQkFDbEYsS0FBSyxHQUFHLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO2dCQUN0RCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDM0I7WUFFRCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDM0I7UUFFRCxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDVCxDQUFDLEVBQUUsQ0FBQztTQUNMO2FBQU0sSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFO1lBQ2xCLENBQUMsRUFBRSxDQUFDO1NBQ0w7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcblxuZnVuY3Rpb24gY29tcHV0ZVRhcmdldExldmVsKGN1cnJlbnRMZXZlbDogbnVtYmVyLCB0YXJnZXRMZXZlbDogbnVtYmVyLCBhOiBudW1iZXIsIGI6IG51bWJlcik6IG51bWJlciB7XG4gIHJldHVybiAoYSAqIGN1cnJlbnRMZXZlbCArIGIgKiB0YXJnZXRMZXZlbCkgLyAoYSArIGIpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgbnMuZGlzYWJsZUxvZygnZ2V0U2VydmVyU2VjdXJpdHlMZXZlbCcpO1xuICBucy5kaXNhYmxlTG9nKCdnZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsJyk7XG4gIG5zLmRpc2FibGVMb2coJ2dldFNlcnZlck1vbmV5QXZhaWxhYmxlJyk7XG4gIG5zLmRpc2FibGVMb2coJ2dldFNlcnZlck1heE1vbmV5Jyk7XG5cbiAgY29uc3QgZGVjaW1hbFBsYWNlcyA9IDM7XG4gIGxldCBhID0gMTA7XG4gIGxldCBiID0gMTtcblxuICBjb25zdCB0YXJnZXRIb3N0ID0gbnMuZ2V0SG9zdG5hbWUoKTtcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGNvbnN0IGN1cnJlbnRMZXZlbCA9IG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0SG9zdCk7XG4gICAgY29uc3QgbWluTGV2ZWwgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldEhvc3QpO1xuICAgIGNvbnN0IHRhcmdldFNlY3VyaXR5TGV2ZWwgPSBjb21wdXRlVGFyZ2V0TGV2ZWwoY3VycmVudExldmVsLCBtaW5MZXZlbCwgYSwgYik7XG4gICAgY29uc3QgY3VycmVudE1vbmV5ID0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0SG9zdCk7XG4gICAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXRIb3N0KTtcbiAgICBjb25zdCB0YXJnZXRNb25leUFtb3VudCA9IGNvbXB1dGVUYXJnZXRMZXZlbChjdXJyZW50TW9uZXksIG1heE1vbmV5LCBhLCBiKTtcblxuICAgIG5zLnByaW50KGBhOiAke2F9LCBiOiAke2J9YCk7XG4gICAgbnMucHJpbnQoJ1NlY3VyaXR5XFx0Y3VycmVudDogJyArIGN1cnJlbnRMZXZlbC50b0ZpeGVkKGRlY2ltYWxQbGFjZXMpXG4gICAgICArICcsIG1pbmltdW06ICcgKyBtaW5MZXZlbC50b0ZpeGVkKGRlY2ltYWxQbGFjZXMpXG4gICAgICArICcsIHRhcmdldDogJyArIHRhcmdldFNlY3VyaXR5TGV2ZWwudG9GaXhlZChkZWNpbWFsUGxhY2VzKSk7XG4gICAgbnMucHJpbnQoJ01vbmV5XFx0Y3VycmVudDogJyArIGN1cnJlbnRNb25leS50b0ZpeGVkKGRlY2ltYWxQbGFjZXMpXG4gICAgICArICcsIG1heGltdW06ICcgKyBtYXhNb25leS50b0ZpeGVkKGRlY2ltYWxQbGFjZXMpXG4gICAgICArICcsIHRhcmdldDogJyArIHRhcmdldE1vbmV5QW1vdW50LnRvRml4ZWQoZGVjaW1hbFBsYWNlcykpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyNTsgaSsrKSB7XG4gICAgICB3aGlsZSAobnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbCh0YXJnZXRIb3N0KSA+IDEuMDUgKiB0YXJnZXRTZWN1cml0eUxldmVsKSB7XG4gICAgICAgIG5zLnByaW50KCctLT4gU2VjdXJpdHkgbGV2ZWw6ICcgKyBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldEhvc3QpLnRvRml4ZWQoZGVjaW1hbFBsYWNlcylcbiAgICAgICAgICArICcgPiAnICsgdGFyZ2V0U2VjdXJpdHlMZXZlbC50b0ZpeGVkKGRlY2ltYWxQbGFjZXMpKTtcbiAgICAgICAgYXdhaXQgbnMud2Vha2VuKHRhcmdldEhvc3QpO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0SG9zdCkgPCAwLjk1ICogdGFyZ2V0TW9uZXlBbW91bnQpIHtcbiAgICAgICAgbnMucHJpbnQoJy0tPiBNb25leTogJyArIG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldEhvc3QpLnRvRml4ZWQoZGVjaW1hbFBsYWNlcylcbiAgICAgICAgICArICcgPCAnICsgdGFyZ2V0TW9uZXlBbW91bnQudG9GaXhlZChkZWNpbWFsUGxhY2VzKSk7XG4gICAgICAgIGF3YWl0IG5zLmdyb3codGFyZ2V0SG9zdCk7XG4gICAgICB9XG5cbiAgICAgIGF3YWl0IG5zLmhhY2sodGFyZ2V0SG9zdCk7XG4gICAgfVxuXG4gICAgaWYgKGEgPiAxKSB7XG4gICAgICBhLS07XG4gICAgfSBlbHNlIGlmIChiIDwgMTAwKSB7XG4gICAgICBiKys7XG4gICAgfVxuICB9XG59XG4iXX0=