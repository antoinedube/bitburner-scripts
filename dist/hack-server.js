function computeTargetLevel(currentLevel, targetLevel, a, b) {
    return (a * currentLevel + b * targetLevel) / (a + b);
}
/** @param {NS} ns */
export async function main(ns) {
    ns.disableLog('getServerSecurityLevel');
    ns.disableLog('getServerMinSecurityLevel');
    ns.disableLog('getServerMoneyAvailable');
    ns.disableLog('getServerMaxMoney');
    const decimalPlaces = 3;
    let a = 10;
    let b = 1;
    const targetHost = ns.getHostname();
    while (true) {
        const currentLevel = ns.getServerSecurityLevel(targetHost);
        const minLevel = ns.getServerMinSecurityLevel(targetHost);
        const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);
        const currentMoney = ns.getServerMoneyAvailable(targetHost);
        const maxMoney = ns.getServerMaxMoney(targetHost);
        const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);
        ns.print(`a: ${a}, b: ${b}`);
        ns.print('Security\tcurrent: ' + currentLevel.toFixed(decimalPlaces)
            + ', minimum: ' + minLevel.toFixed(decimalPlaces)
            + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));
        ns.print('Money\tcurrent: ' + currentMoney.toFixed(decimalPlaces)
            + ', maximum: ' + maxMoney.toFixed(decimalPlaces)
            + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));
        for (let i = 0; i < 25; i++) {
            while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {
                ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)
                    + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));
                await ns.weaken(targetHost);
            }
            while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {
                ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)
                    + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));
                await ns.grow(targetHost);
            }
            await ns.hack(targetHost);
        }
        if (a > 1) {
            a--;
        }
        else if (b < 100) {
            b++;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay1zZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zY3JpcHRzL2hhY2stc2VydmVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUN6RCxPQUFPLENBQUMsQ0FBQyxHQUFHLFlBQVksR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDeEQsQ0FBQztBQUVELHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzNCLEVBQUUsQ0FBQyxVQUFVLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUN4QyxFQUFFLENBQUMsVUFBVSxDQUFDLDJCQUEyQixDQUFDLENBQUM7SUFDM0MsRUFBRSxDQUFDLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQ3pDLEVBQUUsQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUVuQyxNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUM7SUFDeEIsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ1gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRVYsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRXBDLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzNELE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMxRCxNQUFNLG1CQUFtQixHQUFHLGtCQUFrQixDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdFLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM1RCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEQsTUFBTSxpQkFBaUIsR0FBRyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUUzRSxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDN0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztjQUNoRSxhQUFhLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7Y0FDL0MsWUFBWSxHQUFHLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQy9ELEVBQUUsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7Y0FDN0QsYUFBYSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO2NBQy9DLFlBQVksR0FBRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUU3RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzNCLE9BQU8sRUFBRSxDQUFDLHNCQUFzQixDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksR0FBRyxtQkFBbUIsRUFBRTtnQkFDekUsRUFBRSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztzQkFDMUYsS0FBSyxHQUFHLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO2dCQUN4RCxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDN0I7WUFFRCxPQUFPLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLEdBQUcsaUJBQWlCLEVBQUU7Z0JBQ3hFLEVBQUUsQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO3NCQUNsRixLQUFLLEdBQUcsaUJBQWlCLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUMzQjtZQUVELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUMzQjtRQUVELElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNULENBQUMsRUFBRSxDQUFDO1NBQ0w7YUFBTSxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUU7WUFDbEIsQ0FBQyxFQUFFLENBQUM7U0FDTDtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGNvbXB1dGVUYXJnZXRMZXZlbChjdXJyZW50TGV2ZWwsIHRhcmdldExldmVsLCBhLCBiKSB7XG4gIHJldHVybiAoYSAqIGN1cnJlbnRMZXZlbCArIGIgKiB0YXJnZXRMZXZlbCkgLyAoYSArIGIpO1xufVxuXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zKSB7XG4gIG5zLmRpc2FibGVMb2coJ2dldFNlcnZlclNlY3VyaXR5TGV2ZWwnKTtcbiAgbnMuZGlzYWJsZUxvZygnZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCcpO1xuICBucy5kaXNhYmxlTG9nKCdnZXRTZXJ2ZXJNb25leUF2YWlsYWJsZScpO1xuICBucy5kaXNhYmxlTG9nKCdnZXRTZXJ2ZXJNYXhNb25leScpO1xuXG4gIGNvbnN0IGRlY2ltYWxQbGFjZXMgPSAzO1xuICBsZXQgYSA9IDEwO1xuICBsZXQgYiA9IDE7XG5cbiAgY29uc3QgdGFyZ2V0SG9zdCA9IG5zLmdldEhvc3RuYW1lKCk7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBjb25zdCBjdXJyZW50TGV2ZWwgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldEhvc3QpO1xuICAgIGNvbnN0IG1pbkxldmVsID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXRIb3N0KTtcbiAgICBjb25zdCB0YXJnZXRTZWN1cml0eUxldmVsID0gY29tcHV0ZVRhcmdldExldmVsKGN1cnJlbnRMZXZlbCwgbWluTGV2ZWwsIGEsIGIpO1xuICAgIGNvbnN0IGN1cnJlbnRNb25leSA9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldEhvc3QpO1xuICAgIGNvbnN0IG1heE1vbmV5ID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0SG9zdCk7XG4gICAgY29uc3QgdGFyZ2V0TW9uZXlBbW91bnQgPSBjb21wdXRlVGFyZ2V0TGV2ZWwoY3VycmVudE1vbmV5LCBtYXhNb25leSwgYSwgYik7XG5cbiAgICBucy5wcmludChgYTogJHthfSwgYjogJHtifWApO1xuICAgIG5zLnByaW50KCdTZWN1cml0eVxcdGN1cnJlbnQ6ICcgKyBjdXJyZW50TGV2ZWwudG9GaXhlZChkZWNpbWFsUGxhY2VzKVxuICAgICAgKyAnLCBtaW5pbXVtOiAnICsgbWluTGV2ZWwudG9GaXhlZChkZWNpbWFsUGxhY2VzKVxuICAgICAgKyAnLCB0YXJnZXQ6ICcgKyB0YXJnZXRTZWN1cml0eUxldmVsLnRvRml4ZWQoZGVjaW1hbFBsYWNlcykpO1xuICAgIG5zLnByaW50KCdNb25leVxcdGN1cnJlbnQ6ICcgKyBjdXJyZW50TW9uZXkudG9GaXhlZChkZWNpbWFsUGxhY2VzKVxuICAgICAgKyAnLCBtYXhpbXVtOiAnICsgbWF4TW9uZXkudG9GaXhlZChkZWNpbWFsUGxhY2VzKVxuICAgICAgKyAnLCB0YXJnZXQ6ICcgKyB0YXJnZXRNb25leUFtb3VudC50b0ZpeGVkKGRlY2ltYWxQbGFjZXMpKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjU7IGkrKykge1xuICAgICAgd2hpbGUgKG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0SG9zdCkgPiAxLjA1ICogdGFyZ2V0U2VjdXJpdHlMZXZlbCkge1xuICAgICAgICBucy5wcmludCgnLS0+IFNlY3VyaXR5IGxldmVsOiAnICsgbnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbCh0YXJnZXRIb3N0KS50b0ZpeGVkKGRlY2ltYWxQbGFjZXMpXG4gICAgICAgICAgKyAnID4gJyArIHRhcmdldFNlY3VyaXR5TGV2ZWwudG9GaXhlZChkZWNpbWFsUGxhY2VzKSk7XG4gICAgICAgIGF3YWl0IG5zLndlYWtlbih0YXJnZXRIb3N0KTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldEhvc3QpIDwgMC45NSAqIHRhcmdldE1vbmV5QW1vdW50KSB7XG4gICAgICAgIG5zLnByaW50KCctLT4gTW9uZXk6ICcgKyBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXRIb3N0KS50b0ZpeGVkKGRlY2ltYWxQbGFjZXMpXG4gICAgICAgICAgKyAnIDwgJyArIHRhcmdldE1vbmV5QW1vdW50LnRvRml4ZWQoZGVjaW1hbFBsYWNlcykpO1xuICAgICAgICBhd2FpdCBucy5ncm93KHRhcmdldEhvc3QpO1xuICAgICAgfVxuXG4gICAgICBhd2FpdCBucy5oYWNrKHRhcmdldEhvc3QpO1xuICAgIH1cblxuICAgIGlmIChhID4gMSkge1xuICAgICAgYS0tO1xuICAgIH0gZWxzZSBpZiAoYiA8IDEwMCkge1xuICAgICAgYisrO1xuICAgIH1cbiAgfVxufVxuIl19