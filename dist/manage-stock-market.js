const HISTORY_SIZE = 2;
function fetchStockList(ns) {
    const stocks = [];
    for (const symbol of ns.stock.getSymbols()) {
        const position = ns.stock.getPosition(symbol);
        const stock = {
            symbol: symbol,
            organization: ns.stock.getOrganization(symbol),
            price: ns.stock.getPrice(symbol),
            ask_price: ns.stock.getAskPrice(symbol),
            bid_price: ns.stock.getBidPrice(symbol),
            gain_unit_long: ns.stock.getSaleGain(symbol, 1, 'Long'),
            gain_unit_short: ns.stock.getSaleGain(symbol, 1, 'Short'),
            shares_owned_long: position[0],
            average_price_long: position[1],
            shares_owned_short: position[2],
            average_price_short: position[3]
        };
        if (ns.stock.hasTIXAPIAccess()) {
            stock['forecast'] = ns.stock.getForecast(symbol);
            stock['volatility'] = ns.stock.getVolatility(symbol);
        }
        stocks.push(stock);
    }
    return stocks;
}
function addToStocksWithHistories(stockHistories, stocks) {
    for (const stock of stocks) {
        const symbol = stock['symbol'];
        const price = stock['price'];
        const subset = stockHistories.filter((stockHistory) => stockHistory.stock.symbol == symbol);
        if (subset.length != 1) {
            throw new Error("Invalid subset length");
        }
        const stockHistoryItem = subset[0];
    }
}
export async function main(ns) {
    ns.disableLog('ALL');
    const stocksWithHistories = new Array();
    for (let i = 0; i < HISTORY_SIZE; i++) {
        const stockList = fetchStockList(ns);
        addToStocksWithHistories(stocksWithHistories, stockList);
        await ns.stock.nextUpdate();
        ns.print(`[warm-up] TICK ${i + 1} of ${HISTORY_SIZE}`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuYWdlLXN0b2NrLW1hcmtldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NjcmlwdHMvbWFuYWdlLXN0b2NrLW1hcmtldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLFlBQVksR0FBRyxDQUFDLENBQUM7QUFzQ3ZCLFNBQVMsY0FBYyxDQUFDLEVBQU07SUFDNUIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBRWxCLEtBQUssTUFBTSxNQUFNLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsRUFBRTtRQUMxQyxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QyxNQUFNLEtBQUssR0FBVTtZQUNuQixNQUFNLEVBQUUsTUFBTTtZQUNkLFlBQVksRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUM7WUFDOUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUNoQyxTQUFTLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO1lBQ3ZDLFNBQVMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUM7WUFDdkMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDO1lBQ3ZELGVBQWUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQztZQUN6RCxpQkFBaUIsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQzlCLGtCQUFrQixFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDL0Isa0JBQWtCLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUMvQixtQkFBbUIsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQ2pDLENBQUE7UUFFRCxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLEVBQUU7WUFDOUIsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2pELEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN0RDtRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDcEI7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQsU0FBUyx3QkFBd0IsQ0FBQyxjQUFtQyxFQUFFLE1BQW9CO0lBQ3pGLEtBQUssTUFBTSxLQUFLLElBQUksTUFBTSxFQUFFO1FBQzFCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMvQixNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFN0IsTUFBTSxNQUFNLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLENBQUM7UUFFNUYsSUFBSSxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7U0FDMUM7UUFFRCxNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNwQztBQUNILENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsTUFBTSxtQkFBbUIsR0FBd0IsSUFBSSxLQUFLLEVBQUUsQ0FBQztJQUU3RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsWUFBWSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JDLE1BQU0sU0FBUyxHQUFHLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNyQyx3QkFBd0IsQ0FBQyxtQkFBbUIsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUV6RCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDNUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxZQUFZLEVBQUUsQ0FBQyxDQUFDO0tBQ3hEO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJztcblxuY29uc3QgSElTVE9SWV9TSVpFID0gMjtcbi8vIGNvbnN0IENPTU1JU1NJT05fRlJFRSA9IDEwMF8wMDA7XG5cbmludGVyZmFjZSBTdG9jayB7XG4gIHN5bWJvbDogc3RyaW5nLFxuICBvcmdhbml6YXRpb246IHN0cmluZyxcbiAgcHJpY2U6IG51bWJlcixcbiAgYXNrX3ByaWNlOiBudW1iZXIsXG4gIGJpZF9wcmljZTogbnVtYmVyLFxuICBnYWluX3VuaXRfbG9uZzogbnVtYmVyLFxuICBnYWluX3VuaXRfc2hvcnQ6IG51bWJlcixcbiAgc2hhcmVzX293bmVkX2xvbmc6IG51bWJlcixcbiAgYXZlcmFnZV9wcmljZV9sb25nOiBudW1iZXIsXG4gIHNoYXJlc19vd25lZF9zaG9ydDogbnVtYmVyLFxuICBhdmVyYWdlX3ByaWNlX3Nob3J0OiBudW1iZXJcblxuICBmb3JlY2FzdD86IG51bWJlcixcbiAgdm9sYXRpbGl0eT86IG51bWJlclxufVxuXG5pbnRlcmZhY2UgSGlzdG9yeUl0ZW0ge1xuICB0aW1lc3RhbXA6IERhdGUsXG4gIHByaWNlOiBudW1iZXJcbn1cblxuaW50ZXJmYWNlIFN0b2NrSGlzdG9yeSB7XG4gIHN0b2NrOiBTdG9jayxcbiAgaGlzdG9yeTogQXJyYXk8SGlzdG9yeUl0ZW0+XG59XG5cbmludGVyZmFjZSBTZWxsQ2FuZGlkYXRlIHtcbiAgc3ltYm9sOiBzdHJpbmdcbn1cblxuaW50ZXJmYWNlIEJ1eUNhbmRpZGF0ZSB7XG4gIHN5bWJvbDogc3RyaW5nXG59XG5cbmZ1bmN0aW9uIGZldGNoU3RvY2tMaXN0KG5zOiBOUyk6IEFycmF5PFN0b2NrPiB7XG4gIGNvbnN0IHN0b2NrcyA9IFtdO1xuXG4gIGZvciAoY29uc3Qgc3ltYm9sIG9mIG5zLnN0b2NrLmdldFN5bWJvbHMoKSkge1xuICAgIGNvbnN0IHBvc2l0aW9uID0gbnMuc3RvY2suZ2V0UG9zaXRpb24oc3ltYm9sKTtcbiAgICBjb25zdCBzdG9jazogU3RvY2sgPSB7XG4gICAgICBzeW1ib2w6IHN5bWJvbCxcbiAgICAgIG9yZ2FuaXphdGlvbjogbnMuc3RvY2suZ2V0T3JnYW5pemF0aW9uKHN5bWJvbCksXG4gICAgICBwcmljZTogbnMuc3RvY2suZ2V0UHJpY2Uoc3ltYm9sKSxcbiAgICAgIGFza19wcmljZTogbnMuc3RvY2suZ2V0QXNrUHJpY2Uoc3ltYm9sKSxcbiAgICAgIGJpZF9wcmljZTogbnMuc3RvY2suZ2V0QmlkUHJpY2Uoc3ltYm9sKSxcbiAgICAgIGdhaW5fdW5pdF9sb25nOiBucy5zdG9jay5nZXRTYWxlR2FpbihzeW1ib2wsIDEsICdMb25nJyksXG4gICAgICBnYWluX3VuaXRfc2hvcnQ6IG5zLnN0b2NrLmdldFNhbGVHYWluKHN5bWJvbCwgMSwgJ1Nob3J0JyksXG4gICAgICBzaGFyZXNfb3duZWRfbG9uZzogcG9zaXRpb25bMF0sXG4gICAgICBhdmVyYWdlX3ByaWNlX2xvbmc6IHBvc2l0aW9uWzFdLFxuICAgICAgc2hhcmVzX293bmVkX3Nob3J0OiBwb3NpdGlvblsyXSxcbiAgICAgIGF2ZXJhZ2VfcHJpY2Vfc2hvcnQ6IHBvc2l0aW9uWzNdXG4gICAgfVxuXG4gICAgaWYgKG5zLnN0b2NrLmhhc1RJWEFQSUFjY2VzcygpKSB7XG4gICAgICBzdG9ja1snZm9yZWNhc3QnXSA9IG5zLnN0b2NrLmdldEZvcmVjYXN0KHN5bWJvbCk7XG4gICAgICBzdG9ja1sndm9sYXRpbGl0eSddID0gbnMuc3RvY2suZ2V0Vm9sYXRpbGl0eShzeW1ib2wpO1xuICAgIH1cblxuICAgIHN0b2Nrcy5wdXNoKHN0b2NrKTtcbiAgfVxuXG4gIHJldHVybiBzdG9ja3M7XG59XG5cbmZ1bmN0aW9uIGFkZFRvU3RvY2tzV2l0aEhpc3RvcmllcyhzdG9ja0hpc3RvcmllczogQXJyYXk8U3RvY2tIaXN0b3J5Piwgc3RvY2tzOiBBcnJheTxTdG9jaz4pIHtcbiAgZm9yIChjb25zdCBzdG9jayBvZiBzdG9ja3MpIHtcbiAgICBjb25zdCBzeW1ib2wgPSBzdG9ja1snc3ltYm9sJ107XG4gICAgY29uc3QgcHJpY2UgPSBzdG9ja1sncHJpY2UnXTtcblxuICAgIGNvbnN0IHN1YnNldCA9IHN0b2NrSGlzdG9yaWVzLmZpbHRlcigoc3RvY2tIaXN0b3J5KSA9PiBzdG9ja0hpc3Rvcnkuc3RvY2suc3ltYm9sID09IHN5bWJvbCk7XG5cbiAgICBpZiAoc3Vic2V0Lmxlbmd0aCAhPSAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHN1YnNldCBsZW5ndGhcIik7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RvY2tIaXN0b3J5SXRlbSA9IHN1YnNldFswXTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgbnMuZGlzYWJsZUxvZygnQUxMJyk7XG4gIGNvbnN0IHN0b2Nrc1dpdGhIaXN0b3JpZXM6IEFycmF5PFN0b2NrSGlzdG9yeT4gPSBuZXcgQXJyYXkoKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IEhJU1RPUllfU0laRTsgaSsrKSB7XG4gICAgY29uc3Qgc3RvY2tMaXN0ID0gZmV0Y2hTdG9ja0xpc3QobnMpO1xuICAgIGFkZFRvU3RvY2tzV2l0aEhpc3RvcmllcyhzdG9ja3NXaXRoSGlzdG9yaWVzLCBzdG9ja0xpc3QpO1xuXG4gICAgYXdhaXQgbnMuc3RvY2submV4dFVwZGF0ZSgpO1xuICAgIG5zLnByaW50KGBbd2FybS11cF0gVElDSyAke2kgKyAxfSBvZiAke0hJU1RPUllfU0laRX1gKTtcbiAgfVxufVxuIl19