import { scanAllNetwork } from "./scan";
function launchScript(ns, scriptName, server) {
    const scpStatus = ns.scp(scriptName, server, 'home');
    if (!scpStatus) {
        ns.print('Failed to copy ' + scriptName + ' on ' + server);
    }
    ns.killall(server);
    const maxRam = ns.getServerMaxRam(server);
    const usedRam = ns.getServerUsedRam(server);
    const availableRam = maxRam - usedRam;
    const scriptRam = ns.getScriptRam(scriptName, server);
    const numThreads = Math.floor(availableRam / scriptRam);
    if (numThreads > 0) {
        if (ns.exec(scriptName, server, numThreads) == 0) {
            ns.print('Error launching script');
        }
    }
}
export async function main(ns) {
    ns.disableLog('ALL');
    const BUYING_DELAY = 250;
    const UPGRADING_DELAY = 5 * 1000;
    const FOLLOWING_BATCH_DELAY = 1000 * 30;
    const HOME_SERVER = 'home';
    let targetRam = 4;
    while (targetRam <= ns.getPurchasedServerMaxRam()) {
        const maxNumberOfServers = ns.getPurchasedServerLimit();
        const availableMoney = ns.getServerMoneyAvailable('home');
        const serverCost = ns.getPurchasedServerCost(targetRam);
        if (availableMoney < maxNumberOfServers * serverCost) {
            targetRam /= 2;
            break;
        }
        targetRam *= 2;
    }
    if (targetRam < 8) {
        targetRam = 8;
    }
    if (targetRam > ns.getPurchasedServerMaxRam()) {
        targetRam = 0.5 * ns.getPurchasedServerMaxRam();
    }
    ns.print(`Starting target ram: ${targetRam}`);
    // Purchase missing servers
    while (true) {
        // List current servers
        const serverList = scanAllNetwork(ns);
        let purchasedServers = serverList.filter(name => name.startsWith('neighbor-'));
        // Stopping criteria
        if (purchasedServers.length == ns.getPurchasedServerLimit()) {
            break;
        }
        // If limit is not reached, buy server at current targetRam
        if (ns.getPurchasedServerCost(targetRam) < ns.getServerMoneyAvailable(HOME_SERVER)) {
            const name = `neighbor-${purchasedServers.length}`;
            ns.print(`Purchasing server ${name}`);
            ns.purchaseServer(name, targetRam);
            launchScript(ns, 'hack-remote.js', name);
            purchasedServers.push(name);
        }
        await ns.sleep(BUYING_DELAY);
    }
    const purchasedServers = scanAllNetwork(ns).filter(name => name.startsWith('neighbor-'));
    targetRam *= 2;
    while (true) {
        // Stopping criteria
        let countServerWithTargetRam = 0;
        for (const purchasedServer of purchasedServers) {
            const purchasedServerRam = ns.getServer(purchasedServer).maxRam;
            if (purchasedServerRam >= targetRam) {
                countServerWithTargetRam++;
            }
        }
        if (countServerWithTargetRam == ns.getPurchasedServerLimit()) {
            if (targetRam >= ns.getPurchasedServerMaxRam()) {
                break;
            }
            targetRam *= 2;
            ns.print(`New RAM target: ${targetRam}`);
            await ns.sleep(FOLLOWING_BATCH_DELAY);
        }
        for (const purchasedServer of purchasedServers) {
            const purchasedServerRam = ns.getServer(purchasedServer).maxRam;
            if (purchasedServerRam < targetRam) {
                const moneyAvailable = ns.getServerMoneyAvailable('home');
                const upgradeCost = ns.getPurchasedServerUpgradeCost(purchasedServer, targetRam);
                if (upgradeCost < moneyAvailable) {
                    if (ns.upgradePurchasedServer(purchasedServer, targetRam)) {
                        ns.print(`Upgraded ${purchasedServer} to ${ns.format.ram(targetRam)} with cost of ${ns.format.number(upgradeCost)}\$`);
                        launchScript(ns, 'hack-remote.js', purchasedServer);
                    }
                    else {
                        ns.print(`Error while upgrading purchased server ${purchasedServer} to ${ns.format.ram(targetRam)}`);
                    }
                }
            }
        }
        await ns.sleep(UPGRADING_DELAY);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5LXNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zY3JpcHRzL2J1eS1zZXJ2ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFeEMsU0FBUyxZQUFZLENBQUMsRUFBTSxFQUFFLFVBQWtCLEVBQUUsTUFBYztJQUM5RCxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDckQsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNkLEVBQUUsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEdBQUcsVUFBVSxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQztLQUM1RDtJQUVELEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFbkIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxQyxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUMsTUFBTSxZQUFZLEdBQUcsTUFBTSxHQUFHLE9BQU8sQ0FBQztJQUN0QyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN0RCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUMsQ0FBQztJQUN4RCxJQUFJLFVBQVUsR0FBRyxDQUFDLEVBQUU7UUFDbEIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2hELEVBQUUsQ0FBQyxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQztTQUNwQztLQUNGO0FBQ0gsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFL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Q0FBMEMsZUFBZSxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztxQkFDdEc7aUJBQ0Y7YUFDRjtTQUNGO1FBRUQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0tBQ2pDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJztcbmltcG9ydCB7IHNjYW5BbGxOZXR3b3JrIH0gZnJvbSBcIi4vc2NhblwiO1xuXG5mdW5jdGlvbiBsYXVuY2hTY3JpcHQobnM6IE5TLCBzY3JpcHROYW1lOiBzdHJpbmcsIHNlcnZlcjogc3RyaW5nKSB7XG4gIGNvbnN0IHNjcFN0YXR1cyA9IG5zLnNjcChzY3JpcHROYW1lLCBzZXJ2ZXIsICdob21lJyk7XG4gIGlmICghc2NwU3RhdHVzKSB7XG4gICAgbnMucHJpbnQoJ0ZhaWxlZCB0byBjb3B5ICcgKyBzY3JpcHROYW1lICsgJyBvbiAnICsgc2VydmVyKTtcbiAgfVxuXG4gIG5zLmtpbGxhbGwoc2VydmVyKTtcblxuICBjb25zdCBtYXhSYW0gPSBucy5nZXRTZXJ2ZXJNYXhSYW0oc2VydmVyKTtcbiAgY29uc3QgdXNlZFJhbSA9IG5zLmdldFNlcnZlclVzZWRSYW0oc2VydmVyKTtcbiAgY29uc3QgYXZhaWxhYmxlUmFtID0gbWF4UmFtIC0gdXNlZFJhbTtcbiAgY29uc3Qgc2NyaXB0UmFtID0gbnMuZ2V0U2NyaXB0UmFtKHNjcmlwdE5hbWUsIHNlcnZlcik7XG4gIGNvbnN0IG51bVRocmVhZHMgPSBNYXRoLmZsb29yKGF2YWlsYWJsZVJhbSAvIHNjcmlwdFJhbSk7XG4gIGlmIChudW1UaHJlYWRzID4gMCkge1xuICAgIGlmIChucy5leGVjKHNjcmlwdE5hbWUsIHNlcnZlciwgbnVtVGhyZWFkcykgPT0gMCkge1xuICAgICAgbnMucHJpbnQoJ0Vycm9yIGxhdW5jaGluZyBzY3JpcHQnKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xuICBjb25zdCBCVVlJTkdfREVMQVkgPSAyNTA7XG4gIGNvbnN0IFVQR1JBRElOR19ERUxBWSA9IDUgKiAxMDAwO1xuICBjb25zdCBGT0xMT1dJTkdfQkFUQ0hfREVMQVkgPSAxMDAwICogMzA7XG4gIGNvbnN0IEhPTUVfU0VSVkVSID0gJ2hvbWUnO1xuXG4gIGxldCB0YXJnZXRSYW0gPSA0O1xuICB3aGlsZSAodGFyZ2V0UmFtIDw9IG5zLmdldFB1cmNoYXNlZFNlcnZlck1heFJhbSgpKSB7XG4gICAgY29uc3QgbWF4TnVtYmVyT2ZTZXJ2ZXJzID0gbnMuZ2V0UHVyY2hhc2VkU2VydmVyTGltaXQoKTtcbiAgICBjb25zdCBhdmFpbGFibGVNb25leSA9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKCdob21lJyk7XG4gICAgY29uc3Qgc2VydmVyQ29zdCA9IG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3QodGFyZ2V0UmFtKTtcblxuICAgIGlmIChhdmFpbGFibGVNb25leSA8IG1heE51bWJlck9mU2VydmVycyAqIHNlcnZlckNvc3QpIHtcbiAgICAgIHRhcmdldFJhbSAvPSAyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgdGFyZ2V0UmFtICo9IDI7XG4gIH1cblxuICBpZiAodGFyZ2V0UmFtIDwgOCkge1xuICAgIHRhcmdldFJhbSA9IDg7XG4gIH1cblxuICBpZiAodGFyZ2V0UmFtID4gbnMuZ2V0UHVyY2hhc2VkU2VydmVyTWF4UmFtKCkpIHtcbiAgICB0YXJnZXRSYW0gPSAwLjUgKiBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJNYXhSYW0oKTtcbiAgfVxuXG4gIG5zLnByaW50KGBTdGFydGluZyB0YXJnZXQgcmFtOiAke3RhcmdldFJhbX1gKTtcblxuICAvLyBQdXJjaGFzZSBtaXNzaW5nIHNlcnZlcnNcbiAgd2hpbGUgKHRydWUpIHtcbiAgICAvLyBMaXN0IGN1cnJlbnQgc2VydmVyc1xuICAgIGNvbnN0IHNlcnZlckxpc3QgPSBzY2FuQWxsTmV0d29yayhucyk7XG4gICAgbGV0IHB1cmNoYXNlZFNlcnZlcnMgPSBzZXJ2ZXJMaXN0LmZpbHRlcihuYW1lID0+IG5hbWUuc3RhcnRzV2l0aCgnbmVpZ2hib3ItJykpO1xuXG4gICAgLy8gU3RvcHBpbmcgY3JpdGVyaWFcbiAgICBpZiAocHVyY2hhc2VkU2VydmVycy5sZW5ndGggPT0gbnMuZ2V0UHVyY2hhc2VkU2VydmVyTGltaXQoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gSWYgbGltaXQgaXMgbm90IHJlYWNoZWQsIGJ1eSBzZXJ2ZXIgYXQgY3VycmVudCB0YXJnZXRSYW1cbiAgICBpZiAobnMuZ2V0UHVyY2hhc2VkU2VydmVyQ29zdCh0YXJnZXRSYW0pIDwgbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoSE9NRV9TRVJWRVIpKSB7XG4gICAgICBjb25zdCBuYW1lID0gYG5laWdoYm9yLSR7cHVyY2hhc2VkU2VydmVycy5sZW5ndGh9YDtcbiAgICAgIG5zLnByaW50KGBQdXJjaGFzaW5nIHNlcnZlciAke25hbWV9YCk7XG4gICAgICBucy5wdXJjaGFzZVNlcnZlcihuYW1lLCB0YXJnZXRSYW0pO1xuICAgICAgbGF1bmNoU2NyaXB0KG5zLCAnaGFjay1yZW1vdGUuanMnLCBuYW1lKTtcblxuICAgICAgcHVyY2hhc2VkU2VydmVycy5wdXNoKG5hbWUpO1xuICAgIH1cblxuICAgIGF3YWl0IG5zLnNsZWVwKEJVWUlOR19ERUxBWSk7XG4gIH1cblxuICBjb25zdCBwdXJjaGFzZWRTZXJ2ZXJzID0gc2NhbkFsbE5ldHdvcmsobnMpLmZpbHRlcihuYW1lID0+IG5hbWUuc3RhcnRzV2l0aCgnbmVpZ2hib3ItJykpO1xuXG4gIHRhcmdldFJhbSAqPSAyO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIC8vIFN0b3BwaW5nIGNyaXRlcmlhXG4gICAgbGV0IGNvdW50U2VydmVyV2l0aFRhcmdldFJhbSA9IDA7XG4gICAgZm9yIChjb25zdCBwdXJjaGFzZWRTZXJ2ZXIgb2YgcHVyY2hhc2VkU2VydmVycykge1xuICAgICAgY29uc3QgcHVyY2hhc2VkU2VydmVyUmFtID0gbnMuZ2V0U2VydmVyKHB1cmNoYXNlZFNlcnZlcikubWF4UmFtO1xuICAgICAgaWYgKHB1cmNoYXNlZFNlcnZlclJhbSA+PSB0YXJnZXRSYW0pIHtcbiAgICAgICAgY291bnRTZXJ2ZXJXaXRoVGFyZ2V0UmFtKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvdW50U2VydmVyV2l0aFRhcmdldFJhbSA9PSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJMaW1pdCgpKSB7XG4gICAgICBpZiAodGFyZ2V0UmFtID49IG5zLmdldFB1cmNoYXNlZFNlcnZlck1heFJhbSgpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRSYW0gKj0gMjtcbiAgICAgIG5zLnByaW50KGBOZXcgUkFNIHRhcmdldDogJHt0YXJnZXRSYW19YCk7XG4gICAgICBhd2FpdCBucy5zbGVlcChGT0xMT1dJTkdfQkFUQ0hfREVMQVkpO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgcHVyY2hhc2VkU2VydmVyIG9mIHB1cmNoYXNlZFNlcnZlcnMpIHtcbiAgICAgIGNvbnN0IHB1cmNoYXNlZFNlcnZlclJhbSA9IG5zLmdldFNlcnZlcihwdXJjaGFzZWRTZXJ2ZXIpLm1heFJhbTtcbiAgICAgIGlmIChwdXJjaGFzZWRTZXJ2ZXJSYW0gPCB0YXJnZXRSYW0pIHtcbiAgICAgICAgY29uc3QgbW9uZXlBdmFpbGFibGUgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSgnaG9tZScpO1xuICAgICAgICBjb25zdCB1cGdyYWRlQ29zdCA9IG5zLmdldFB1cmNoYXNlZFNlcnZlclVwZ3JhZGVDb3N0KHB1cmNoYXNlZFNlcnZlciwgdGFyZ2V0UmFtKTtcbiAgICAgICAgaWYgKHVwZ3JhZGVDb3N0IDwgbW9uZXlBdmFpbGFibGUpIHtcbiAgICAgICAgICBpZiAobnMudXBncmFkZVB1cmNoYXNlZFNlcnZlcihwdXJjaGFzZWRTZXJ2ZXIsIHRhcmdldFJhbSkpIHtcbiAgICAgICAgICAgIG5zLnByaW50KGBVcGdyYWRlZCAke3B1cmNoYXNlZFNlcnZlcn0gdG8gJHtucy5mb3JtYXQucmFtKHRhcmdldFJhbSl9IHdpdGggY29zdCBvZiAke25zLmZvcm1hdC5udW1iZXIodXBncmFkZUNvc3QpfVxcJGApO1xuICAgICAgICAgICAgbGF1bmNoU2NyaXB0KG5zLCAnaGFjay1yZW1vdGUuanMnLCBwdXJjaGFzZWRTZXJ2ZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBucy5wcmludChgRXJyb3Igd2hpbGUgdXBncmFkaW5nIHB1cmNoYXNlZCBzZXJ2ZXIgJHtwdXJjaGFzZWRTZXJ2ZXJ9IHRvICR7bnMuZm9ybWF0LnJhbSh0YXJnZXRSYW0pfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGF3YWl0IG5zLnNsZWVwKFVQR1JBRElOR19ERUxBWSk7XG4gIH1cbn1cbiJdfQ==