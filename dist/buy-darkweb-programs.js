export async function main(ns) {
    ns.disableLog('ALL');
    const SLEEP_DELAY = 15000; // in milliseconds
    const HOME_SERVER = 'home';
    const TOR_ROUTER_PRICE = 200000;
    if (!ns.hasTorRouter()) {
        ns.print('TOR router not purchased yet');
    }
    while (!ns.hasTorRouter()) {
        const moneyAvailable = ns.getServerMoneyAvailable(HOME_SERVER);
        if (TOR_ROUTER_PRICE <= moneyAvailable) {
            if (ns.singularity.purchaseTor()) {
                ns.print('TOR router purchased');
            }
        }
        await ns.sleep(SLEEP_DELAY);
    }
    while (true) {
        const allHackingPrograms = ns.singularity.getDarkwebPrograms();
        const purchasedHackingPrograms = allHackingPrograms.filter((program) => ns.fileExists(program));
        const hackingProgramsToPurchase = allHackingPrograms.filter((program) => !ns.fileExists(program));
        if (purchasedHackingPrograms.length == allHackingPrograms.length) {
            break;
        }
        for (const program of hackingProgramsToPurchase) {
            const programCost = ns.singularity.getDarkwebProgramCost(program);
            const moneyAvailable = ns.getServerMoneyAvailable(HOME_SERVER);
            if (programCost <= moneyAvailable) {
                if (ns.singularity.purchaseProgram(program)) {
                    ns.print(`Purchased ${program}`);
                }
            }
        }
        await ns.sleep(SLEEP_DELAY);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5LWRhcmt3ZWItcHJvZ3JhbXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zY3JpcHRzL2J1eS1kYXJrd2ViLXByb2dyYW1zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsQ0FBRSxrQkFBa0I7SUFDOUMsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDO0lBQzNCLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDO0lBRWhDLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLEVBQUU7UUFDdEIsRUFBRSxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0tBQzFDO0lBRUQsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsRUFBRTtRQUN6QixNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFL0QsSUFBSSxnQkFBZ0IsSUFBSSxjQUFjLEVBQUU7WUFDdEMsSUFBSSxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxFQUFFO2dCQUNoQyxFQUFFLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7YUFDbEM7U0FDRjtRQUVELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUM3QjtJQUVELE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDL0QsTUFBTSx3QkFBd0IsR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNoRyxNQUFNLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFbEcsSUFBSSx3QkFBd0IsQ0FBQyxNQUFNLElBQUksa0JBQWtCLENBQUMsTUFBTSxFQUFFO1lBQ2hFLE1BQU07U0FDUDtRQUVELEtBQUssTUFBTSxPQUFPLElBQUkseUJBQXlCLEVBQUU7WUFDL0MsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNsRSxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsV0FBVyxDQUFDLENBQUM7WUFFL0QsSUFBSSxXQUFXLElBQUksY0FBYyxFQUFFO2dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxFQUFFO29CQUMzQyxFQUFFLENBQUMsS0FBSyxDQUFDLGFBQWEsT0FBTyxFQUFFLENBQUMsQ0FBQztpQkFDbEM7YUFDRjtTQUNGO1FBRUQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQzdCO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSAnQG5zJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xuICBjb25zdCBTTEVFUF9ERUxBWSA9IDE1MDAwOyAgLy8gaW4gbWlsbGlzZWNvbmRzXG4gIGNvbnN0IEhPTUVfU0VSVkVSID0gJ2hvbWUnO1xuICBjb25zdCBUT1JfUk9VVEVSX1BSSUNFID0gMjAwMDAwO1xuXG4gIGlmICghbnMuaGFzVG9yUm91dGVyKCkpIHtcbiAgICBucy5wcmludCgnVE9SIHJvdXRlciBub3QgcHVyY2hhc2VkIHlldCcpO1xuICB9XG5cbiAgd2hpbGUgKCFucy5oYXNUb3JSb3V0ZXIoKSkge1xuICAgIGNvbnN0IG1vbmV5QXZhaWxhYmxlID0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoSE9NRV9TRVJWRVIpO1xuXG4gICAgaWYgKFRPUl9ST1VURVJfUFJJQ0UgPD0gbW9uZXlBdmFpbGFibGUpIHtcbiAgICAgIGlmIChucy5zaW5ndWxhcml0eS5wdXJjaGFzZVRvcigpKSB7XG4gICAgICAgIG5zLnByaW50KCdUT1Igcm91dGVyIHB1cmNoYXNlZCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGF3YWl0IG5zLnNsZWVwKFNMRUVQX0RFTEFZKTtcbiAgfVxuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgY29uc3QgYWxsSGFja2luZ1Byb2dyYW1zID0gbnMuc2luZ3VsYXJpdHkuZ2V0RGFya3dlYlByb2dyYW1zKCk7XG4gICAgY29uc3QgcHVyY2hhc2VkSGFja2luZ1Byb2dyYW1zID0gYWxsSGFja2luZ1Byb2dyYW1zLmZpbHRlcigocHJvZ3JhbSkgPT4gbnMuZmlsZUV4aXN0cyhwcm9ncmFtKSk7XG4gICAgY29uc3QgaGFja2luZ1Byb2dyYW1zVG9QdXJjaGFzZSA9IGFsbEhhY2tpbmdQcm9ncmFtcy5maWx0ZXIoKHByb2dyYW0pID0+ICFucy5maWxlRXhpc3RzKHByb2dyYW0pKTtcblxuICAgIGlmIChwdXJjaGFzZWRIYWNraW5nUHJvZ3JhbXMubGVuZ3RoID09IGFsbEhhY2tpbmdQcm9ncmFtcy5sZW5ndGgpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgcHJvZ3JhbSBvZiBoYWNraW5nUHJvZ3JhbXNUb1B1cmNoYXNlKSB7XG4gICAgICBjb25zdCBwcm9ncmFtQ29zdCA9IG5zLnNpbmd1bGFyaXR5LmdldERhcmt3ZWJQcm9ncmFtQ29zdChwcm9ncmFtKTtcbiAgICAgIGNvbnN0IG1vbmV5QXZhaWxhYmxlID0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoSE9NRV9TRVJWRVIpO1xuXG4gICAgICBpZiAocHJvZ3JhbUNvc3QgPD0gbW9uZXlBdmFpbGFibGUpIHtcbiAgICAgICAgaWYgKG5zLnNpbmd1bGFyaXR5LnB1cmNoYXNlUHJvZ3JhbShwcm9ncmFtKSkge1xuICAgICAgICAgIG5zLnByaW50KGBQdXJjaGFzZWQgJHtwcm9ncmFtfWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgYXdhaXQgbnMuc2xlZXAoU0xFRVBfREVMQVkpO1xuICB9XG59XG4iXX0=