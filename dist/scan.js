/** @param {NS} ns */
export function scanAllNetwork(ns) {
    let serversToScan = ['home'];
    let serverList = [];
    while (serversToScan.length > 0) {
        const server = serversToScan.pop();
        const neighbors = ns.scan(server);
        for (const neighbor of neighbors) {
            if (neighbor != 'home' && !serverList.includes(neighbor)) {
                serversToScan.push(neighbor);
                serverList.push(neighbor);
            }
        }
    }
    return serverList;
}
/** @param {NS} ns */
export async function buildPath(ns, server) {
    let pathList = [['home']];
    while (true) {
        const currentPath = pathList.pop();
        const lastItem = currentPath.pop();
        const neighbors = ns.scan(lastItem);
        const neighborsWithoutServers = neighbors.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-') && !currentPath.includes(name));
        for (let neighbor of neighborsWithoutServers) {
            let newPath = currentPath.slice();
            newPath.push(lastItem);
            newPath.push(neighbor);
            if (neighbor == server) {
                return newPath;
            }
            pathList.unshift(newPath);
        }
        await ns.sleep(250); // Just so that the editor does not complain...
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nhbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NjcmlwdHMvc2Nhbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxxQkFBcUI7QUFDckIsTUFBTSxVQUFVLGNBQWMsQ0FBQyxFQUFFO0lBQy9CLElBQUksYUFBYSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0IsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO0lBRXBCLE9BQU8sYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDL0IsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ25DLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFbEMsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7WUFDaEMsSUFBSSxRQUFRLElBQUksTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDeEQsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDN0IsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUMzQjtTQUNGO0tBQ0Y7SUFFRCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDO0FBRUQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsU0FBUyxDQUFDLEVBQUUsRUFBRSxNQUFNO0lBQ3hDLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBRTFCLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ25DLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNuQyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sdUJBQXVCLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFdkosS0FBSyxJQUFJLFFBQVEsSUFBSSx1QkFBdUIsRUFBRTtZQUM1QyxJQUFJLE9BQU8sR0FBRyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDbEMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN2QixPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRXZCLElBQUksUUFBUSxJQUFJLE1BQU0sRUFBRTtnQkFDdEIsT0FBTyxPQUFPLENBQUM7YUFDaEI7WUFFRCxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzNCO1FBRUQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUUsK0NBQStDO0tBQ3RFO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYW5BbGxOZXR3b3JrKG5zKSB7XG4gIGxldCBzZXJ2ZXJzVG9TY2FuID0gWydob21lJ107XG4gIGxldCBzZXJ2ZXJMaXN0ID0gW107XG5cbiAgd2hpbGUgKHNlcnZlcnNUb1NjYW4ubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IHNlcnZlciA9IHNlcnZlcnNUb1NjYW4ucG9wKCk7XG4gICAgY29uc3QgbmVpZ2hib3JzID0gbnMuc2NhbihzZXJ2ZXIpO1xuXG4gICAgZm9yIChjb25zdCBuZWlnaGJvciBvZiBuZWlnaGJvcnMpIHtcbiAgICAgIGlmIChuZWlnaGJvciAhPSAnaG9tZScgJiYgIXNlcnZlckxpc3QuaW5jbHVkZXMobmVpZ2hib3IpKSB7XG4gICAgICAgIHNlcnZlcnNUb1NjYW4ucHVzaChuZWlnaGJvcik7XG4gICAgICAgIHNlcnZlckxpc3QucHVzaChuZWlnaGJvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNlcnZlckxpc3Q7XG59XG5cbi8qKiBAcGFyYW0ge05TfSBucyAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJ1aWxkUGF0aChucywgc2VydmVyKSB7XG4gIGxldCBwYXRoTGlzdCA9IFtbJ2hvbWUnXV07XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBjb25zdCBjdXJyZW50UGF0aCA9IHBhdGhMaXN0LnBvcCgpO1xuICAgIGNvbnN0IGxhc3RJdGVtID0gY3VycmVudFBhdGgucG9wKCk7XG4gICAgY29uc3QgbmVpZ2hib3JzID0gbnMuc2NhbihsYXN0SXRlbSk7XG4gICAgY29uc3QgbmVpZ2hib3JzV2l0aG91dFNlcnZlcnMgPSBuZWlnaGJvcnMuZmlsdGVyKG5hbWUgPT4gIW5hbWUuc3RhcnRzV2l0aCgnbmVpZ2hib3ItJykgJiYgIW5hbWUuc3RhcnRzV2l0aCgnaGFja25ldC0nKSAmJiAhY3VycmVudFBhdGguaW5jbHVkZXMobmFtZSkpO1xuXG4gICAgZm9yIChsZXQgbmVpZ2hib3Igb2YgbmVpZ2hib3JzV2l0aG91dFNlcnZlcnMpIHtcbiAgICAgIGxldCBuZXdQYXRoID0gY3VycmVudFBhdGguc2xpY2UoKTtcbiAgICAgIG5ld1BhdGgucHVzaChsYXN0SXRlbSk7XG4gICAgICBuZXdQYXRoLnB1c2gobmVpZ2hib3IpO1xuXG4gICAgICBpZiAobmVpZ2hib3IgPT0gc2VydmVyKSB7XG4gICAgICAgIHJldHVybiBuZXdQYXRoO1xuICAgICAgfVxuXG4gICAgICBwYXRoTGlzdC51bnNoaWZ0KG5ld1BhdGgpO1xuICAgIH1cblxuICAgIGF3YWl0IG5zLnNsZWVwKDI1MCk7ICAvLyBKdXN0IHNvIHRoYXQgdGhlIGVkaXRvciBkb2VzIG5vdCBjb21wbGFpbi4uLlxuICB9XG59XG4iXX0=