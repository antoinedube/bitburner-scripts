export function scanAllNetwork(ns) {
    let serversToScan = ['home'];
    let serverList = [];
    while (serversToScan.length > 0) {
        const server = serversToScan.pop();
        const neighbors = ns.scan(server);
        for (const neighbor of neighbors) {
            if (neighbor != 'home' && !serverList.includes(neighbor)) {
                serversToScan.push(neighbor);
                serverList.push(neighbor);
            }
        }
    }
    return serverList;
}
export async function buildPath(ns, server) {
    let pathList = [['home']];
    while (true) {
        const currentPath = pathList.pop();
        const lastItem = currentPath.pop();
        const neighbors = ns.scan(lastItem);
        const neighborsWithoutServers = neighbors.filter(name => {
            !name.startsWith('neighbor-')
                && !name.startsWith('hacknet-')
                && !currentPath.includes(name);
        });
        for (let neighbor of neighborsWithoutServers) {
            let newPath = currentPath.slice();
            newPath.push(lastItem);
            newPath.push(neighbor);
            if (neighbor == server) {
                return newPath;
            }
            pathList.unshift(newPath);
        }
        await ns.sleep(250); // Just so that the editor does not complain...
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nhbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NjcmlwdHMvc2Nhbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLFVBQVUsY0FBYyxDQUFDLEVBQU07SUFDbkMsSUFBSSxhQUFhLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3QixJQUFJLFVBQVUsR0FBYSxFQUFFLENBQUM7SUFFOUIsT0FBTyxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUMvQixNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbkMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVsQyxLQUFLLE1BQU0sUUFBUSxJQUFJLFNBQVMsRUFBRTtZQUNoQyxJQUFJLFFBQVEsSUFBSSxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUN4RCxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUM3QixVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQzNCO1NBQ0Y7S0FDRjtJQUVELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLFNBQVMsQ0FBQyxFQUFNLEVBQUUsTUFBYztJQUNwRCxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUUxQixPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNuQyxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbkMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVwQyxNQUFNLHVCQUF1QixHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdEQsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQzttQkFDeEIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQzttQkFDNUIsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO1FBRUgsS0FBSyxJQUFJLFFBQVEsSUFBSSx1QkFBdUIsRUFBRTtZQUM1QyxJQUFJLE9BQU8sR0FBRyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDbEMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN2QixPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRXZCLElBQUksUUFBUSxJQUFJLE1BQU0sRUFBRTtnQkFDdEIsT0FBTyxPQUFPLENBQUM7YUFDaEI7WUFFRCxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzNCO1FBRUQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUUsK0NBQStDO0tBQ3RFO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gc2NhbkFsbE5ldHdvcmsobnM6IE5TKTogc3RyaW5nW10ge1xuICBsZXQgc2VydmVyc1RvU2NhbiA9IFsnaG9tZSddO1xuICBsZXQgc2VydmVyTGlzdDogc3RyaW5nW10gPSBbXTtcblxuICB3aGlsZSAoc2VydmVyc1RvU2Nhbi5sZW5ndGggPiAwKSB7XG4gICAgY29uc3Qgc2VydmVyID0gc2VydmVyc1RvU2Nhbi5wb3AoKTtcbiAgICBjb25zdCBuZWlnaGJvcnMgPSBucy5zY2FuKHNlcnZlcik7XG5cbiAgICBmb3IgKGNvbnN0IG5laWdoYm9yIG9mIG5laWdoYm9ycykge1xuICAgICAgaWYgKG5laWdoYm9yICE9ICdob21lJyAmJiAhc2VydmVyTGlzdC5pbmNsdWRlcyhuZWlnaGJvcikpIHtcbiAgICAgICAgc2VydmVyc1RvU2Nhbi5wdXNoKG5laWdoYm9yKTtcbiAgICAgICAgc2VydmVyTGlzdC5wdXNoKG5laWdoYm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2VydmVyTGlzdDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJ1aWxkUGF0aChuczogTlMsIHNlcnZlcjogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICBsZXQgcGF0aExpc3QgPSBbWydob21lJ11dO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgY29uc3QgY3VycmVudFBhdGggPSBwYXRoTGlzdC5wb3AoKTtcbiAgICBjb25zdCBsYXN0SXRlbSA9IGN1cnJlbnRQYXRoLnBvcCgpO1xuICAgIGNvbnN0IG5laWdoYm9ycyA9IG5zLnNjYW4obGFzdEl0ZW0pO1xuXG4gICAgY29uc3QgbmVpZ2hib3JzV2l0aG91dFNlcnZlcnMgPSBuZWlnaGJvcnMuZmlsdGVyKG5hbWUgPT4ge1xuICAgICAgIW5hbWUuc3RhcnRzV2l0aCgnbmVpZ2hib3ItJylcbiAgICAgICAgJiYgIW5hbWUuc3RhcnRzV2l0aCgnaGFja25ldC0nKVxuICAgICAgICAmJiAhY3VycmVudFBhdGguaW5jbHVkZXMobmFtZSlcbiAgICB9KTtcblxuICAgIGZvciAobGV0IG5laWdoYm9yIG9mIG5laWdoYm9yc1dpdGhvdXRTZXJ2ZXJzKSB7XG4gICAgICBsZXQgbmV3UGF0aCA9IGN1cnJlbnRQYXRoLnNsaWNlKCk7XG4gICAgICBuZXdQYXRoLnB1c2gobGFzdEl0ZW0pO1xuICAgICAgbmV3UGF0aC5wdXNoKG5laWdoYm9yKTtcblxuICAgICAgaWYgKG5laWdoYm9yID09IHNlcnZlcikge1xuICAgICAgICByZXR1cm4gbmV3UGF0aDtcbiAgICAgIH1cblxuICAgICAgcGF0aExpc3QudW5zaGlmdChuZXdQYXRoKTtcbiAgICB9XG5cbiAgICBhd2FpdCBucy5zbGVlcCgyNTApOyAgLy8gSnVzdCBzbyB0aGF0IHRoZSBlZGl0b3IgZG9lcyBub3QgY29tcGxhaW4uLi5cbiAgfVxufVxuIl19