/** @param {NS} ns */
export async function main(ns) {
    ns.disableLog('getHackingLevel');
    ns.disableLog('fileExists');
    ns.disableLog('sleep');
    const programsRequiredLevel = [
        { "name": "BruteSSH.exe", "requiredLevel": 50 },
        { "name": "FTPCrack.exe", "requiredLevel": 100 },
        { "name": "relaySMTP.exe", "requiredLevel": 250 },
        { "name": "HTTPWorm.exe", "requiredLevel": 500 },
        { "name": "SQLInject.exe", "requiredLevel": 750 },
        // { "name": "DeepscanV1.exe", "requiredLevel": 75 },
        // { "name": "DeepscanV2.exe", "requiredLevel": 400 },
        // { "name": "ServerProfiler.exe", "requiredLevel": 75 },
        // { "name": "AutoLink.exe", "requiredLevel": 25 }
    ];
    while (!ns.fileExists("SQLInject.exe", "home")) { // SQLInject is the most "expensive", so the last to be built
        for (let program of programsRequiredLevel) {
            const playerLevel = ns.getHackingLevel();
            const requiredLevel = program.requiredLevel;
            if (ns.fileExists(program.name, "home")) {
                ns.print(`${program.name} already exists. Skipping`);
                continue;
            }
            ns.print(`[${program.name}] -> Player level: ${playerLevel}, required level: ${requiredLevel}`);
            if (playerLevel >= requiredLevel) {
                ns.singularity.createProgram(program.name, true);
                while (!ns.fileExists(program.name, "home")) {
                    await ns.sleep(1000 * 60 * 2);
                }
            }
        }
        // If money available > cost of SQLInject.exe, break
        // OR: buy tor router and buy missing programs
        await ns.sleep(1000 * 30);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQtaGFja2luZy1wcm9ncmFtcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NjcmlwdHMvYnVpbGQtaGFja2luZy1wcm9ncmFtcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixFQUFFLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDakMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXZCLE1BQU0scUJBQXFCLEdBQUc7UUFDMUIsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxFQUFFLEVBQUU7UUFDL0MsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxHQUFHLEVBQUU7UUFDaEQsRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxHQUFHLEVBQUU7UUFDakQsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxHQUFHLEVBQUU7UUFDaEQsRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxHQUFHLEVBQUU7UUFDakQscURBQXFEO1FBQ3JELHNEQUFzRDtRQUN0RCx5REFBeUQ7UUFDekQsa0RBQWtEO0tBQ3JELENBQUM7SUFFRixPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRyw2REFBNkQ7UUFDNUcsS0FBSyxJQUFJLE9BQU8sSUFBSSxxQkFBcUIsRUFBRTtZQUN2QyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDekMsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztZQUU1QyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsRUFBRTtnQkFDckMsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLDJCQUEyQixDQUFDLENBQUM7Z0JBQ3JELFNBQVM7YUFDWjtZQUVELEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxPQUFPLENBQUMsSUFBSSxzQkFBc0IsV0FBVyxxQkFBcUIsYUFBYSxFQUFFLENBQUMsQ0FBQztZQUVoRyxJQUFJLFdBQVcsSUFBRSxhQUFhLEVBQUU7Z0JBQzVCLEVBQUUsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBRWpELE9BQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEVBQUU7b0JBQ3pDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUM3QjthQUNKO1NBQ0o7UUFFRCxvREFBb0Q7UUFDcEQsOENBQThDO1FBRTlDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUMsRUFBRSxDQUFDLENBQUM7S0FDM0I7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBwYXJhbSB7TlN9IG5zICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xuICAgIG5zLmRpc2FibGVMb2coJ2dldEhhY2tpbmdMZXZlbCcpO1xuICAgIG5zLmRpc2FibGVMb2coJ2ZpbGVFeGlzdHMnKTtcbiAgICBucy5kaXNhYmxlTG9nKCdzbGVlcCcpO1xuXG4gICAgY29uc3QgcHJvZ3JhbXNSZXF1aXJlZExldmVsID0gW1xuICAgICAgICB7IFwibmFtZVwiOiBcIkJydXRlU1NILmV4ZVwiLCBcInJlcXVpcmVkTGV2ZWxcIjogNTAgfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJGVFBDcmFjay5leGVcIiwgXCJyZXF1aXJlZExldmVsXCI6IDEwMCB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcInJlbGF5U01UUC5leGVcIiwgXCJyZXF1aXJlZExldmVsXCI6IDI1MCB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIkhUVFBXb3JtLmV4ZVwiLCBcInJlcXVpcmVkTGV2ZWxcIjogNTAwIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiU1FMSW5qZWN0LmV4ZVwiLCBcInJlcXVpcmVkTGV2ZWxcIjogNzUwIH0sXG4gICAgICAgIC8vIHsgXCJuYW1lXCI6IFwiRGVlcHNjYW5WMS5leGVcIiwgXCJyZXF1aXJlZExldmVsXCI6IDc1IH0sXG4gICAgICAgIC8vIHsgXCJuYW1lXCI6IFwiRGVlcHNjYW5WMi5leGVcIiwgXCJyZXF1aXJlZExldmVsXCI6IDQwMCB9LFxuICAgICAgICAvLyB7IFwibmFtZVwiOiBcIlNlcnZlclByb2ZpbGVyLmV4ZVwiLCBcInJlcXVpcmVkTGV2ZWxcIjogNzUgfSxcbiAgICAgICAgLy8geyBcIm5hbWVcIjogXCJBdXRvTGluay5leGVcIiwgXCJyZXF1aXJlZExldmVsXCI6IDI1IH1cbiAgICBdO1xuXG4gICAgd2hpbGUgKCFucy5maWxlRXhpc3RzKFwiU1FMSW5qZWN0LmV4ZVwiLCBcImhvbWVcIikpIHsgIC8vIFNRTEluamVjdCBpcyB0aGUgbW9zdCBcImV4cGVuc2l2ZVwiLCBzbyB0aGUgbGFzdCB0byBiZSBidWlsdFxuICAgICAgICBmb3IgKGxldCBwcm9ncmFtIG9mIHByb2dyYW1zUmVxdWlyZWRMZXZlbCkge1xuICAgICAgICAgICAgY29uc3QgcGxheWVyTGV2ZWwgPSBucy5nZXRIYWNraW5nTGV2ZWwoKTtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVpcmVkTGV2ZWwgPSBwcm9ncmFtLnJlcXVpcmVkTGV2ZWw7XG5cbiAgICAgICAgICAgIGlmIChucy5maWxlRXhpc3RzKHByb2dyYW0ubmFtZSwgXCJob21lXCIpKSB7XG4gICAgICAgICAgICAgICAgbnMucHJpbnQoYCR7cHJvZ3JhbS5uYW1lfSBhbHJlYWR5IGV4aXN0cy4gU2tpcHBpbmdgKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbnMucHJpbnQoYFske3Byb2dyYW0ubmFtZX1dIC0+IFBsYXllciBsZXZlbDogJHtwbGF5ZXJMZXZlbH0sIHJlcXVpcmVkIGxldmVsOiAke3JlcXVpcmVkTGV2ZWx9YCk7XG5cbiAgICAgICAgICAgIGlmIChwbGF5ZXJMZXZlbD49cmVxdWlyZWRMZXZlbCkge1xuICAgICAgICAgICAgICAgIG5zLnNpbmd1bGFyaXR5LmNyZWF0ZVByb2dyYW0ocHJvZ3JhbS5uYW1lLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgIHdoaWxlICghbnMuZmlsZUV4aXN0cyhwcm9ncmFtLm5hbWUsIFwiaG9tZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBucy5zbGVlcCgxMDAwKjYwKjIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIG1vbmV5IGF2YWlsYWJsZSA+IGNvc3Qgb2YgU1FMSW5qZWN0LmV4ZSwgYnJlYWtcbiAgICAgICAgLy8gT1I6IGJ1eSB0b3Igcm91dGVyIGFuZCBidXkgbWlzc2luZyBwcm9ncmFtc1xuXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKDEwMDAqMzApO1xuICAgIH1cbn1cbiJdfQ==