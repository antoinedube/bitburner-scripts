function buildServerList(ns) {
    let serversToScan = ['home'];
    let serverList = [];
    while (serversToScan.length > 0) {
        const server = serversToScan.pop();
        const neighbors = ns.scan(server);
        for (const neighbor of neighbors) {
            if (neighbor != 'home' && !serverList.includes(neighbor)) {
                serversToScan.push(neighbor);
                serverList.push(neighbor);
            }
        }
    }
    return serverList;
}
function isAccessible(ns, server) {
    return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();
}
function hasMoney(ns, server) {
    const currentMoney = ns.getServerMoneyAvailable(server);
    const maxMoney = ns.getServerMaxMoney(server);
    const target = 0.90 * maxMoney;
    ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);
    return currentMoney > target;
}
function hasSecurityLevel(ns, server) {
    const currentLevel = ns.getServerSecurityLevel(server);
    const minLevel = ns.getServerMinSecurityLevel(server);
    const target = 1.10 * minLevel;
    ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);
    return currentLevel < target;
}
export async function main(ns) {
    ns.disableLog('ALL');
    ns.enableLog('grow');
    ns.enableLog('hack');
    ns.enableLog('weaken');
    const runningScript = ns.getRunningScript();
    const numThreads = runningScript.threads;
    while (true) {
        await ns.sleep(500);
        const fullServerList = buildServerList(ns);
        const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));
        const serverIndex = Math.floor(Math.random() * filteredServerList.length);
        const server = filteredServerList[serverIndex];
        if (!isAccessible(ns, server)) {
            continue;
        }
        if (!hasSecurityLevel(ns, server)) {
            await ns.weaken(server, { threads: numThreads });
            ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);
            continue;
        }
        if (!hasMoney(ns, server)) {
            await ns.grow(server, { threads: numThreads });
            ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);
            continue;
        }
        ns.print(`[${server}] Hacking`);
        await ns.hack(server, { threads: numThreads });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay1yZW1vdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zY3JpcHRzL2hhY2stcmVtb3RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLFNBQVMsZUFBZSxDQUFDLEVBQU07SUFDN0IsSUFBSSxhQUFhLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3QixJQUFJLFVBQVUsR0FBYSxFQUFFLENBQUM7SUFFOUIsT0FBTyxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUMvQixNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbkMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVsQyxLQUFLLE1BQU0sUUFBUSxJQUFJLFNBQVMsRUFBRTtZQUNoQyxJQUFJLFFBQVEsSUFBSSxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUN4RCxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUM3QixVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQzNCO1NBQ0Y7S0FDRjtJQUVELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxFQUFNLEVBQUUsTUFBYztJQUMxQyxPQUFPLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUN0RyxDQUFDO0FBRUQsU0FBUyxRQUFRLENBQUMsRUFBTSxFQUFFLE1BQWM7SUFDdEMsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hELE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJ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Q0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3hGLFNBQVM7U0FDVjtRQUVELEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxNQUFNLFdBQVcsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztLQUNoRDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcblxuZnVuY3Rpb24gYnVpbGRTZXJ2ZXJMaXN0KG5zOiBOUyk6IHN0cmluZ1tdIHtcbiAgbGV0IHNlcnZlcnNUb1NjYW4gPSBbJ2hvbWUnXTtcbiAgbGV0IHNlcnZlckxpc3Q6IHN0cmluZ1tdID0gW107XG5cbiAgd2hpbGUgKHNlcnZlcnNUb1NjYW4ubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IHNlcnZlciA9IHNlcnZlcnNUb1NjYW4ucG9wKCk7XG4gICAgY29uc3QgbmVpZ2hib3JzID0gbnMuc2NhbihzZXJ2ZXIpO1xuXG4gICAgZm9yIChjb25zdCBuZWlnaGJvciBvZiBuZWlnaGJvcnMpIHtcbiAgICAgIGlmIChuZWlnaGJvciAhPSAnaG9tZScgJiYgIXNlcnZlckxpc3QuaW5jbHVkZXMobmVpZ2hib3IpKSB7XG4gICAgICAgIHNlcnZlcnNUb1NjYW4ucHVzaChuZWlnaGJvcik7XG4gICAgICAgIHNlcnZlckxpc3QucHVzaChuZWlnaGJvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNlcnZlckxpc3Q7XG59XG5cbmZ1bmN0aW9uIGlzQWNjZXNzaWJsZShuczogTlMsIHNlcnZlcjogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBucy5oYXNSb290QWNjZXNzKHNlcnZlcikgJiYgbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwoc2VydmVyKSA8PSBucy5nZXRIYWNraW5nTGV2ZWwoKTtcbn1cblxuZnVuY3Rpb24gaGFzTW9uZXkobnM6IE5TLCBzZXJ2ZXI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBjb25zdCBjdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShzZXJ2ZXIpO1xuICBjb25zdCBtYXhNb25leSA9IG5zLmdldFNlcnZlck1heE1vbmV5KHNlcnZlcik7XG4gIGNvbnN0IHRhcmdldCA9IDAuOTAgKiBtYXhNb25leTtcblxuICBucy5wcmludChgWyR7c2VydmVyfV0gTW9uZXkgLT4gY3VycmVudDogJHtjdXJyZW50TW9uZXkudG9GaXhlZCgyKX0sIHRhcmdldDogJHt0YXJnZXQudG9GaXhlZCgyKX1gKTtcbiAgcmV0dXJuIGN1cnJlbnRNb25leSA+IHRhcmdldDtcbn1cblxuZnVuY3Rpb24gaGFzU2VjdXJpdHlMZXZlbChuczogTlMsIHNlcnZlcjogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGNvbnN0IGN1cnJlbnRMZXZlbCA9IG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwoc2VydmVyKTtcbiAgY29uc3QgbWluTGV2ZWwgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHNlcnZlcik7XG4gIGNvbnN0IHRhcmdldCA9IDEuMTAgKiBtaW5MZXZlbDtcblxuICBucy5wcmludChgWyR7c2VydmVyfV0gU2VjdXJpdHkgbGV2ZWwgLT4gY3VycmVudDogJHtjdXJyZW50TGV2ZWwudG9GaXhlZCgyKX0sIHRhcmdldDogJHt0YXJnZXQudG9GaXhlZCgyKX1gKTtcbiAgcmV0dXJuIGN1cnJlbnRMZXZlbCA8IHRhcmdldDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XG4gIG5zLmRpc2FibGVMb2coJ0FMTCcpO1xuICBucy5lbmFibGVMb2coJ2dyb3cnKTtcbiAgbnMuZW5hYmxlTG9nKCdoYWNrJyk7XG4gIG5zLmVuYWJsZUxvZygnd2Vha2VuJyk7XG5cbiAgY29uc3QgcnVubmluZ1NjcmlwdCA9IG5zLmdldFJ1bm5pbmdTY3JpcHQoKTtcbiAgY29uc3QgbnVtVGhyZWFkcyA9IHJ1bm5pbmdTY3JpcHQhLnRocmVhZHM7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBhd2FpdCBucy5zbGVlcCg1MDApO1xuXG4gICAgY29uc3QgZnVsbFNlcnZlckxpc3QgPSBidWlsZFNlcnZlckxpc3QobnMpO1xuICAgIGNvbnN0IGZpbHRlcmVkU2VydmVyTGlzdCA9IGZ1bGxTZXJ2ZXJMaXN0LmZpbHRlcihuYW1lID0+ICFuYW1lLnN0YXJ0c1dpdGgoJ25laWdoYm9yLScpICYmICFuYW1lLnN0YXJ0c1dpdGgoJ2hhY2tuZXQtJykpO1xuXG4gICAgY29uc3Qgc2VydmVySW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBmaWx0ZXJlZFNlcnZlckxpc3QubGVuZ3RoKTtcbiAgICBjb25zdCBzZXJ2ZXIgPSBmaWx0ZXJlZFNlcnZlckxpc3Rbc2VydmVySW5kZXhdO1xuXG4gICAgaWYgKCFpc0FjY2Vzc2libGUobnMsIHNlcnZlcikpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICghaGFzU2VjdXJpdHlMZXZlbChucywgc2VydmVyKSkge1xuICAgICAgYXdhaXQgbnMud2Vha2VuKHNlcnZlciwgeyB0aHJlYWRzOiBudW1UaHJlYWRzIH0pO1xuICAgICAgbnMucHJpbnQoYFske3NlcnZlcn1dIFNlY3VyaXR5IGxldmVsIHdlYWtlbmVkIHRvICR7bnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbChzZXJ2ZXIpLnRvRml4ZWQoMil9YCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoIWhhc01vbmV5KG5zLCBzZXJ2ZXIpKSB7XG4gICAgICBhd2FpdCBucy5ncm93KHNlcnZlciwgeyB0aHJlYWRzOiBudW1UaHJlYWRzIH0pO1xuICAgICAgbnMucHJpbnQoYFske3NlcnZlcn1dIE1vbmV5IGdyb3duIHRvICR7bnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoc2VydmVyKS50b0ZpeGVkKDIpfWApO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgbnMucHJpbnQoYFske3NlcnZlcn1dIEhhY2tpbmdgKTtcbiAgICBhd2FpdCBucy5oYWNrKHNlcnZlciwgeyB0aHJlYWRzOiBudW1UaHJlYWRzIH0pO1xuICB9XG59XG4iXX0=