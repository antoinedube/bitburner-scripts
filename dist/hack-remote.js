/** @param {NS} ns */
function buildServerList(ns) {
    let serversToScan = ['home'];
    let serverList = [];
    while (serversToScan.length > 0) {
        const server = serversToScan.pop();
        const neighbors = ns.scan(server);
        for (const neighbor of neighbors) {
            if (neighbor != 'home' && !serverList.includes(neighbor)) {
                serversToScan.push(neighbor);
                serverList.push(neighbor);
            }
        }
    }
    return serverList;
}
/** @param {NS} ns */
function isAccessible(ns, server) {
    return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();
}
/** @param {NS} ns */
function hasMoney(ns, server) {
    const currentMoney = ns.getServerMoneyAvailable(server);
    const maxMoney = ns.getServerMaxMoney(server);
    const target = 0.90 * maxMoney;
    ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);
    return currentMoney > target;
}
/** @param {NS} ns */
function hasSecurityLevel(ns, server) {
    const currentLevel = ns.getServerSecurityLevel(server);
    const minLevel = ns.getServerMinSecurityLevel(server);
    const target = 1.10 * minLevel;
    ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);
    return currentLevel < target;
}
/** @param {NS} ns */
export async function main(ns) {
    ns.disableLog('ALL');
    ns.enableLog('grow');
    ns.enableLog('hack');
    ns.enableLog('weaken');
    const runningScript = ns.getRunningScript();
    const numThreads = runningScript.threads;
    while (true) {
        await ns.sleep(500);
        const fullServerList = buildServerList(ns);
        const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));
        const serverIndex = Math.floor(Math.random() * filteredServerList.length);
        const server = filteredServerList[serverIndex];
        if (!isAccessible(ns, server)) {
            continue;
        }
        if (!hasSecurityLevel(ns, server)) {
            await ns.weaken(server, { threads: numThreads });
            ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);
            continue;
        }
        if (!hasMoney(ns, server)) {
            await ns.grow(server, { threads: numThreads });
            ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);
            continue;
        }
        ns.print(`[${server}] Hacking`);
        await ns.hack(server, { threads: numThreads });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay1yZW1vdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zY3JpcHRzL2hhY2stcmVtb3RlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQjtBQUNyQixTQUFTLGVBQWUsQ0FBQyxFQUFFO0lBQ3pCLElBQUksYUFBYSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0IsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO0lBRXBCLE9BQU8sYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDL0IsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ25DLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFbEMsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7WUFDaEMsSUFBSSxRQUFRLElBQUksTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDeEQsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDN0IsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUMzQjtTQUNGO0tBQ0Y7SUFFRCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDO0FBRUQscUJBQXFCO0FBQ3JCLFNBQVMsWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNO0lBQzlCLE9BQU8sRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsNkJBQTZCLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ3RHLENBQUM7QUFFRCxxQkFBcUI7QUFDckIsU0FBUyxRQUFRLENBQUMsRUFBRSxFQUFFLE1BQU07SUFDMUIsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hELE1BQU0sUUFBUSxHQUFH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LElBQUksTUFBTSxvQkFBb0IsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDeEYsU0FBUztTQUNWO1FBRUQsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLE1BQU0sV0FBVyxDQUFDLENBQUM7UUFDaEMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0tBQ2hEO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAcGFyYW0ge05TfSBucyAqL1xuZnVuY3Rpb24gYnVpbGRTZXJ2ZXJMaXN0KG5zKSB7XG4gIGxldCBzZXJ2ZXJzVG9TY2FuID0gWydob21lJ107XG4gIGxldCBzZXJ2ZXJMaXN0ID0gW107XG5cbiAgd2hpbGUgKHNlcnZlcnNUb1NjYW4ubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IHNlcnZlciA9IHNlcnZlcnNUb1NjYW4ucG9wKCk7XG4gICAgY29uc3QgbmVpZ2hib3JzID0gbnMuc2NhbihzZXJ2ZXIpO1xuXG4gICAgZm9yIChjb25zdCBuZWlnaGJvciBvZiBuZWlnaGJvcnMpIHtcbiAgICAgIGlmIChuZWlnaGJvciAhPSAnaG9tZScgJiYgIXNlcnZlckxpc3QuaW5jbHVkZXMobmVpZ2hib3IpKSB7XG4gICAgICAgIHNlcnZlcnNUb1NjYW4ucHVzaChuZWlnaGJvcik7XG4gICAgICAgIHNlcnZlckxpc3QucHVzaChuZWlnaGJvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNlcnZlckxpc3Q7XG59XG5cbi8qKiBAcGFyYW0ge05TfSBucyAqL1xuZnVuY3Rpb24gaXNBY2Nlc3NpYmxlKG5zLCBzZXJ2ZXIpIHtcbiAgcmV0dXJuIG5zLmhhc1Jvb3RBY2Nlc3Moc2VydmVyKSAmJiBucy5nZXRTZXJ2ZXJSZXF1aXJlZEhhY2tpbmdMZXZlbChzZXJ2ZXIpIDw9IG5zLmdldEhhY2tpbmdMZXZlbCgpO1xufVxuXG4vKiogQHBhcmFtIHtOU30gbnMgKi9cbmZ1bmN0aW9uIGhhc01vbmV5KG5zLCBzZXJ2ZXIpIHtcbiAgY29uc3QgY3VycmVudE1vbmV5ID0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoc2VydmVyKTtcbiAgY29uc3QgbWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leShzZXJ2ZXIpO1xuICBjb25zdCB0YXJnZXQgPSAwLjkwICogbWF4TW9uZXk7XG5cbiAgbnMucHJpbnQoYFske3NlcnZlcn1dIE1vbmV5IC0+IGN1cnJlbnQ6ICR7Y3VycmVudE1vbmV5LnRvRml4ZWQoMil9LCB0YXJnZXQ6ICR7dGFyZ2V0LnRvRml4ZWQoMil9YCk7XG4gIHJldHVybiBjdXJyZW50TW9uZXkgPiB0YXJnZXQ7XG59XG5cbi8qKiBAcGFyYW0ge05TfSBucyAqL1xuZnVuY3Rpb24gaGFzU2VjdXJpdHlMZXZlbChucywgc2VydmVyKSB7XG4gIGNvbnN0IGN1cnJlbnRMZXZlbCA9IG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwoc2VydmVyKTtcbiAgY29uc3QgbWluTGV2ZWwgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHNlcnZlcik7XG4gIGNvbnN0IHRhcmdldCA9IDEuMTAgKiBtaW5MZXZlbDtcblxuICBucy5wcmludChgWyR7c2VydmVyfV0gU2VjdXJpdHkgbGV2ZWwgLT4gY3VycmVudDogJHtjdXJyZW50TGV2ZWwudG9GaXhlZCgyKX0sIHRhcmdldDogJHt0YXJnZXQudG9GaXhlZCgyKX1gKTtcbiAgcmV0dXJuIGN1cnJlbnRMZXZlbCA8IHRhcmdldDtcbn1cblxuLyoqIEBwYXJhbSB7TlN9IG5zICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xuICBucy5kaXNhYmxlTG9nKCdBTEwnKTtcbiAgbnMuZW5hYmxlTG9nKCdncm93Jyk7XG4gIG5zLmVuYWJsZUxvZygnaGFjaycpO1xuICBucy5lbmFibGVMb2coJ3dlYWtlbicpO1xuXG4gIGNvbnN0IHJ1bm5pbmdTY3JpcHQgPSBucy5nZXRSdW5uaW5nU2NyaXB0KCk7XG4gIGNvbnN0IG51bVRocmVhZHMgPSBydW5uaW5nU2NyaXB0LnRocmVhZHM7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBhd2FpdCBucy5zbGVlcCg1MDApO1xuXG4gICAgY29uc3QgZnVsbFNlcnZlckxpc3QgPSBidWlsZFNlcnZlckxpc3QobnMpO1xuICAgIGNvbnN0IGZpbHRlcmVkU2VydmVyTGlzdCA9IGZ1bGxTZXJ2ZXJMaXN0LmZpbHRlcihuYW1lID0+ICFuYW1lLnN0YXJ0c1dpdGgoJ25laWdoYm9yLScpICYmICFuYW1lLnN0YXJ0c1dpdGgoJ2hhY2tuZXQtJykpO1xuXG4gICAgY29uc3Qgc2VydmVySW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBmaWx0ZXJlZFNlcnZlckxpc3QubGVuZ3RoKTtcbiAgICBjb25zdCBzZXJ2ZXIgPSBmaWx0ZXJlZFNlcnZlckxpc3Rbc2VydmVySW5kZXhdO1xuXG4gICAgaWYgKCFpc0FjY2Vzc2libGUobnMsIHNlcnZlcikpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICghaGFzU2VjdXJpdHlMZXZlbChucywgc2VydmVyKSkge1xuICAgICAgYXdhaXQgbnMud2Vha2VuKHNlcnZlciwgeyB0aHJlYWRzOiBudW1UaHJlYWRzIH0pO1xuICAgICAgbnMucHJpbnQoYFske3NlcnZlcn1dIFNlY3VyaXR5IGxldmVsIHdlYWtlbmVkIHRvICR7bnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbChzZXJ2ZXIpLnRvRml4ZWQoMil9YCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoIWhhc01vbmV5KG5zLCBzZXJ2ZXIpKSB7XG4gICAgICBhd2FpdCBucy5ncm93KHNlcnZlciwgeyB0aHJlYWRzOiBudW1UaHJlYWRzIH0pO1xuICAgICAgbnMucHJpbnQoYFske3NlcnZlcn1dIE1vbmV5IGdyb3duIHRvICR7bnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoc2VydmVyKS50b0ZpeGVkKDIpfWApO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgbnMucHJpbnQoYFske3NlcnZlcn1dIEhhY2tpbmdgKTtcbiAgICBhd2FpdCBucy5oYWNrKHNlcnZlciwgeyB0aHJlYWRzOiBudW1UaHJlYWRzIH0pO1xuICB9XG59XG4iXX0=