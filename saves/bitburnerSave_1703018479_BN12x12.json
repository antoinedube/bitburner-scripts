{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":40,\"max\":40},\"skills\":{\"hacking\":1252,\"strength\":351,\"defense\":305,\"dexterity\":351,\"agility\":305,\"charisma\":2,\"intelligence\":213},\"exp\":{\"hacking\":990800924.9391856,\"strength\":430668.6645580989,\"defense\":430668.6645580989,\"dexterity\":430668.6645580989,\"agility\":430668.6645580989,\"charisma\":0,\"intelligence\":411987.4017860999},\"mults\":{\"hacking_chance\":2.2486220221657063,\"hacking_speed\":2.237391738523354,\"hacking_money\":3.7573566581330406,\"hacking_grow\":2.250183649618541,\"hacking\":3.431978470233877,\"strength\":2.0701689576490576,\"defense\":1.800146919694833,\"dexterity\":2.0701689576490576,\"agility\":1.800146919694833,\"charisma\":2.5562086259666628,\"hacking_exp\":4.5309588204760525,\"strength_exp\":2.2771858534139637,\"defense_exp\":2.2771858534139637,\"dexterity_exp\":2.2771858534139637,\"agility_exp\":2.2771858534139637,\"charisma_exp\":1.997531450363126,\"company_rep\":1.5790762453463445,\"faction_rep\":1.5790762453463445,\"crime_money\":2.242288268391809,\"crime_success\":2.242288268391809,\"hacknet_node_money\":4.8189197782853945,\"hacknet_node_purchase_cost\":0.3827233785772297,\"hacknet_node_ram_cost\":0.5002919981401697,\"hacknet_node_core_cost\":0.5002919981401697,\"hacknet_node_level_cost\":0.42524819841914413,\"work_money\":1.800146919694833,\"bladeburner_max_stamina\":1.1400000000000001,\"bladeburner_stamina_gain\":1.1400000000000001,\"bladeburner_analysis\":1.1400000000000001,\"bladeburner_success_chance\":1.1400000000000001},\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":21},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"nextSENS Gene Modification\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"NutriGen Implant\"}],\"city\":\"Sector-12\",\"bitNodeN\":12,\"corporation\":null,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"NiteSec\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":1043811.3691508856,\"hack\":92398,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":7537,\"hack_exp\":7796584.172044605,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":510016.52364923334,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":34899935.83283893,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":2335154.491130921,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-1\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":1456645.4424575786,\"hack\":92121,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":7653,\"hack_exp\":10511337.252823552,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":691505.890190132,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":32632329.47515834,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":2208285.1088967496,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-2\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":1532225.5187559475,\"hack\":91723,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":7664,\"hack_exp\":10986515.958593115,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":725431.6293538922,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":32064648.34069148,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":2185902.134359365,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-3\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":5194490.040238829,\"hack\":59891,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":5379,\"hack_exp\":28716255.56568302,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":1953944.1842506153,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":11371752.413471682,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":833434.5706076925,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-4\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":5240309.359880792,\"hack\":57063,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":5097,\"hack_exp\":28388252.863338225,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":1921610.8609818674,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":10345014.044875462,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":751363.1185002475,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-5\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":4561076.961964952,\"hack\":67454,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":6054,\"hack_exp\":26130580.43334133,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":1778217.539434691,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":14677334.485527275,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":1080078.4900732476,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-6\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":4546153.946656843,\"hack\":67121,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":6036,\"hack_exp\":26012796.565577447,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":1773646.2840693544,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":14545316.2135434,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":1074532.5224756922,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-7\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":5167938.331849816,\"hack\":56833,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":5080,\"hack_exp\":27989158.71600973,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":1896413.715517742,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":10288306.356217984,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":748796.7176042604,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-8\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":4696320.6885598805,\"hack\":60733,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":5426,\"hack_exp\":26789096.93547638,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":1822872.4865046262,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":11843965.993029833,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":862354.9508212708,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-9\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":4388595.151584641,\"hack\":63670,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":5786,\"hack_exp\":24785859.76681087,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":1708012.9497928277,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":13205567.047764547,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":996478.3240629978,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-10\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":3953879.1914370265,\"hack\":58105,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":5563,\"hack_exp\":21876631.23995916,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":1583912.0853052973,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":11257263.843629025,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":938414.4032077865,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-11\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":2740117.004288151,\"hack\":57159,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":5087,\"hack_exp\":15377720.114078002,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":1052554.685676433,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":11652095.118434466,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":871242.6251223724,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-12\"}}],\"wanted\":3486.909879217282,\"respect\":44521564.00682538,\"isHackingGang\":true,\"respectGainRate\":223.8476029352093,\"wantedGainRate\":0.03529221677627087,\"moneyGainRate\":639911.7181102532,\"storedCycles\":92723,\"storedTerritoryAndPowerCycles\":67,\"territoryClashChance\":0,\"territoryWarfareEngaged\":false,\"notifyMemberDeath\":true}},\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"BitRunners\",\"NiteSec\"],\"factionInvitations\":[\"Slum Snakes\",\"Netburners\",\"CyberSec\",\"Sector-12\",\"The Syndicate\",\"The Black Hand\"],\"hacknetNodes\":[\"hacknet-server-0\",\"hacknet-server-1\",\"hacknet-server-2\",\"hacknet-server-3\",\"hacknet-server-4\",\"hacknet-server-5\",\"hacknet-server-6\",\"hacknet-server-7\",\"hacknet-server-8\",\"hacknet-server-9\",\"hacknet-server-10\",\"hacknet-server-11\",\"hacknet-server-12\",\"hacknet-server-13\",\"hacknet-server-14\"],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":1064960,\"hashes\":912499.9302083009,\"upgrades\":{\"Sell for Money\":301850,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":20,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":-112817,\"numPeopleKilled\":0,\"location\":\"Rothman University\",\"money\":3187035989.105479,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":213718267259.86768,\"hacking\":1489350235212.644,\"hacknet\":1038930750140.3999,\"hacknet_expenses\":-1826584763476.9136,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":5168023974.702016,\"stock\":0,\"total\":3187034876.105479,\"work\":0,\"servers\":-458855708366.3341,\"other\":-314200000,\"augmentations\":-458225569868.33484}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-37624704,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":1777083802.0152748,\"hacking\":1957195064159.3354,\"hacknet\":1890464210445.5698,\"hacknet_expenses\":-2660893549675.506,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":12809582580.817204,\"stock\":0,\"total\":9182843932.940863,\"work\":211549.1547309876,\"servers\":-667309981423.1621,\"other\":-1571000000,\"augmentations\":-523251152801.4901}},\"playtimeSinceLastAug\":119735600,\"playtimeSinceLastBitnode\":417599200,\"lastAugReset\":1702898742594,\"lastNodeReset\":1702600878706,\"purchasedServers\":[\"neighbor-0\",\"neighbor-1\",\"neighbor-2\",\"neighbor-3\",\"neighbor-4\",\"neighbor-5\",\"neighbor-6\",\"neighbor-7\",\"neighbor-8\",\"neighbor-9\",\"neighbor-10\",\"neighbor-11\",\"neighbor-12\",\"neighbor-13\",\"neighbor-14\",\"neighbor-15\",\"neighbor-16\",\"neighbor-17\",\"neighbor-18\",\"neighbor-19\"],\"scriptProdSinceLastAug\":1014852634878.5796,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":29,\"max\":29},\"skills\":{\"hacking\":1,\"strength\":192,\"defense\":192,\"dexterity\":192,\"agility\":192,\"charisma\":1,\"intelligence\":179},\"exp\":{\"hacking\":0,\"strength\":1067861.4328856845,\"defense\":1067861.4328856845,\"dexterity\":1067861.4328856845,\"agility\":1067861.4328856845,\"charisma\":0,\"intelligence\":142067.42944290765},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":5,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":203672,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":29,\"max\":29},\"skills\":{\"hacking\":1,\"strength\":192,\"defense\":192,\"dexterity\":192,\"agility\":192,\"charisma\":1,\"intelligence\":176},\"exp\":{\"hacking\":0,\"strength\":1067861.4328856845,\"defense\":1067861.4328856845,\"dexterity\":1067861.4328856845,\"agility\":1067861.4328856845,\"charisma\":0,\"intelligence\":128719.45344066303},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":5,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":203672,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":29,\"max\":29},\"skills\":{\"hacking\":1,\"strength\":192,\"defense\":192,\"dexterity\":192,\"agility\":192,\"charisma\":1,\"intelligence\":176},\"exp\":{\"hacking\":0,\"strength\":1067861.4328856845,\"defense\":1067861.4328856845,\"dexterity\":1067861.4328856845,\"agility\":1067861.4328856845,\"charisma\":0,\"intelligence\":128682.05988337383},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":5,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":203672,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":29,\"max\":29},\"skills\":{\"hacking\":1,\"strength\":192,\"defense\":192,\"dexterity\":192,\"agility\":192,\"charisma\":1,\"intelligence\":176},\"exp\":{\"hacking\":0,\"strength\":1067861.4328856845,\"defense\":1067861.4328856845,\"dexterity\":1067861.4328856845,\"agility\":1067861.4328856845,\"charisma\":0,\"intelligence\":128682.83139255909},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":5,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":203672,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":29,\"max\":29},\"skills\":{\"hacking\":1,\"strength\":192,\"defense\":192,\"dexterity\":192,\"agility\":192,\"charisma\":1,\"intelligence\":173},\"exp\":{\"hacking\":0,\"strength\":1067861.4241413395,\"defense\":1067861.4241413395,\"dexterity\":1067861.4241413395,\"agility\":1067861.4241413395,\"charisma\":0,\"intelligence\":117729.12392306191},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":5,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":203672,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":29,\"max\":29},\"skills\":{\"hacking\":1,\"strength\":192,\"defense\":192,\"dexterity\":192,\"agility\":192,\"charisma\":1,\"intelligence\":173},\"exp\":{\"hacking\":0,\"strength\":1067861.4241413395,\"defense\":1067861.4241413395,\"dexterity\":1067861.4241413395,\"agility\":1067861.4241413395,\"charisma\":0,\"intelligence\":117862.62575957252},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":5,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":203672,\"sync\":100}}],\"sleevesFromCovenant\":3,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,3],[2,3],[3,3],[4,3],[5,3],[10,3],[9,3],[12,11],[6,3],[7,3]]},\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1662043985194},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1662055145998},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1662059766003},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1662066426141},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1662123294982},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1662473253800},{\"ID\":\"NITESEC\",\"unlockedOn\":1662586146115},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1662599826142},{\"ID\":\"DONATION\",\"unlockedOn\":1663589558449},{\"ID\":\"NS2\",\"unlockedOn\":1664451835859},{\"ID\":\"FROZE\",\"unlockedOn\":1664473094691},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1664552329001},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1664798852132},{\"ID\":\"TOR\",\"unlockedOn\":1665066056909},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1665074458530},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1665081718922},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1665334933764},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1665766590313},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1665837400497},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1665874707261},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1665939874779},{\"ID\":\"WORKOUT\",\"unlockedOn\":1665946235177},{\"ID\":\"TRAVEL\",\"unlockedOn\":1666024890747},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1666127536448},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1666177601953},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1666201654675},{\"ID\":\"SF1.1\",\"unlockedOn\":1666396556449},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1668533490192},{\"ID\":\"GANG\",\"unlockedOn\":1668867250197},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1668954907599},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1668955027612},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1669208876810},{\"ID\":\"SF2.1\",\"unlockedOn\":1669423716199},{\"ID\":\"CORPORATION\",\"unlockedOn\":1669431816190},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1671198038341},{\"ID\":\"SF3.1\",\"unlockedOn\":1671300458277},{\"ID\":\"CHALLENGE_BN1\",\"unlockedOn\":1671822590337},{\"ID\":\"SF4.1\",\"unlockedOn\":1674137591582},{\"ID\":\"SF5.1\",\"unlockedOn\":1675551633160},{\"ID\":\"N00DLES\",\"unlockedOn\":1677761263550},{\"ID\":\"SF10.1\",\"unlockedOn\":1680550899708},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1683499237184},{\"ID\":\"KARMA_1000000\",\"unlockedOn\":1683585524648},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1686441026190},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1686518683455},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1686519223506},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1688038167678},{\"ID\":\"ALL_HACKNET_SERVER\",\"unlockedOn\":1688038167687},{\"ID\":\"MAX_HACKNET_SERVER\",\"unlockedOn\":1688038167689},{\"ID\":\"SF9.1\",\"unlockedOn\":1688302024803},{\"ID\":\"NEUROFLUX_255\",\"unlockedOn\":1689366941906},{\"ID\":\"FAST_BN\",\"unlockedOn\":1689431425450},{\"ID\":\"SF12.1\",\"unlockedOn\":1689714316805},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1696862815306},{\"ID\":\"SF6.1\",\"unlockedOn\":1697665718942},{\"ID\":\"SF7.1\",\"unlockedOn\":1699191969386},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1701305531389}],\"terminalCommandHistory\":[\"run fetch-scripts.js \",\"top\",\"run buy-servers.js \",\"top\",\"run delete-servers.js \",\"run buy-servers.js \",\"nano buy-servers.js \",\"run fetch-scripts.js \",\"nano buy-servers.js \",\"run buy-servers.js \",\"run fetch-scripts.js \",\"nano buy-servers.js \",\"run buy-servers.js \",\"run fetch-scripts.js \",\"run bootstrap.js \",\"nano buy-hacknet-server.js\",\"nano buy-hacknet-server.js fetch-scripts.js \",\"mv buy-hacknet-server.js buy-hacknet-servers.js\",\"nano buy-hacknet-servers.js buy-hacknet-nodes.js \",\"rm buy-hacknet-nodes.js \",\"nano bootstrap.js fetch-scripts.js buy-hacknet-servers.js \",\"run bootstrap.js \",\"home ; nano spend-hashes.js \",\"run spend-hashes.js \",\"nano bootstrap.js fetch-scripts.js spend-hashes.js \",\"run fetch-scripts.js \",\"connect The-Cave \",\"scan\",\"home\",\"run bootstrap.js \",\"connect The-Cave \",\"connect w0r1d_d43m0n \",\"analyze \",\"hack\",\"run bootstrap.js \",\"run fetch-scripts.js \",\"cat bootstrap.js \",\"nano spend-hashes.js buy-hacknet-servers.js buy-servers.js \",\"run bootstrap.js \",\"run fetch-scripts.js \",\"nano bootstrap.js \",\"run bootstrap.js \",\"nano spend-hashes.js \",\"run bootstrap.js \",\"nano spend-hashes.js \",\"run bootstrap.js \",\"home ; nano buy-hacknet-servers.js\",\"top\",\"run bootstrap.js \",\"home ; nano spend-hashes.js\"],\"lastUpdate\":1703018478656,\"lastSave\":1703018472056,\"totalPlaytime\":40974863600,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":590233,\"factionWorkType\":\"hacking\",\"factionName\":\"BitRunners\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"10c510f1398e51\",\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"Bladeburners\",\"Shadows of Anarchy\"]}}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"5.0.5.9\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"relaySMTP.exe\",\"DeepscanV2.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"launch-hacking.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork, buildPath } from \\\"./scan.js\\\";\\nimport { buildHackingProgramList, countAvailablePrograms } from \\\"./hacking-programs.js\\\";\\n\\n/** @param {NS} ns */\\nasync function openPorts(ns, hackingPrograms, target) {\\n\\tfor (const program of hackingPrograms) {\\n\\t\\tif (ns.fileExists(program.executableName, \\\"home\\\")) {\\n\\t\\t\\tconst executable = program['functionName'].bind(ns);\\n\\t\\t\\tawait executable(target);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction launchScript(ns, script, server) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\tconst scriptNumThreads = ~~(availableRam / scriptRam);\\n\\n\\tif (scriptNumThreads > 0) {\\n\\t\\tns.exec(script, server, scriptNumThreads);\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tconst replace = false;  // Replace an existing script\\n\\n\\twhile (true) {\\n\\t\\tconst fullServerList = scanAllNetwork(ns, 'home');\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tfor (const server of filteredServerList) {\\n\\t\\t\\tns.print(`Current server: ${server}`);\\n\\n\\t\\t\\tconst playerHackingLevel = ns.getHackingLevel();\\n\\t\\t\\tconst hackingPrograms = buildHackingProgramList(ns);\\n\\t\\t\\tconst numberAvailablePrograms = countAvailablePrograms(ns, hackingPrograms);\\n\\n\\t\\t\\t// Check server level vs player level\\n\\t\\t\\tconst machineHackingLevel = ns.getServerRequiredHackingLevel(server);\\n\\t\\t\\tns.print(`Level player: ${playerHackingLevel}, level machine: ${machineHackingLevel}`);\\n\\n\\t\\t\\t// Check number of ports required vs number of programs available\\n\\t\\t\\tconst requiredNumberOfPorts = ns.getServerNumPortsRequired(server);\\n\\t\\t\\tns.print(`Required num ports: ${requiredNumberOfPorts}, number available programs: ${numberAvailablePrograms}`);\\n\\n\\t\\t\\tif (playerHackingLevel < machineHackingLevel) {\\n\\t\\t\\t\\tns.print('----------\\\\n');\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (numberAvailablePrograms < requiredNumberOfPorts) {\\n\\t\\t\\t\\tns.print('----------\\\\n');\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!ns.hasRootAccess(server)) {\\n\\t\\t\\t\\tawait openPorts(ns, hackingPrograms, server);\\n\\t\\t\\t\\tns.nuke(server);\\n\\n\\t\\t\\t\\tif (server == 'w0r1d_d43m0n') {\\n\\t\\t\\t\\t\\tns.tprint('w0r1d_d43m0n is now root-accessible');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.print(`hasRootAccess: ${ns.hasRootAccess(server)}`);\\n\\n\\t\\t\\tconst isBackdoorInstalled = ns.getServer(server).backdoorInstalled;\\n\\t\\t\\tns.print(`isBackdoorInstalled: ${isBackdoorInstalled}`);\\n\\t\\t\\tif (ns.hasRootAccess(server) && !isBackdoorInstalled && server != 'w0r1d_d43m0n') {\\n\\t\\t\\t\\tconst path = await buildPath(ns, server);\\n\\t\\t\\t\\tfor (let item of path) {\\n\\t\\t\\t\\t\\t// ns.print(`Connecting to ${item} from ${ns.singularity.getCurrentServer()}`);\\n\\t\\t\\t\\t\\tif (!ns.singularity.connect(item)) {\\n\\t\\t\\t\\t\\t\\tns.print(`Error while connecting to ${item}`);\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tns.print('Installing backdoor');\\n\\t\\t\\t\\tawait ns.singularity.installBackdoor();\\n\\t\\t\\t\\tns.print('Backdoor installed');\\n\\n\\t\\t\\t\\tfor (let item of path.reverse()) {\\n\\t\\t\\t\\t\\tif (!ns.singularity.connect(item)) {\\n\\t\\t\\t\\t\\t\\tns.print(`Error while connecting to ${item}`);\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (replace) {\\n\\t\\t\\t\\tns.killall(server);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (replace || !ns.fileExists('hack-server.js', server)) {\\n\\t\\t\\t\\tconst scpStatus = ns.scp('hack-server.js', server, 'home');\\n\\t\\t\\t\\tif (!scpStatus) {\\n\\t\\t\\t\\t\\tns.print(`Failed to copy hack-server.js on ${server}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!ns.isRunning('hack-server.js', server)) {\\n\\t\\t\\t\\tlaunchScript(ns, 'hack-server.js', server);\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.print('----------\\\\n');\\n\\t\\t}\\n\\n\\t\\tif (replace) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000 * 5);\\n\\t}\\n}\\n\",\"filename\":\"launch-hacking.js\",\"server\":\"home\"}}],[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"home\"}}],[\"list-server-prices.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tfor (let i = 2; i < 21; i++) {\\n\\t\\tconst serverRam = Math.pow(2.0, i);\\n\\t\\tconst serverCost = ns.getPurchasedServerCost(serverRam);\\n\\t\\tns.tprint(`Server ram: ${serverRam}`);\\n\\t\\tns.tprint(`Server cost: ${formatNumber(serverCost)}\\\\$`);\\n\\t\\tns.tprint(\\\"\\\\n\\\");\\n\\t}\\n}\\n\",\"filename\":\"list-server-prices.js\",\"server\":\"home\"}}],[\"scan.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport function scanAllNetwork(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nexport async function buildPath(ns, server) {\\n\\tlet pathList = [['home']];\\n\\n\\twhile (true) {\\n\\t\\tconst currentPath = pathList.pop();\\n\\t\\tconst lastItem = currentPath.pop();\\n\\t\\tconst neighbors = ns.scan(lastItem);\\n\\t\\tconst neighborsWithoutServers = neighbors.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-') && !currentPath.includes(name));\\n\\n\\t\\tfor (let neighbor of neighborsWithoutServers) {\\n\\t\\t\\tlet newPath = currentPath.slice();\\n\\t\\t\\tnewPath.push(lastItem);\\n\\t\\t\\tnewPath.push(neighbor);\\n\\n\\t\\t\\tif (neighbor == server) {\\n\\t\\t\\t\\treturn newPath;\\n\\t\\t\\t}\\n\\n\\t\\t\\tpathList.unshift(newPath);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(250);  // Just so that the editor does not complain...\\n\\t}\\n}\\n\",\"filename\":\"scan.js\",\"server\":\"home\"}}],[\"buy-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan\\\";\\n\\nfunction generateUUID() {\\n\\t// https://stackoverflow.com/questions/105034/how-do-i-create-a-guid-uuid\\n\\t// crypto.randomUUID();\\n\\t// crypto.getRandomValues();\\n}\\n\\n/** @param {NS} ns */\\nfunction launchScript(ns, scriptName, server) {\\n\\tconst scpStatus = ns.scp(scriptName, server, 'home');\\n\\tif (!scpStatus) {\\n\\t\\tns.print('Failed to copy ' + scriptName + ' on ' + server);\\n\\t}\\n\\n\\tns.killall(server);\\n\\n\\tconst maxRam = ns.getServerMaxRam(server);\\n\\tconst usedRam = ns.getServerUsedRam(server);\\n\\tconst availableRam = maxRam - usedRam;\\n\\tconst scriptRam = ns.getScriptRam(scriptName, server);\\n\\tconst numThreads = Math.floor(availableRam / scriptRam);\\n\\tif (numThreads > 0) {\\n\\t\\tif (ns.exec(scriptName, server, numThreads) == 0) {\\n\\t\\t\\tns.print('Error launching script');\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst BUYING_DELAY = 250;\\n\\tconst UPGRADING_DELAY = 5 * 1000;\\n\\tconst FOLLOWING_BATCH_DELAY = 1000 * 60 * 5;\\n\\tconst HOME_SERVER = 'home';\\n\\n\\tlet targetRam = 4;\\n\\twhile (targetRam <= ns.getPurchasedServerMaxRam()) {\\n\\t\\tconst maxNumberOfServers = ns.getPurchasedServerLimit();\\n\\t\\tconst availableMoney = ns.getServerMoneyAvailable('home');\\n\\t\\tconst serverCost = ns.getPurchasedServerCost(targetRam);\\n\\n\\t\\tif (availableMoney < maxNumberOfServers * serverCost) {\\n\\t\\t\\ttargetRam /= 2;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\ttargetRam *= 2;\\n\\t}\\n\\n\\tif (targetRam < 8) {\\n\\t\\ttargetRam = 8;\\n\\t}\\n\\n\\tns.print(`Starting target ram: ${targetRam}`);\\n\\n\\t// Purchase missing servers\\n\\twhile (true) {\\n\\t\\t// List current servers\\n\\t\\tconst serverList = scanAllNetwork(ns);\\n\\t\\tlet purchasedServers = serverList.filter(name => name.startsWith('neighbor-'));\\n\\n\\t\\t// Stopping criteria\\n\\t\\tif (purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// If limit is not reached, buy server at current targetRam\\n\\t\\tif (ns.getPurchasedServerCost(targetRam) < ns.getServerMoneyAvailable(HOME_SERVER)) {\\n\\t\\t\\tconst name = `neighbor-${purchasedServers.length}`;\\n\\t\\t\\tns.print(`Purchasing server ${name}`);\\n\\t\\t\\tns.purchaseServer(name, targetRam);\\n\\t\\t\\tpurchasedServers.push(name);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(BUYING_DELAY);\\n\\t}\\n\\n\\tconst purchasedServers = scanAllNetwork(ns).filter(name => name.startsWith('neighbor-'));\\n\\tns.print(`Purchased servers: ${purchasedServers}`);\\n\\n\\ttargetRam *= 2;\\n\\twhile (true) {\\n\\t\\t// Stopping criteria\\n\\t\\tlet countServerWithTargetRam = 0;\\n\\t\\tfor (const purchasedServer of purchasedServers) {\\n\\t\\t\\tconst purchasedServerRam = ns.getServer(purchasedServer).maxRam;\\n\\t\\t\\tif (purchasedServerRam >= targetRam) {\\n\\t\\t\\t\\tcountServerWithTargetRam++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tns.print(`Number of servers at target (target: ${ns.formatRam(targetRam)} / max: ${ns.formatRam(ns.getPurchasedServerMaxRam())}): ${countServerWithTargetRam} vs ${ns.getPurchasedServerLimit()}`);\\n\\t\\tif (countServerWithTargetRam == ns.getPurchasedServerLimit()) {\\n\\t\\t\\tif (targetRam >= ns.getPurchasedServerMaxRam()) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\ttargetRam *= 2;\\n\\n\\t\\t\\tawait ns.sleep(FOLLOWING_BATCH_DELAY);\\n\\t\\t}\\n\\n\\t\\tfor (const purchasedServer of purchasedServers) {\\n\\t\\t\\tconst purchasedServerRam = ns.getServer(purchasedServer).maxRam;\\n\\t\\t\\tif (purchasedServerRam < targetRam) {\\n\\t\\t\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable('home');\\n\\t\\t\\t\\tconst upgradeCost = ns.getPurchasedServerUpgradeCost(purchasedServer, targetRam);\\n\\t\\t\\t\\tif (upgradeCost < moneyAvailable) {\\n\\t\\t\\t\\t\\tif (ns.upgradePurchasedServer(purchasedServer, targetRam)) {\\n\\t\\t\\t\\t\\t\\tns.print(`Upgraded ${purchasedServer} to ${targetRam}Gb with cost of ${ns.formatNumber(upgradeCost)}\\\\$`);\\n\\t\\t\\t\\t\\t\\tlaunchScript(ns, 'hack-remote.js', purchasedServer);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tns.print(`Error while upgrading purchased server ${purchasedServer} to ${targetRam}Gb`);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(UPGRADING_DELAY);\\n\\t}\\n}\\n\",\"filename\":\"buy-servers.js\",\"server\":\"home\"}}],[\"delete-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst fullServerList = scanAllNetwork(ns);\\n\\tconst serverList = fullServerList.filter(name => name.startsWith('neighbor-'));\\n\\n\\tfor (const server of serverList) {\\n\\t\\tns.tprint('Deleting: ' + server);\\n\\t\\tns.killall(server);\\n\\t\\tns.deleteServer(server);\\n\\t}\\n}\\n\",\"filename\":\"delete-servers.js\",\"server\":\"home\"}}],[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"home\"}}],[\"list-server-money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst fullServerList = scanAllNetwork(ns);\\n\\tconst serverList = fullServerList.filter(name => !name.startsWith('neighbor-'));\\n\\n\\tfor (let server of serverList) {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(server);\\n\\t\\tconst maxMoneyAvailable = ns.getServerMaxMoney(server);\\n\\n\\t\\tns.tprint(`Server: ${server} --> ${ns.formatNumber(moneyAvailable)}\\\\$ / ${ns.formatNumber(maxMoneyAvailable)}\\\\$`);\\n\\t}\\n}\\n\",\"filename\":\"list-server-money.js\",\"server\":\"home\"}}],[\"fetch-scripts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    if (ns.getHostname() !== \\\"home\\\") {\\n        throw new Exception(\\\"Run the script from home\\\");\\n    }\\n\\n    const scripts = [\\n        'bootstrap.js',\\n        'buy-darkweb-programs.js',\\n        'buy-hacknet-servers.js',\\n        'buy-servers.js',\\n        'delete-servers.js',\\n        'fetch-scripts.js',\\n        'hack-remote.js',\\n        'hack-server.js',\\n        'hacking-programs.js',\\n        'launch-hacking.js',\\n        'list-player-karma.js',\\n        'list-server-money.js',\\n        'list-server-prices.js',\\n        'list-server-security-level.js',\\n        'manage-bladeburner.js',\\n        'manage-corporation.js',\\n        'manage-gang.js',\\n        'manage-sleeves.js',\\n        'scan.js',\\n        'spend-hashes.js'\\n    ];\\n\\n    for (const scriptName of scripts) {\\n        ns.tprint(`Fetching: ${scriptName}`);\\n        await ns.wget(\\n            `https://raw.githubusercontent.com/antoinedube/bitburner-scripts/main/scripts/${scriptName}`,\\n            `${scriptName}`\\n        );\\n\\n        await ns.sleep(250);\\n    }\\n}\\n\",\"filename\":\"fetch-scripts.js\",\"server\":\"home\"}}],[\"list-player-karma.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst karma = ns.heart.break();\\n\\tns.tprint(`karma: ${karma.toFixed(2)}`);\\n}\\n\",\"filename\":\"list-player-karma.js\",\"server\":\"home\"}}],[\"list-server-security-level.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst fullServerList = scanAllNetwork(ns);\\n\\tconst serverList = fullServerList.filter(name => !name.startsWith('neighbor-'));\\n\\n\\tfor (let server of serverList) {\\n\\t\\tconst currentSecurityLevel = ns.getServerSecurityLevel(server);\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(server)\\n\\n\\t\\tns.tprint(`Server: ${server} --> ${ns.formatNumber(currentSecurityLevel)} / ${ns.formatNumber(minSecurityLevel)}`);\\n\\t}\\n}\\n\",\"filename\":\"list-server-security-level.js\",\"server\":\"home\"}}],[\"bootstrap.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const scripts = [\\n        'launch-hacking.js',\\n        'spend-hashes.js',\\n        'buy-hacknet-servers.js',\\n        'buy-servers.js',\\n        'manage-sleeves.js',\\n        'manage-gang.js',\\n        'buy-darkweb-programs.js',\\n        /* 'manage-bladeburner.js' */\\n    ];\\n\\n    if (ns.isRunning('hack-remote.js')) {\\n        ns.kill('hack-remote.js', 'home');\\n    }\\n\\n    for (let script of scripts) {\\n        if (!ns.isRunning(script)) {\\n            ns.tprint(`Launching script: ${script}`);\\n            ns.run(script);\\n\\n            await ns.sleep(250);\\n        }\\n    }\\n\\n    await ns.sleep(2 * 1000);\\n\\n    const hackingScript = 'hack-remote.js';\\n    const scriptRam = ns.getScriptRam(hackingScript);\\n    const serverMaxRam = ns.getServerMaxRam('home');\\n    const serverUsedRam = ns.getServerUsedRam('home');\\n    const availableRam = serverMaxRam - serverUsedRam;\\n    const scriptNumThreads = ~~(availableRam / scriptRam);\\n\\n    if (scriptNumThreads > 0) {\\n        ns.tprint(`Launching script: ${hackingScript} with ${scriptNumThreads} threads`);\\n        ns.exec(hackingScript, 'home', scriptNumThreads);\\n    }\\n\\n    if (!ns.bladeburner.inBladeburner()) {\\n        ns.singularity.universityCourse('Rothman University', 'Computer Science');\\n    }\\n}\\n\",\"filename\":\"bootstrap.js\",\"server\":\"home\"}}],[\"manage-gang.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction displayMembersInformation(ns, memberName) {\\n\\tconst memberInfo = ns.gang.getMemberInformation(memberName);\\n\\tconst hackingLevel = memberInfo['hack'];\\n\\tconst currentTask = memberInfo['task'];\\n\\tns.print(`Member: ${memberName}\\\\thacking level: ${hackingLevel}\\\\ttask: ${currentTask}`);\\n}\\n\\n/** @param {NS} ns */\\nfunction assignMember(ns, name, task = '') {\\n\\tconst memberInfo = ns.gang.getMemberInformation(name);\\n\\tconst hackingLevel = memberInfo['hack'];\\n\\tconst currentTask = memberInfo['task'];\\n\\n\\t/*\\n\\tTask names:\\n\\t\\t\\t- Unassigned\\n\\t\\t\\t- Ransomware\\n\\t\\t\\t- Phishing\\n\\t\\t\\t- Identity Theft\\n\\t\\t\\t- DDoS Attacks\\n\\t\\t\\t- Plant Virus\\n\\t\\t\\t- Fraud & Counterfeiting,\\n\\t\\t\\t- Money Laundering\\n\\t\\t\\t- Cyberterrorism\\n\\t\\t\\t- Ethical Hacking\\n\\t\\t\\t- Vigilante Justice\\n\\t\\t\\t- Train Combat\\n\\t\\t\\t- Train Hacking\\n\\t\\t\\t- Train Charisma\\n\\t\\t\\t- Territory Warfare\\n\\t*/\\n\\tif (task != '') {\\n\\t\\tif (currentTask != task) {\\n\\t\\t\\tns.gang.setMemberTask(name, task);\\n\\t\\t}\\n\\t} else if (hackingLevel < 120) {\\n\\t\\tif (currentTask != 'Cyberterrorism') {\\n\\t\\t\\tns.gang.setMemberTask(name, 'Cyberterrorism');\\n\\t\\t}\\n\\t} else {\\n\\t\\tif (currentTask != 'Money Laundering') {\\n\\t\\t\\tns.gang.setMemberTask(name, 'Money Laundering');\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction recruitIfPossible(ns) {\\n\\tif (!ns.gang.canRecruitMember()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst gangMembers = ns.gang.getMemberNames();\\n\\tconst newGangMemberName = `audrey-${gangMembers.length + 1}`;\\n\\tns.gang.recruitMember(newGangMemberName);\\n\\tassignMember(ns, newGangMemberName);\\n}\\n\\n/** @param {NS} ns */\\nfunction reassignMembersAccordingToWantedLevelPenalty(ns) {\\n\\tconst gangInformation = ns.gang.getGangInformation();\\n\\t/*\\n\\tGang information structure:\\n\\t{\\n\\t\\t\\t\\\"faction\\\":\\\"NiteSec\\\",\\n\\t\\t\\t\\\"isHacking\\\":true,\\n\\t\\t\\t\\\"moneyGainRate\\\":213.18959642323077,\\n\\t\\t\\t\\\"power\\\":1,\\n\\t\\t\\t\\\"respect\\\":846.631799960249,\\n\\t\\t\\t\\\"respectGainRate\\\":0,\\n\\t\\t\\t\\\"territory\\\":0.14285714285714293,\\n\\t\\t\\t\\\"territoryClashChance\\\":0,\\n\\t\\t\\t\\\"territoryWarfareEngaged\\\":false,\\n\\t\\t\\t\\\"wantedLevel\\\":310.2473419438491,\\n\\t\\t\\t\\\"wantedLevelGainRate\\\":-0.025302857142857158,\\n\\t\\t\\t\\\"wantedPenalty\\\":0.7318238952487159\\n\\t}\\n\\t*/\\n\\n\\tconst wantedLevelPenalty = 1.0 - gangInformation['wantedPenalty'];\\n\\tconst gangRespect = gangInformation['respect'];\\n\\tif (wantedLevelPenalty > 0.25 && gangRespect > 50) {\\n\\t\\tns.gang.getMemberNames().map(memberName => {\\n\\t\\t\\tassignMember(ns, memberName, 'Ethical Hacking');\\n\\t\\t});\\n\\t} else {\\n\\t\\tns.gang.getMemberNames().map(memberName => {\\n\\t\\t\\tassignMember(ns, memberName);\\n\\t\\t});\\n\\t}\\n}\\n\\nfunction ascendIfGainIsWorth(ns) {\\n\\tns.gang.getMemberNames().map(memberName => {\\n\\t\\tconst results = ns.gang.getAscensionResult(memberName);\\n\\n\\t\\tif (results === undefined) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst hackingMultWithAscension = results['hack'];\\n\\n\\t\\tif (hackingMultWithAscension > 2.0) {\\n\\t\\t\\tns.gang.ascendMember(memberName);\\n\\t\\t\\tassignMember(ns, memberName);\\n\\t\\t}\\n\\t});\\n}\\n\\nfunction buyEquipment(ns) {\\n\\t/*\\n\\t\\t\\t[\\n\\t\\t\\t\\t\\t\\\"Baseball Bat\\\",\\n\\t\\t\\t\\t\\t\\\"Katana\\\",\\n\\t\\t\\t\\t\\t\\\"Glock 18C\\\",\\n\\t\\t\\t\\t\\t\\\"P90C\\\",\\n\\t\\t\\t\\t\\t\\\"Steyr AUG\\\",\\n\\t\\t\\t\\t\\t\\\"AK-47\\\",\\n\\t\\t\\t\\t\\t\\\"M15A10 Assault Rifle\\\",\\n\\t\\t\\t\\t\\t\\\"AWM Sniper Rifle\\\",\\n\\t\\t\\t\\t\\t\\\"Bulletproof Vest\\\",\\n\\t\\t\\t\\t\\t\\\"Full Body Armor\\\",\\n\\t\\t\\t\\t\\t\\\"Liquid Body Armor\\\",\\n\\t\\t\\t\\t\\t\\\"Graphene Plating Armor\\\",\\n\\t\\t\\t\\t\\t\\\"Ford Flex V20\\\",\\n\\t\\t\\t\\t\\t\\\"ATX1070 Superbike\\\",\\n\\t\\t\\t\\t\\t\\\"Mercedes-Benz S9001\\\",\\n\\t\\t\\t\\t\\t\\\"White Ferrari\\\",\\n\\t\\t\\t\\t\\t\\\"NUKE Rootkit\\\",\\n\\t\\t\\t\\t\\t\\\"Soulstealer Rootkit\\\",\\n\\t\\t\\t\\t\\t\\\"Demon Rootkit\\\",\\n\\t\\t\\t\\t\\t\\\"Hmap Node\\\",\\n\\t\\t\\t\\t\\t\\\"Jack the Ripper\\\",\\n\\t\\t\\t\\t\\t\\\"Bionic Arms\\\",\\n\\t\\t\\t\\t\\t\\\"Bionic Legs\\\",\\n\\t\\t\\t\\t\\t\\\"Bionic Spine\\\",\\n\\t\\t\\t\\t\\t\\\"BrachiBlades\\\",\\n\\t\\t\\t\\t\\t\\\"Nanofiber Weave\\\",\\n\\t\\t\\t\\t\\t\\\"Synthetic Heart\\\",\\n\\t\\t\\t\\t\\t\\\"Synfibril Muscle\\\",\\n\\t\\t\\t\\t\\t\\\"BitWire\\\",\\n\\t\\t\\t\\t\\t\\\"Neuralstimulator\\\",\\n\\t\\t\\t\\t\\t\\\"DataJack\\\",\\n\\t\\t\\t\\t\\t\\\"Graphene Bone Lacings\\\"\\n\\t\\t\\t\\t\\t]\\n\\t*/\\n\\tconst hackingUpgrades = ['NUKE Rootkit', 'Soulstealer Rootkit', 'Demon Rootkit', 'Hmap Node', 'Jack the Ripper'];\\n\\tconst hackingAugmentations = ['BitWire', 'Neuralstimulator', 'DataJack'];\\n\\n\\tns.gang.getMemberNames().map(memberName => {\\n\\t\\tconst memberInfo = ns.gang.getMemberInformation(memberName);\\n\\t\\tconst memberHackingUpgrade = memberInfo['upgrades'];\\n\\t\\tconst memberHackingAugmentations = memberInfo['augmentations'];\\n\\n\\t\\thackingUpgrades.map(upgrade => {\\n\\t\\t\\tif (!memberHackingUpgrade.includes(upgrade) && ns.gang.getEquipmentCost(upgrade) < ns.getServerMoneyAvailable('home')) {\\n\\t\\t\\t\\tns.gang.purchaseEquipment(memberName, upgrade);\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\thackingAugmentations.map(augmentation => {\\n\\t\\t\\tif (!memberHackingAugmentations.includes(augmentation) && ns.gang.getEquipmentCost(augmentation) < ns.getServerMoneyAvailable('home')) {\\n\\t\\t\\t\\tns.gang.purchaseEquipment(memberName, augmentation);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t});\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tlet counter = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!ns.gang.inGang()) {\\n\\t\\t\\tns.print(`Not in gang. Waiting.`);\\n\\t\\t\\tawait ns.sleep(1000 * 60);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.gang.getMemberNames().map(memberName => displayMembersInformation(ns, memberName));\\n\\n\\t\\trecruitIfPossible(ns);\\n\\t\\tascendIfGainIsWorth(ns);\\n\\t\\treassignMembersAccordingToWantedLevelPenalty(ns);\\n\\t\\tbuyEquipment(ns);\\n\\n\\t\\tif (counter >= 25) {\\n\\t\\t\\tns.gang.getMemberNames().map(memberName => assignMember(ns, memberName));\\n\\t\\t\\tcounter = 0;\\n\\t\\t} else if (counter >= 23) {\\n\\t\\t\\tns.gang.getMemberNames().map(memberName => assignMember(ns, memberName, 'Ethical Hacking'));\\n\\t\\t}\\n\\n\\t\\tcounter++;\\n\\t\\tawait ns.sleep(1000 * 30);\\n\\t}\\n}\\n\",\"filename\":\"manage-gang.js\",\"server\":\"home\"}}],[\"manage-sleeves.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nasync function setSleevesTask(ns) {\\n\\tfor (var i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\tconst sleeve = ns.sleeve.getSleeve(i);\\n\\t\\tns.print(`Sleeve ${i} has:`);\\n\\t\\tns.print(`- sync=${sleeve.sync}`);\\n\\t\\tns.print(`- shock=${sleeve.shock}`);\\n\\t\\tns.print(`--------------------------------------------`);\\n\\n\\t\\tif (sleeve.sync < 100) {\\n\\t\\t\\tns.print('Synchronize');\\n\\t\\t\\tns.sleeve.setToSynchronize(i);\\n\\t\\t} else if (sleeve.shock > 0) {\\n\\t\\t\\tns.print('Shock recovery');\\n\\t\\t\\tns.sleeve.setToShockRecovery(i);\\n\\t\\t} else {\\n\\t\\t\\tns.print('Manual task');\\n\\t\\t\\t// Ref: https://github.com/danielyxie/bitburner/blob/dev/src/Enums.ts\\n\\t\\t\\t// ns.sleeve.setToCommitCrime(i, 'Assassination');\\n\\t\\t\\t// ns.sleeve.setToCommitCrime(i, 'Heist');\\n\\t\\t\\tns.sleeve.setToCommitCrime(i, 'Mug');\\n\\t\\t\\t// ns.sleeve.setToCommitCrime(i, 'Homicide');\\n\\t\\t\\t// ns.sleeve.setToUniversityCourse(i, 'Rothman University', 'Computer Science');\\n\\t\\t\\t// ns.sleeve.setToUniversityCourse(i, 'Rothman University', 'Algorithms');\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\n\\twhile (true) {\\n\\t\\tawait setSleevesTask(ns);\\n\\n\\t\\tawait ns.sleep(1000 * 15);\\n\\t}\\n}\\n\",\"filename\":\"manage-sleeves.js\",\"server\":\"home\"}}],[\"spend-hashes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nasync function spendHashesOnAction(ns, action, target, amount) {\\n\\twhile (ns.hacknet.numHashes() < ns.hacknet.hashCost(action, amount)) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\n\\tif (!ns.hacknet.spendHashes(action, target, amount)) {\\n\\t\\tns.print(`Error while executing ${action} on ${target} with n=${amount}`);\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction selectRandomServer(ns) {\\n\\tconst serversToAvoid = ['CSEC', 'I.I.I.I', 'run4theh111z', 'avmnite-02h', 'The-Cave', 'w0r1d_d43m0n'];\\n\\n\\tconst fullServerList = scanAllNetwork(ns, 'home');\\n\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-') && !serversToAvoid.includes(name));\\n\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\treturn filteredServerList[serverIndex];\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\t/*\\n\\t\\t\\t\\t\\tconst upgrades = ns.hacknet.getHashUpgrades();\\n\\n\\t\\t\\t\\t\\t[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Sell for Money\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Sell for Corporation Funds\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Reduce Minimum Security\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Increase Maximum Money\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Improve Studying\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Improve Gym Training\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Exchange for Corporation Research\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Exchange for Bladeburner Rank\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Exchange for Bladeburner SP\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Generate Coding Contract\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Company Favor\\\"\\n\\t\\t\\t\\t\\t]\\n\\t*/\\n\\n\\tconst ten_trillions = 10 * 1000 * 1000 * 1000 * 1000;  // k -> m -> g -> t\\n\\tconst low_high_hack_exp_limit = 1500;\\n\\n\\tfor (let i = 0; i < 5; i++) {\\n\\t\\tns.print(`--> Improve studying ${i+1} of 5`);\\n\\t\\tawait spendHashesOnAction(ns, 'Improve Studying', 'home', 1);\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst r = Math.random();\\n\\t\\tif (r < 0.1) {\\n\\t\\t\\tconst target = selectRandomServer(ns);\\n\\t\\t\\tconst minLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\t\\tif (minLevel > 1.0 && ns.getHackingLevel() > low_high_hack_exp_limit) {\\n\\t\\t\\t\\tawait spendHashesOnAction(ns, \\\"Reduce Minimum Security\\\", target, 1);\\n\\t\\t\\t\\tconst minLevelAfter = ns.getServerMinSecurityLevel(target);\\n\\t\\t\\t\\tns.print(`Reduced minimum security level on ${target} from ${minLevel} to ${minLevelAfter}`);\\n\\t\\t\\t}\\n\\t\\t} else if (r < 0.2) {\\n\\t\\t\\tconst target = selectRandomServer(ns);\\n\\t\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\t\\tif (maxMoney < ten_trillions && ns.getHackingLevel() > low_high_hack_exp_limit) {\\n\\t\\t\\t\\tawait spendHashesOnAction(ns, \\\"Increase Maximum Money\\\", target, 1);\\n\\t\\t\\t\\tconst maxMoneyAfter = ns.getServerMaxMoney(target);\\n\\t\\t\\t\\tns.print(`Increased maximum money on ${target} from ${ns.formatNumber(maxMoney)}\\\\$ to ${ns.formatNumber(maxMoneyAfter)}\\\\$`);\\n\\t\\t\\t}\\n\\t\\t\\t/*\\n\\t\\t\\t} else if (r < 0.3) {\\n\\t\\t\\t\\t\\t\\t\\tif (ns.bladeburner.inBladeburner()) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait spendHashesOnAction(ns, 'Exchange for Bladeburner Rank', 'home', 1);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t} else if (r < 0.4) {\\n\\t\\t\\t\\t\\t\\t\\tif (ns.bladeburner.inBladeburner()) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait spendHashesOnAction(ns, 'Exchange for Bladeburner SP', 'home', 1);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t*/\\n\\t\\t} else {\\n\\t\\t\\tawait spendHashesOnAction(ns, \\\"Sell for Money\\\", \\\"target\\\", 25);\\n\\t\\t\\tns.print(`Sold hashes for money`);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(250);\\n\\t}\\n}\\n\",\"filename\":\"spend-hashes.js\",\"server\":\"home\"}}],[\"manage-bladeburner.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction findNextAction(ns) {\\n\\tconst orderOfTypes = ['Operation', 'Contract', 'General'];\\n\\tconst targetedTasks = {\\n\\t\\t'General': ['Training'],\\n\\t\\t'Contract': ['Tracking', 'Bounty Hunter', 'Retirement'],\\n\\t\\t'Operation': ['Investigation', 'Stealth Retirement Operation', 'Assassination']\\n\\t}\\n\\n\\tconst lowStaminaTask = 'Hyperbolic Regeneration Chamber';\\n\\n\\tconst [currentStamina, maxStamina] = ns.bladeburner.getStamina();\\n\\tconst playerRank = ns.bladeburner.getRank();\\n\\n\\tif (currentStamina < 0.80 * maxStamina) {\\n\\t\\treturn {\\n\\t\\t\\t'type': 'General',\\n\\t\\t\\t'name': lowStaminaTask\\n\\t\\t};\\n\\t}\\n\\n\\t// BlackOps have a special structure\\n\\tconst nextBlackOp = ns.bladeburner.getNextBlackOp();\\n\\tif (nextBlackOp != undefined) {\\n\\n\\t\\tconst [lowerBound, _] = ns.bladeburner.getActionEstimatedSuccessChance('BlackOp', nextBlackOp['name']);\\n\\t\\tif (0.9 < lowerBound && nextBlackOp['rank'] <= playerRank) {\\n\\t\\t\\treturn {\\n\\t\\t\\t\\t'type': 'BlackOp',\\n\\t\\t\\t\\t'name': nextBlackOp['name']\\n\\t\\t\\t};\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let actionType of orderOfTypes) {\\n\\t\\tconst actionNames = targetedTasks[actionType].reverse();\\n\\t\\tfor (let actionName of actionNames) {\\n\\t\\t\\tconst [lowerBound, _] = ns.bladeburner.getActionEstimatedSuccessChance(actionType, actionName);\\n\\t\\t\\tconst countRemaining = ns.bladeburner.getActionCountRemaining(actionType, actionName);\\n\\t\\t\\tif (0.8 < lowerBound && 0 < countRemaining) {\\n\\t\\t\\t\\treturn {\\n\\t\\t\\t\\t\\t'type': actionType,\\n\\t\\t\\t\\t\\t'name': actionName\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn {\\n\\t\\t'type': 'General',\\n\\t\\t'name': 'Training'\\n\\t};\\n}\\n\\n/** @param {NS} ns */\\nfunction upgradeBladeburnerSkills(ns) {\\n\\tconst targetedSkills = [\\n\\t\\t\\\"Blade's Intuition\\\",\\n\\t\\t\\\"Cloak\\\",\\n\\t\\t\\\"Short-Circuit\\\",\\n\\t\\t\\\"Digital Observer\\\",\\n\\t\\t\\\"Tracer\\\",\\n\\t\\t\\\"Hyperdrive\\\",\\n\\t\\t\\\"Hands of Midas\\\"\\n\\t];\\n\\n\\tfor (let skill of targetedSkills) {\\n\\t\\tconst skillCost = ns.bladeburner.getSkillUpgradeCost(skill);\\n\\t\\tconst numberSkillPoints = ns.bladeburner.getSkillPoints();\\n\\t\\tif (skillCost < numberSkillPoints) {\\n\\t\\t\\tns.bladeburner.upgradeSkill(skill);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tconst ten_seconds = 10 * 1000;\\n\\n\\twhile (!ns.bladeburner.inBladeburner()) {\\n\\t\\tns.print('Not in BladeBurner');\\n\\t\\tawait ns.sleep(ten_seconds);\\n\\t}\\n\\n\\tns.print('Managing bladeburner');\\n\\n\\twhile (true) {\\n\\t\\tconst currentAction = ns.bladeburner.getCurrentAction();\\n\\n\\t\\tconst newAction = findNextAction(ns);\\n\\t\\tif (currentAction['type'] != newAction['type'] || currentAction['name'] != newAction['name']) {\\n\\t\\t\\tconst result = ns.bladeburner.startAction(newAction['type'], newAction['name']);\\n\\t\\t\\tif (!result) {\\n\\t\\t\\t\\tns.print(`Unable to start action: ${JSON.stringify(newAction)}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tupgradeBladeburnerSkills(ns);\\n\\t\\tawait ns.sleep(ten_seconds);\\n\\t}\\n}\\n\",\"filename\":\"manage-bladeburner.js\",\"server\":\"home\"}}],[\"hacking-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport function buildHackingProgramList(ns) {\\n\\treturn [\\n\\t\\t{ name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\" },\\n\\t\\t{ name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\" },\\n\\t\\t{ name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\" },\\n\\t\\t{ name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\" },\\n\\t\\t{ name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\" }\\n\\t];\\n}\\n\\n/** @param {NS} ns */\\nexport function listAvailablePrograms(ns, hackingPrograms) {\\n\\tlet availablePrograms = [];\\n\\tfor (const program of hackingPrograms) {\\n\\t\\tif (ns.fileExists(program.executableName, \\\"home\\\")) {\\n\\t\\t\\tavailablePrograms.push(program);\\n\\t\\t}\\n\\t}\\n\\treturn availablePrograms;\\n}\\n\\n/** @param {NS} ns */\\nexport function countAvailablePrograms(ns, hackingPrograms) {\\n\\tconst availablePrograms = listAvailablePrograms(ns, hackingPrograms);\\n\\treturn availablePrograms.length;\\n}\\n\",\"filename\":\"hacking-programs.js\",\"server\":\"home\"}}],[\"buy-darkweb-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const SLEEP_DELAY = 15000;  // in milliseconds\\n    const HOME_SERVER = 'home';\\n    const TOR_ROUTER_PRICE = 200000;\\n\\n    if (!ns.hasTorRouter()) {\\n        ns.print('TOR router not purchased yet');\\n    }\\n\\n    while (!ns.hasTorRouter()) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(HOME_SERVER);\\n\\n        if (TOR_ROUTER_PRICE <= moneyAvailable) {\\n            if (ns.singularity.purchaseTor()) {\\n                ns.print('TOR router purchased');\\n            }\\n        }\\n\\n        await ns.sleep(SLEEP_DELAY);\\n    }\\n\\n    while (true) {\\n        const allHackingPrograms = ns.singularity.getDarkwebPrograms();\\n        const purchasedHackingPrograms = allHackingPrograms.filter((program) => ns.fileExists(program));\\n        const hackingProgramsToPurchase = allHackingPrograms.filter((program) => !ns.fileExists(program));\\n\\n        if (purchasedHackingPrograms.length == allHackingPrograms.length) {\\n            break;\\n        }\\n\\n        for (const program of hackingProgramsToPurchase) {\\n            const programCost = ns.singularity.getDarkwebProgramCost(program);\\n            const moneyAvailable = ns.getServerMoneyAvailable(HOME_SERVER);\\n\\n            if (programCost <= moneyAvailable) {\\n                if (ns.singularity.purchaseProgram(program)) {\\n                    ns.print(`Purchased ${program}`);\\n                }\\n            }\\n        }\\n\\n        await ns.sleep(SLEEP_DELAY);\\n    }\\n}\\n\",\"filename\":\"buy-darkweb-programs.js\",\"server\":\"home\"}}],[\"manage-corporation.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Ref: https://github.com/danielyxie/bitburner/blob/dev/markdown/bitburner.corporation.md\\n    if (ns.corporation.hasCorporation()) {\\n        ns.tprint('Player has corporation');\\n    } else {\\n        ns.tprint('Player does not have corporation');\\n    }\\n\\n    const corporation = ns.corporation.getCorporation();\\n    ns.tprint(`Corporation data:\\\\n${corporation}`);\\n}\\n\",\"filename\":\"manage-corporation.js\",\"server\":\"home\"}}],[\"buy-hacknet-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tconst hacknetConstants = ns.formulas.hacknetServers.constants();\\n\\t/*\\n\\t\\t\\tns.formulas.hacknetServers.constants()\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\\"HashesPerLevel\\\":0.001,\\n\\t\\t\\t\\t\\t\\\"BaseCost\\\":50000,\\n\\t\\t\\t\\t\\t\\\"RamBaseCost\\\":200000,\\n\\t\\t\\t\\t\\t\\\"CoreBaseCost\\\":1000000,\\n\\t\\t\\t\\t\\t\\\"CacheBaseCost\\\":10000000,\\n\\t\\t\\t\\t\\t\\\"PurchaseMult\\\":3.2,\\n\\t\\t\\t\\t\\t\\\"UpgradeLevelMult\\\":1.1,\\n\\t\\t\\t\\t\\t\\\"UpgradeRamMult\\\":1.4,\\n\\t\\t\\t\\t\\t\\\"UpgradeCoreMult\\\":1.55,\\n\\t\\t\\t\\t\\t\\\"UpgradeCacheMult\\\":1.85,\\n\\t\\t\\t\\t\\t\\\"MaxServers\\\":20,\\n\\t\\t\\t\\t\\t\\\"MaxLevel\\\":300,\\n\\t\\t\\t\\t\\t\\\"MaxRam\\\":8192,\\n\\t\\t\\t\\t\\t\\\"MaxCores\\\":128,\\n\\t\\t\\t\\t\\t\\\"MaxCache\\\":15\\n\\t\\t\\t}\\n\\t*/\\n\\tconst targetCount = hacknetConstants['MaxServers'];\\n\\tconst targetLevel = hacknetConstants['MaxLevel'];\\n\\tconst targetRam = hacknetConstants['MaxRam'];\\n\\tconst targetCore = hacknetConstants['MaxCores'];\\n\\tconst targetCache = hacknetConstants['MaxCache'];\\n\\n\\twhile (true) {\\n\\t\\tif (ns.hacknet.numNodes() < targetCount) {\\n\\t\\t\\tconst cost = ns.hacknet.getPurchaseNodeCost();\\n\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n\\t\\t\\t\\tns.hacknet.purchaseNode();\\n\\t\\t\\t\\tns.print('Bought net node');\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\tif (ns.hacknet.getNodeStats(i).level < targetLevel) {\\n\\t\\t\\t\\tconst cost = ns.hacknet.getLevelUpgradeCost(i, 1);\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeLevel(i, 1);\\n\\t\\t\\t\\t\\tconst newLevel = ns.hacknet.getNodeStats(i).level;\\n\\t\\t\\t\\t\\tns.print(`Upgrading node ${i} to level ${newLevel}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\tif (ns.hacknet.getNodeStats(i).ram < targetRam) {\\n\\t\\t\\t\\tconst cost = ns.hacknet.getRamUpgradeCost(i, 1);\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeRam(i, 1);\\n\\t\\t\\t\\t\\tconst newLevel = ns.hacknet.getNodeStats(i).ram;\\n\\t\\t\\t\\t\\tns.print(`Upgrading node ${i} to ram ${newLevel}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\tif (ns.hacknet.getNodeStats(i).cores < targetCore) {\\n\\t\\t\\t\\tconst cost = ns.hacknet.getCoreUpgradeCost(i, 1);\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeCore(i, 1);\\n\\t\\t\\t\\t\\tconst newLevel = ns.hacknet.getNodeStats(i).cores;\\n\\t\\t\\t\\t\\tns.print(`Upgrading node ${i} to cores ${newLevel}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\tif (ns.hacknet.getNodeStats(i).cache < targetCache) {\\n\\t\\t\\t\\tconst cost = ns.hacknet.getCacheUpgradeCost(i, 1);\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeCache(i, 1);\\n\\t\\t\\t\\t\\tconst newLevel = ns.hacknet.getNodeStats(i).cache;\\n\\t\\t\\t\\t\\tns.print(`Upgrading node ${i} to cache ${newLevel}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tlet countCompletelyUpgraded = 0;\\n\\t\\tif (ns.hacknet.numNodes() == targetCount) {\\n\\t\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\t\\tconst nodeStats = ns.hacknet.getNodeStats(i);\\n\\t\\t\\t\\tconst allLevelUpgraded = nodeStats.level == targetLevel;\\n\\t\\t\\t\\tconst allRamUpgraded = nodeStats.ram == targetRam;\\n\\t\\t\\t\\tconst allCoreUpgraded = nodeStats.cores == targetCore;\\n\\t\\t\\t\\tconst allCacheUpgraded = nodeStats.cache == targetCache;\\n\\n\\n\\t\\t\\t\\tif (allLevelUpgraded && allRamUpgraded && allCoreUpgraded && allCacheUpgraded) {\\n\\t\\t\\t\\t\\tcountCompletelyUpgraded++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (countCompletelyUpgraded == targetCount) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500);\\n\\t}\\n}\",\"filename\":\"buy-hacknet-servers.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"hacknet-server-0\",\"neighbor-0\",\"hacknet-server-1\",\"neighbor-1\",\"neighbor-2\",\"hacknet-server-2\",\"darkweb\",\"neighbor-3\",\"hacknet-server-3\",\"neighbor-4\",\"neighbor-5\",\"hacknet-server-4\",\"neighbor-6\",\"neighbor-7\",\"neighbor-8\",\"neighbor-9\",\"neighbor-10\",\"neighbor-11\",\"neighbor-12\",\"neighbor-13\",\"neighbor-14\",\"neighbor-15\",\"neighbor-16\",\"neighbor-17\",\"neighbor-18\",\"neighbor-19\",\"hacknet-server-5\",\"hacknet-server-6\",\"hacknet-server-7\",\"hacknet-server-8\",\"hacknet-server-9\",\"hacknet-server-10\",\"hacknet-server-11\",\"hacknet-server-12\",\"hacknet-server-13\",\"hacknet-server-14\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.032,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"launch-hacking.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.00899999999,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17489.210000028557,\"ramUsage\":11.2,\"server\":\"home\",\"scriptKey\":\"launch-hacking.js*[]\",\"title\":\"launch-hacking.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"spend-hashes.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.027,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17489.010000028557,\"ramUsage\":6.05,\"server\":\"home\",\"scriptKey\":\"spend-hashes.js*[]\",\"title\":\"spend-hashes.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-sleeves.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.037,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17488.010000028553,\"ramUsage\":21.6,\"server\":\"home\",\"scriptKey\":\"manage-sleeves.js*[]\",\"title\":\"manage-sleeves.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-gang.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.065,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17487.810000028552,\"ramUsage\":24.7,\"server\":\"home\",\"scriptKey\":\"manage-gang.js*[]\",\"title\":\"manage-gang.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"max-hardware\":[0,0,11,11],\".\":[0,0,0,11],\"netlink\":[0,0,0,11],\"avmnite-02h\":[0,0,33,11],\"n00dles\":[137463.4182269365,11,0,11],\"silver-helix\":[0,0,0,11],\"johnson-ortho\":[0,0,11,0],\"computek\":[233940445.18193,11,11,0],\"vitalife\":[0,0,0,11],\"I.I.I.I\":[0,0,0,11],\"hong-fang-tea\":[5341206.2763243215,11,0,22],\"syscore\":[0,0,11,22],\"zb-def\":[0,0,0,11],\"stormtech\":[0,0,0,11],\"univ-energy\":[0,0,0,11],\"run4theh111z\":[0,0,22,0],\"unitalife\":[0,0,11,0],\"omega-net\":[0,0,11,0],\"the-hub\":[0,0,0,11],\"nova-med\":[0,0,0,11],\"rothman-uni\":[0,0,11,0],\"zer0\":[0,0,0,11],\"lexo-corp\":[0,0,0,22],\"harakiri-sushi\":[0,0,11,0],\"nectar-net\":[0,0,11,0],\"zb-institute\":[0,0,0,11],\"snap-fitness\":[0,11,0,0],\"titan-labs\":[298593500.5573288,11,0,0],\"microdyne\":[0,0,11,0],\"solaris\":[0,0,11,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":143944.05475921158,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.119,\"onlineExpGained\":32135.718512785243,\"onlineMoneyMade\":538012615.43381,\"onlineRunningTime\":15877.21000002269,\"ramUsage\":3.1,\"server\":\"home\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":11,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"26.9.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"ecorp\"}}]]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":36003704448.76402,\"moneyMax\":709716881337.7338,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1102,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"23.6.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"megacorp\"}}]]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":38754685603.902054,\"moneyMax\":763945128012.2357,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1209,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-647944-BitRunners.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((((()()(a\",\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"2.8.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"b-and-a\"}}]]},\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":41.75,\"minDifficulty\":40,\"moneyAvailable\":0,\"moneyMax\":320059094871.7201,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1058,\"serverGrowth\":68,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"30.9.3.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"blade\"}}]]},\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":47,\"moneyAvailable\":26472355206.193504,\"moneyMax\":521831785541.4276,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1127,\"serverGrowth\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":31642.532,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1723.4100000002547,\"ramUsage\":2.45,\"server\":\"blade\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":208,\"temporary\":false}}]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-80870.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":514786201,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-181917-NiteSec.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,1,0],[0,0,0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"91.2.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"nwo\"}}]]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":29994287273.998196,\"moneyMax\":591257270549.5824,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1162,\"serverGrowth\":69,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-680901.cct\",\"type\":\"Array Jumping Game II\",\"data\":[0,5,2,2,1,2,4,5,1,4,4,1,1,2,2,3,4,4,3,2,1,3,1],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-52852.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"59.5.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"clarkinc\"}}]]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":14695474648.372236,\"moneyMax\":289682036804.36865,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1197,\"serverGrowth\":58,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-683269-BitRunners.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"JBY0L3WfUCEQ5ZA1yWEvmPp3wjrKGD1DRGRG1yDcIyG1yDcI07yG1yDcIpNyw0tYw0tYw0tYLMdYOj6RTeqxh6eqxh6\",\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"14.7.4.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"omnitek\"}}]]},\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":46,\"moneyAvailable\":12220360460.006641,\"moneyMax\":240891770646.57864,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1076,\"serverGrowth\":97,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":72090.319,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3945.809999998605,\"ramUsage\":2.45,\"server\":\"omnitek\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"69.6.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"4sigma\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"blade\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":94.5,\"hackDifficulty\":94.5,\"minDifficulty\":32,\"moneyAvailable\":15526278465.528757,\"moneyMax\":306059115306.24634,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1080,\"serverGrowth\":95,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"85.0.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"kuai-gong\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":49,\"moneyAvailable\":18477246783.27838,\"moneyMax\":364229574803.8278,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1234,\"serverGrowth\":98,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-332570.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[43,44,27,29,40,23,11,5,27,11,23,37,41,6,32],[39,29,49,23,32,44,41,5,9,37,22,17,9,40,21],[42,16,36,6,2,28,23,35,6,15,50,9,28,16,50],[29,21,30,13,38,11,1,7,24,26,4,5,45,28,15],[38,50,10,33,39,38,44,4,35,32,49,33,12,22,23],[6,20,10,50,27,37,41,37,37,38,32,41,46,29,18],[50,39,33,29,49,42,14,17,23,22,23,39,7,34,49],[41,31,42,25,17,37,5,10,44,23,20,24,4,42,21]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"74.1.9.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"fulcrumtech\"}}]]},\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":48,\"moneyAvailable\":3064272469.9237967,\"moneyMax\":22571813626.453312,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1179,\"serverGrowth\":80,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"fulcrumtech\":[0,0,208,0]},\"filename\":\"hack-server.js\",\"offlineExpGained\":53885.76136923118,\"offlineMoneyMade\":0,\"offlineRunningTime\":31642.538999999997,\"onlineExpGained\":24522.533066713127,\"onlineMoneyMade\":0,\"onlineRunningTime\":2110.6100000002716,\"ramUsage\":2.45,\"server\":\"fulcrumtech\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":208,\"temporary\":false}}]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-444869.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"g6uvg6g6uvg6gpgpgpgpgp1E51E51E51WDrOZnp7PMMJZnTDMa4UFUwRRR\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"54.4.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"fulcrumassets\"}}]]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":788493.175581656,\"moneyMax\":15543037.19847111,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1207,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"84.2.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"stormtech\"}}]]},\"serversOnNetwork\":[\"titan-labs\",\"4sigma\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":45.284,\"minDifficulty\":44,\"moneyAvailable\":0,\"moneyMax\":16084554469.52671,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":969,\"serverGrowth\":75,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-311971.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9mgAN5otbj05q2CKD1284yTUJf3e5573e3JM0c6395u6QHcG8q120593Y6P\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"47.4.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"defcomm\"}}]]},\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":43,\"minDifficulty\":43,\"moneyAvailable\":10228820927.331583,\"moneyMax\":13256216123.418251,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":977,\"serverGrowth\":69,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-437854.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,1,1,0],[0,0,0,0,0,1,0,0,0],[0,0,0,1,0,0,0,0,1],[0,0,0,0,0,1,0,1,0],[0,1,0,0,1,0,1,0,0],[0,1,0,1,1,0,0,0,1],[0,0,0,0,0,1,0,1,0],[0,0,0,1,1,0,0,0,0],[0,0,1,1,1,0,0,0,0],[0,1,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-639916.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":497943643,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"62.2.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"infocomm\"}}]]},\"serversOnNetwork\":[\"defcomm\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":42.124,\"minDifficulty\":41,\"moneyAvailable\":0,\"moneyMax\":11710862224.277355,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":946,\"serverGrowth\":48,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-437911-BitRunners.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,10],\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-26535-NiteSec.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":535051131824431,\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-44973-NiteSec.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,6,-7,1,-6,2,7,-9,-7,6],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"74.8.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"helios\"}}]]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":45,\"moneyAvailable\":10553409951.515455,\"moneyMax\":10553409951.515455,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":863,\"serverGrowth\":77,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"helios\":[4316775826.946471,338,208,26]},\"filename\":\"hack-server.js\",\"offlineExpGained\":322349.7122819923,\"offlineMoneyMade\":0,\"offlineRunningTime\":72090.329,\"onlineExpGained\":74333.92835847416,\"onlineMoneyMade\":4316775826.946471,\"onlineRunningTime\":11891.61000000819,\"ramUsage\":2.45,\"server\":\"helios\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"78.0.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"vitalife\"}}]]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":40.775999999999996,\"minDifficulty\":40,\"moneyAvailable\":1600.6426104161387,\"moneyMax\":10996149977.731794,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":785,\"serverGrowth\":68,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"vitalife\":[8159484630.02249,598,312,52]},\"filename\":\"hack-server.js\",\"offlineExpGained\":537191.0654317017,\"offlineMoneyMade\":0,\"offlineRunningTime\":72090.332,\"onlineExpGained\":117248.36122522216,\"onlineMoneyMade\":8159484630.02249,\"onlineRunningTime\":14140.610000016371,\"ramUsage\":2.45,\"server\":\"vitalife\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"45.7.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"icarus\"}}]]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":48,\"minDifficulty\":48,\"moneyAvailable\":14092430654.285913,\"moneyMax\":14092430654.285913,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":916,\"serverGrowth\":85,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"72.6.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":43.052,\"minDifficulty\":43,\"moneyAvailable\":4140718.1122293165,\"moneyMax\":18144513368.191246,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":864,\"serverGrowth\":85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"univ-energy\":[2485077494.5451655,130,169,13]},\"filename\":\"hack-server.js\",\"offlineExpGained\":163093.09645941522,\"offlineMoneyMade\":0,\"offlineRunningTime\":72090.33499999999,\"onlineExpGained\":37550.128758404484,\"onlineMoneyMade\":2485077494.5451655,\"onlineRunningTime\":13672.610000014669,\"ramUsage\":2.45,\"server\":\"univ-energy\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"17.0.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"titan-labs\"}}]]},\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":91.30000000000001,\"minDifficulty\":37,\"moneyAvailable\":12087365581.929373,\"moneyMax\":12087365581.929373,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":852,\"serverGrowth\":70,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"titan-labs\":[587940921.8895729,26,195,26]},\"filename\":\"hack-server.js\",\"offlineExpGained\":121734.08944219633,\"offlineMoneyMade\":0,\"offlineRunningTime\":72090.339,\"onlineExpGained\":29503.672595889235,\"onlineMoneyMade\":587940921.8895729,\"onlineRunningTime\":12369.410000009928,\"ramUsage\":2.45,\"server\":\"titan-labs\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"71.8.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"microdyne\"}}]]},\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":34.382000000000005,\"minDifficulty\":34,\"moneyAvailable\":4694254849.29787,\"moneyMax\":9441347015.52987,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":819,\"serverGrowth\":70,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"microdyne\":[5232994283.241537,351,78,52]},\"filename\":\"hack-server.js\",\"offlineExpGained\":244639.66903603886,\"offlineMoneyMade\":0,\"offlineRunningTime\":72090.342,\"onlineExpGained\":57091.52229594151,\"onlineMoneyMade\":5232994283.241537,\"onlineRunningTime\":12010.610000008623,\"ramUsage\":2.45,\"server\":\"microdyne\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"12.8.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"taiyang-digital\"}}]]},\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":36,\"minDifficulty\":36,\"moneyAvailable\":13240309254.805038,\"moneyMax\":13240309254.805038,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":889,\"serverGrowth\":73,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"95.3.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"galactic-cyber\"}}]]},\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":87,\"hackDifficulty\":69.048,\"minDifficulty\":29,\"moneyAvailable\":11795219478.527882,\"moneyMax\":11795219478.527882,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":872,\"serverGrowth\":76,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"76.0.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"aerocorp\"}}]]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":73.50662930045632,\"minDifficulty\":43,\"moneyAvailable\":17801432498.744804,\"moneyMax\":17801432498.744804,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":913,\"serverGrowth\":61,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-383110.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"LOGIC MODEM FLASH DEBUG INBOX\",16],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"71.8.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":47.036,\"minDifficulty\":47,\"moneyAvailable\":14747207880.690666,\"moneyMax\":15274357133.307861,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":881,\"serverGrowth\":62,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"omnia\":[1374971320.0812175,72,66,6]},\"filename\":\"hack-server.js\",\"offlineExpGained\":62166.04366296604,\"offlineMoneyMade\":0,\"offlineRunningTime\":72090.345,\"onlineExpGained\":16623.447896185346,\"onlineMoneyMade\":1374971320.0812175,\"onlineRunningTime\":13794.410000015112,\"ramUsage\":2.45,\"server\":\"omnia\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"89.5.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"zb-def\"}}]]},\"serversOnNetwork\":[\"solaris\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":94.5,\"hackDifficulty\":32.66,\"minDifficulty\":32,\"moneyAvailable\":2745467781.8005557,\"moneyMax\":15365950355.267914,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":804,\"serverGrowth\":66,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-312613.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,6],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-932080.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()()a)()()\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"56.7.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"applied-energetics\"}}]]},\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":90,\"hackDifficulty\":30,\"minDifficulty\":30,\"moneyAvailable\":20479479.843493134,\"moneyMax\":11516207692.307177,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":810,\"serverGrowth\":74,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"5.3.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"deltaone\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":37.068,\"minDifficulty\":37,\"moneyAvailable\":2654872983.735696,\"moneyMax\":13807979131.449526,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":834,\"serverGrowth\":74,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"solaris\":[0,0,96,18]},\"filename\":\"hack-server.js\",\"offlineExpGained\":55796.374831497844,\"offlineMoneyMade\":0,\"offlineRunningTime\":72090.351,\"onlineExpGained\":13440.234469256235,\"onlineMoneyMade\":0,\"onlineRunningTime\":12693.610000011107,\"ramUsage\":2.45,\"server\":\"solaris\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-754417.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[185,190,104,193,39],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-98105.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"CLOUDVIRUSQUEUEMOUSEFRAME\",\"SECURITY\"],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"0.1.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"deltaone\"}}]]},\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"icarus\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":42.687999999999995,\"minDifficulty\":40,\"moneyAvailable\":971.9616406414968,\"moneyMax\":26346762417.263145,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":842,\"serverGrowth\":60,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"95.9.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"lexo-corp\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":38.052,\"minDifficulty\":38,\"moneyAvailable\":1235.2050283179683,\"moneyMax\":24000806582.659653,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":775,\"serverGrowth\":85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"global-pharm\":[13438151321.423157,364,156,13]},\"filename\":\"hack-server.js\",\"offlineExpGained\":300129.24222463905,\"offlineMoneyMade\":0,\"offlineRunningTime\":72090.361,\"onlineExpGained\":65137.97845845675,\"onlineMoneyMade\":13438151321.423157,\"onlineRunningTime\":13919.210000015566,\"ramUsage\":2.45,\"server\":\"global-pharm\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-865514.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a))a(()))()((a(((()\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-178003.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[8,2],[5,1,9],[1,5,6,6],[8,8,2,8,5]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-847512.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"MODEM DEBUG MOUSE EMAIL ENTER\",6],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"78.5.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"nova-med\"}}]]},\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":90,\"hackDifficulty\":30,\"minDifficulty\":30,\"moneyAvailable\":17660785062.810448,\"moneyMax\":17660785062.810448,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":813,\"serverGrowth\":70,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-775688.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,13],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"95.0.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"zeus-med\"}}]]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":37.33,\"minDifficulty\":37,\"moneyAvailable\":12460618445.928713,\"moneyMax\":23099011796.774635,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":803,\"serverGrowth\":74,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-12833.cct\",\"type\":\"Array Jumping Game II\",\"data\":[3,3,2,2,1,1,3,1,2],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"68.5.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":58.808,\"minDifficulty\":35,\"moneyAvailable\":16182080033.580378,\"moneyMax\":16182080033.580378,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":775,\"serverGrowth\":79,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"unitalife\":[9313737982.194033,351,195,26]},\"filename\":\"hack-server.js\",\"offlineExpGained\":305415.3491743633,\"offlineMoneyMade\":0,\"offlineRunningTime\":72090.365,\"onlineExpGained\":67053.80135429373,\"onlineMoneyMade\":9313737982.194033,\"onlineRunningTime\":13153.810000012782,\"ramUsage\":2.45,\"server\":\"unitalife\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-810586.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,1,0],[0,0,0,0,0,1,0,0,0,0],[0,1,0,0,0,0,0,0,1,1],[0,1,0,0,0,0,0,0,1,1],[0,0,0,0,1,0,1,0,0,1],[0,1,0,0,0,0,0,0,1,0]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-389892-BitRunners.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[5,3],[1,4,1],[1,4,4,1],[2,2,8,4,9]],\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"45.8.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":40.382000000000005,\"minDifficulty\":40,\"moneyAvailable\":5767986967.105594,\"moneyMax\":12224109710.475115,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":750,\"serverGrowth\":55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"lexo-corp\":[2574942544.582967,117,182,26]},\"filename\":\"hack-server.js\",\"offlineExpGained\":154951.6797145508,\"offlineMoneyMade\":0,\"offlineRunningTime\":72090.37,\"onlineExpGained\":38316.457916739266,\"onlineMoneyMade\":2574942544.582967,\"onlineRunningTime\":14031.410000015974,\"ramUsage\":2.45,\"server\":\"lexo-corp\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"54.5.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":90,\"hackDifficulty\":30.072000000000003,\"minDifficulty\":30,\"moneyAvailable\":8897563680.677252,\"moneyMax\":9355026333.734358,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":522,\"serverGrowth\":53,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"rho-construction\":[7921329358.241794,246,114,102]},\"filename\":\"hack-server.js\",\"offlineExpGained\":215067.0124528336,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.189,\"onlineExpGained\":49516.65330778616,\"onlineMoneyMade\":7921329358.241794,\"onlineRunningTime\":16264.410000024098,\"ramUsage\":2.45,\"server\":\"rho-construction\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-536428.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"21714021927\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"32.6.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":97.5,\"hackDifficulty\":33.104000000000006,\"minDifficulty\":33,\"moneyAvailable\":9146954750.153543,\"moneyMax\":10210952948.496088,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":571,\"serverGrowth\":50,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"alpha-ent\":[6940045384.385777,208,416,104]},\"filename\":\"hack-server.js\",\"offlineExpGained\":356380.5733753046,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.196,\"onlineExpGained\":84252.66598737547,\"onlineMoneyMade\":6940045384.385777,\"onlineRunningTime\":16041.810000023288,\"ramUsage\":2.45,\"server\":\"alpha-ent\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"41.6.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":70.56884831795463,\"minDifficulty\":35,\"moneyAvailable\":5697766945.457696,\"moneyMax\":6074232817.094728,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":419,\"serverGrowth\":39,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[10367458545.309368,611,364,130]},\"filename\":\"hack-server.js\",\"offlineExpGained\":590496.4553708967,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.2,\"onlineExpGained\":130275.95691691322,\"onlineMoneyMade\":10367458545.309368,\"onlineRunningTime\":16551.610000025143,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-290144.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"MODEMPOPUPEMAILENTERPASTE\",\"BROADBAND\"],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"56.9.3.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":82.5,\"hackDifficulty\":28.727999999999994,\"minDifficulty\":28,\"moneyAvailable\":2805111886.6320295,\"moneyMax\":3667025494.4197283,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":381,\"serverGrowth\":41,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"rothman-uni\":[14243201245.789038,1456,2548,832]},\"filename\":\"hack-server.js\",\"offlineExpGained\":2096832.1271114626,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.20499999999,\"onlineExpGained\":480732.214280835,\"onlineMoneyMade\":14243201245.789038,\"onlineRunningTime\":16657.210000025527,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"25.5.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":87.81561619685792,\"minDifficulty\":41,\"moneyAvailable\":15546677020.293137,\"moneyMax\":15546677020.293137,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":741,\"serverGrowth\":84,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"zb-institute\":[3373951381.0718164,132,48,12]},\"filename\":\"hack-server.js\",\"offlineExpGained\":108139.35861395829,\"offlineMoneyMade\":0,\"offlineRunningTime\":72090.388,\"onlineExpGained\":22989.87475004357,\"onlineMoneyMade\":3373951381.0718164,\"onlineRunningTime\":13336.610000013447,\"ramUsage\":2.45,\"server\":\"zb-institute\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-594694.cct\",\"type\":\"Array Jumping Game II\",\"data\":[4,1,3,0,3,3,5,3,5,3,0,0,2,0,0,6,2],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-241016.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0],[0,1,0,0,1,1,0,1],[0,1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,1,1,1,0,0,0],[0,0,1,0,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"40.7.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":85.5,\"hackDifficulty\":77.154,\"minDifficulty\":29,\"moneyAvailable\":4702148517.494255,\"moneyMax\":4812332624.43119,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":472,\"serverGrowth\":58,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[10897728847.00152,702,468,143]},\"filename\":\"hack-server.js\",\"offlineExpGained\":590985.050171256,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.215,\"onlineExpGained\":134393.23448578472,\"onlineMoneyMade\":10897728847.00152,\"onlineRunningTime\":16459.610000024808,\"ramUsage\":2.45,\"server\":\"summit-uni\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"9.6.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"syscore\"}}]]},\"serversOnNetwork\":[\"computek\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":39.193314650228174,\"minDifficulty\":35,\"moneyAvailable\":7210448078.583018,\"moneyMax\":7210448078.583018,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":580,\"serverGrowth\":69,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-393404.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,0,0,0,8,4,10,0,4,7,4,0,0,7,8,0,7,0],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"93.8.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"netlink\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":38.463999999999984,\"minDifficulty\":35,\"moneyAvailable\":2577664722.4609528,\"moneyMax\":8140706564.257964,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":413,\"serverGrowth\":50,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[15789677936.510828,676,416,143]},\"filename\":\"hack-server.js\",\"offlineExpGained\":635729.6474026798,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.221,\"onlineExpGained\":145602.540083609,\"onlineMoneyMade\":15789677936.510828,\"onlineRunningTime\":16863.610000026278,\"ramUsage\":2.45,\"server\":\"catalyst\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-200626-BitRunners.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[12,22],[6,13],[15,17],[19,28]],\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"86.4.2.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":54,\"hackDifficulty\":18,\"minDifficulty\":18,\"moneyAvailable\":98457525.8971431,\"moneyMax\":2488561304.6489263,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":313,\"serverGrowth\":50,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"the-hub\":[1752296191.2545424,144,510,210]},\"filename\":\"hack-server.js\",\"offlineExpGained\":251298.37552900665,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.225,\"onlineExpGained\":58956.97110724469,\"onlineMoneyMade\":1752296191.2545424,\"onlineRunningTime\":16818.410000026113,\"ramUsage\":2.45,\"server\":\"the-hub\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"22.0.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":88.5,\"hackDifficulty\":32.418,\"minDifficulty\":30,\"moneyAvailable\":709.507984324552,\"moneyMax\":3571371467.4751296,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":379,\"serverGrowth\":54,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-154684.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[8,1],[9,8,6],[8,9,6,8],[7,3,5,5,4],[4,8,7,7,5,6],[3,9,8,6,9,1,2],[7,6,7,4,2,8,4,5],[9,4,7,9,3,4,3,5,4],[8,3,5,8,5,3,3,5,9,1],[1,6,6,1,2,2,7,3,3,9,5]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"41.2.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":56.903999999999996,\"minDifficulty\":35,\"moneyAvailable\":266133659.59045163,\"moneyMax\":4274335229.5795555,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":391,\"serverGrowth\":59,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[8621009451.506012,663,572,52]},\"filename\":\"hack-server.js\",\"offlineExpGained\":655610.1381149432,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.23,\"onlineExpGained\":151733.1733502873,\"onlineMoneyMade\":8621009451.506012,\"onlineRunningTime\":16974.610000026685,\"ramUsage\":2.45,\"server\":\"netlink\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-663186-NiteSec.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,1,0,1,0,0],[1,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,1],[0,0,0,0,1,1,0,0],[0,0,0,1,0,1,0,0],[0,0,1,0,0,0,1,0],[1,0,0,0,1,0,0,0],[0,1,1,1,0,0,0,1],[0,0,0,0,0,0,1,0],[0,1,0,0,0,0,1,0],[0,0,0,0,0,0,0,1],[0,0,0,0,0,1,0,0]],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-378002.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[197,68,28,81,40],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"87.6.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"zb-institute\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":91.5,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":1180.5308609297124,\"moneyMax\":1200377229.9043226,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":273,\"serverGrowth\":39,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-849093-BitRunners.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[12,[[1,8],[1,5],[1,11],[0,7],[3,4],[2,4],[10,11],[1,6],[8,11],[7,9],[5,7],[0,10],[3,6],[2,9],[2,5],[1,9],[6,10],[8,10]]],\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"9.2.0.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1.5,\"hackDifficulty\":1.0183287534300902,\"minDifficulty\":1,\"moneyAvailable\":1023163.2338532616,\"moneyMax\":1088012.6038929778,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[98907807.35960574,7667,2307,637]},\"filename\":\"hack-server.js\",\"offlineExpGained\":551078.2203590941,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.234,\"onlineExpGained\":130703.46676733904,\"onlineMoneyMade\":98907807.35960574,\"onlineRunningTime\":17484.41000002854,\"ramUsage\":2.45,\"server\":\"n00dles\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":1,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-820015.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[9,6],[3,7,4],[1,1,6,6],[5,1,1,8,1],[1,5,6,8,5,2],[9,6,8,4,2,8,4],[2,8,9,3,8,7,1,4],[4,7,7,2,6,4,4,9,7],[3,9,6,3,8,5,4,6,6,4]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"50.2.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5.864164331278526,\"minDifficulty\":5,\"moneyAvailable\":28885837.269790657,\"moneyMax\":31086074.39694222,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[17418175.883492205,60,30756,102]},\"filename\":\"hack-server.js\",\"offlineExpGained\":3511120.5335774114,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.239,\"onlineExpGained\":828439.332776039,\"onlineMoneyMade\":17418175.883492205,\"onlineRunningTime\":17479.21000002852,\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-369349.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[5,-3,2,-7,7,1,8,-6,10,-5,-10,3,-2,-2,8,2,-2,10,10,8,0],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"0.2.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":9.647999999999943,\"minDifficulty\":5,\"moneyAvailable\":1597.538131680775,\"moneyMax\":35748985.55648355,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"sigma-cosmetics\":[88613372.89483419,282,24660,576]},\"filename\":\"hack-server.js\",\"offlineExpGained\":2882233.8031160836,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.242,\"onlineExpGained\":683747.8133701716,\"onlineMoneyMade\":88613372.89483419,\"onlineRunningTime\":17473.2100000285,\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-108835.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,1,0,0,0,0],[1,1,1,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,1,0,1],[1,0,0,1,1,0,0,0,1,1,0,0],[0,0,1,1,0,1,1,0,0,1,1,0],[0,0,1,1,0,1,0,0,0,0,1,0],[0,1,1,0,0,1,0,0,0,0,0,0],[1,0,1,1,0,0,0,1,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"68.1.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":11.741999999999873,\"minDifficulty\":8,\"moneyAvailable\":1452.2132393759941,\"moneyMax\":38857592.99617778,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"joesguns\":[629358309.1100444,1962,20010,1560]},\"filename\":\"hack-server.js\",\"offlineExpGained\":3472731.5672584623,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.25200000001,\"onlineExpGained\":819693.534269811,\"onlineMoneyMade\":629358309.1100444,\"onlineRunningTime\":17464.610000028468,\"ramUsage\":2.45,\"server\":\"joesguns\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-124559-NiteSec.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[24,34,8,9,47,8,21,3,16,47,36,42,29,17,4],[31,8,40,24,4,14,48,30,5,4,22,14,15,4,6],[50,30,7,31,49,42,31,17,13,15,35,14,16,34,22],[38,37,2,8,44,30,47,23,6,2,39,49,41,27,25],[34,27,8,36,16,7,42,34,25,26,37,34,9,8,37],[38,49,6,2,11,8,4,37,22,47,19,49,35,44,42],[3,38,30,20,39,19,11,35,29,16,37,35,6,5,16],[23,1,40,40,11,35,50,50,15,30,16,39,32,42,2],[28,4,43,42,1,22,17,12,20,46,15,24,41,18,12],[44,35,12,10,43,4,17,4,49,36,12,40,13,12,39],[16,8,46,43,46,7,39,41,9,13,3,37,40,49,14],[46,48,20,8,21,49,12,21,10,5,37,19,38,10,44],[5,16,3,10,25,42,50,23,40,29,29,44,16,41,46],[2,33,41,47,10,26,43,15,25,35,37,12,44,50,11],[48,27,48,26,40,46,21,10,22,6,8,46,33,6,5]],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"27.6.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":13.470438307615758,\"minDifficulty\":13,\"moneyAvailable\":104518827.86356372,\"moneyMax\":116572778.98853333,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"zer0\":[1414979598.1807847,1456,9178,936]},\"filename\":\"hack-server.js\",\"offlineExpGained\":2417953.77893141,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.256,\"onlineExpGained\":589028.4576109623,\"onlineMoneyMade\":1414979598.1807847,\"onlineRunningTime\":17332.410000027987,\"ramUsage\":2.45,\"server\":\"zer0\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-837762-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[72,22,103,63,111,137],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-508731-BitRunners.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":121,\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-979694.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"EMAILQUEUEDEBUGFRAMEPRINT\",\"SECURITY\"],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"83.0.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"neo-net\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":12.66799999999991,\"minDifficulty\":10,\"moneyAvailable\":897.5528601407428,\"moneyMax\":42743352.29579555,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"nectar-net\":[257034910.3141656,660,12618,768]},\"filename\":\"hack-server.js\",\"offlineExpGained\":2500101.6778781507,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.26500000001,\"onlineExpGained\":602173.9500962415,\"onlineMoneyMade\":257034910.3141656,\"onlineRunningTime\":17439.810000028378,\"ramUsage\":2.45,\"server\":\"nectar-net\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-204769.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[1,6],[4,2,5],[4,8,8,3],[2,9,2,1,3],[2,2,1,6,6,4],[1,4,3,9,6,5,5],[5,2,3,8,6,7,7,5],[1,3,7,1,7,9,6,7,7],[6,4,1,9,4,4,8,1,1,4],[6,7,7,3,8,9,3,1,8,2,9],[6,2,3,1,6,4,5,3,8,6,8,1]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-605651-NiteSec.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[13,49,35,46,33,27,50,18,34,2,13,21,26,23,29],[12,25,6,15,12,5,14,16,30,3,38,35,28,34,50],[2,44,41,41,7,25,14,16,31,28,41,38,38,19,8],[38,30,26,18,30,2,35,49,25,32,3,45,41,38,47],[49,35,14,20,45,38,13,49,11,28,42,17,22,13,47],[28,9,26,14,18,22,44,9,7,12,6,4,25,3,50],[37,2,19,9,39,2,22,6,45,3,15,40,17,7,29],[14,25,41,50,33,21,41,29,2,36,17,5,48,23,40]],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"58.5.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":13.359397179359602,\"minDifficulty\":13,\"moneyAvailable\":15095710.656056847,\"moneyMax\":77715185.99235556,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"neo-net\":[27267854.21963385,65,9815,78]},\"filename\":\"hack-server.js\",\"offlineExpGained\":2021463.4440481085,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.27,\"onlineExpGained\":506961.5713820241,\"onlineMoneyMade\":27267854.21963385,\"onlineRunningTime\":17383.410000028172,\"ramUsage\":2.45,\"server\":\"neo-net\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-181086.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"335038\",42],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-334402-BitRunners.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((())()(\",\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"68.6.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":16.933999999999987,\"minDifficulty\":15,\"moneyAvailable\":520.1624359303174,\"moneyMax\":699436673.9311999,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"silver-helix\":[1798679685.9527414,676,8112,156]},\"filename\":\"hack-server.js\",\"offlineExpGained\":2138123.6728299484,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.282,\"onlineExpGained\":527234.4609343339,\"onlineMoneyMade\":1798679685.9527414,\"onlineRunningTime\":17240.810000027654,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"93.0.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":10.401999999999921,\"minDifficulty\":8,\"moneyAvailable\":763.8424869945926,\"moneyMax\":46629111.59541333,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"hong-fang-tea\":[301195959.4239286,780,12330,552]},\"filename\":\"hack-server.js\",\"offlineExpGained\":2035772.920071902,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.285,\"onlineExpGained\":475890.4073258982,\"onlineMoneyMade\":301195959.4239286,\"onlineRunningTime\":17421.810000028312,\"ramUsage\":2.45,\"server\":\"hong-fang-tea\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-672987.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,3,2,6,3,0,0,10,0,1,7,2,0,4,4,5,10],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"14.8.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":10.065999999999933,\"minDifficulty\":8,\"moneyAvailable\":839.9460385296128,\"moneyMax\":62172148.79388444,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"harakiri-sushi\":[474048193.0874862,942,9546,972]},\"filename\":\"hack-server.js\",\"offlineExpGained\":1685150.4822691835,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.28899999999,\"onlineExpGained\":399187.8252052989,\"onlineMoneyMade\":474048193.0874862,\"onlineRunningTime\":17406.810000028257,\"ramUsage\":2.45,\"server\":\"harakiri-sushi\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-26296.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"POPUPFLASHCACHEQUEUELINUX\",\"JUNKMAIL\"],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-446641.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"41371839\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-122085.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0010000000000100011100111101111000110110100000000000010011101101\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"90.0.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10.178438307615759,\"minDifficulty\":10,\"moneyAvailable\":320638572.76877743,\"moneyMax\":373032892.7633066,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"phantasy\":[3144694690.593186,1079,8970,507]},\"filename\":\"hack-server.js\",\"offlineExpGained\":1917196.0552410511,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.292,\"onlineExpGained\":452134.203417517,\"onlineMoneyMade\":3144694690.593186,\"onlineRunningTime\":17268.410000027754,\"ramUsage\":2.45,\"server\":\"phantasy\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-604446.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":410272594,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-112019.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[27,87,150,24,34,33,94,82,173,184,125,157,50,36,88,24,154,138,140,21,152,100,85,58,195,156,196,49]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"7.5.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":10.607999999999981,\"minDifficulty\":8,\"moneyAvailable\":1029.3981724026785,\"moneyMax\":155430371.9847111,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"max-hardware\":[506417458.5283098,468,13650,260]},\"filename\":\"hack-server.js\",\"offlineExpGained\":2119137.887309394,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.295,\"onlineExpGained\":500830.9381153487,\"onlineMoneyMade\":506417458.5283098,\"onlineRunningTime\":17322.61000002795,\"ramUsage\":2.45,\"server\":\"max-hardware\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"92.6.6.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":46.5,\"hackDifficulty\":47.08043830761578,\"minDifficulty\":16,\"moneyAvailable\":994625824.2936033,\"moneyMax\":1069518037.1887401,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":190,\"serverGrowth\":33,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"omega-net\":[4042125214.1277122,806,2925,481]},\"filename\":\"hack-server.js\",\"offlineExpGained\":1097249.0559004606,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.299,\"onlineExpGained\":255062.21040866623,\"onlineMoneyMade\":4042125214.1277122,\"onlineRunningTime\":17283.210000027808,\"ramUsage\":2.45,\"server\":\"omega-net\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-253840-BitRunners.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[76,144,70,76],\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"18.5.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":61.5,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":785585045.61633,\"moneyMax\":785585045.61633,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":271,\"serverGrowth\":29,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"89.8.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":15.623999999999995,\"minDifficulty\":15,\"moneyAvailable\":88943982.89480986,\"moneyMax\":310860743.9694222,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[1083319982.7083664,754,5967,832]},\"filename\":\"hack-server.js\",\"offlineExpGained\":1878255.8276340691,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.306,\"onlineExpGained\":444662.494123754,\"onlineMoneyMade\":1083319982.7083664,\"onlineRunningTime\":17348.810000028046,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-991046.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[17,25],[6,16],[16,17],[11,13],[2,12],[12,16],[18,21],[12,16],[5,7],[18,24]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-937025.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,1,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,1,0,0,1,1],[0,1,0,0,0,0],[0,1,1,1,0,0],[0,1,0,1,1,0],[0,0,1,0,0,0],[0,0,0,0,0,0],[0,0,1,0,1,0],[0,0,0,0,0,0],[1,0,0,0,0,0]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-495263.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":450073709,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-791487.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[30,32,46,17,42,27,47,12],[28,13,10,48,13,23,4,21],[5,6,30,23,27,21,50,47],[15,22,34,21,45,22,26,12],[5,15,20,43,13,26,48,27],[4,20,37,37,40,16,5,29],[4,19,37,43,24,47,48,11],[29,17,31,23,10,15,33,16],[32,23,9,2,34,26,37,10],[7,28,11,24,32,2,14,39],[29,37,13,27,45,35,14,27]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-333886.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[62,94,65,94,22,162,146,48,179,41,49,168,190,88,126,173,25,192,144,68,178,167,145,26,88,173,109,114,177],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"39.8.0.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":72,\"hackDifficulty\":25.423999999999992,\"minDifficulty\":24,\"moneyAvailable\":171.270136388145,\"moneyMax\":3885759299.6177773,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":518,\"serverGrowth\":42,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"millenium-fitness\":[21371771171.17988,2236,1664,1040]},\"filename\":\"hack-server.js\",\"offlineExpGained\":1877474.6444232357,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.31,\"onlineExpGained\":434160.3013402167,\"onlineMoneyMade\":21371771171.17988,\"onlineRunningTime\":16374.2100000245,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"6.7.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"powerhouse-fitness\"}}]]},\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":87,\"hackDifficulty\":29.052,\"minDifficulty\":29,\"moneyAvailable\":780765935.7318585,\"moneyMax\":13988733478.623999,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1062,\"serverGrowth\":52,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"powerhouse-fitness\":[0,0,39,26]},\"filename\":\"hack-server.js\",\"offlineExpGained\":19471.93096237992,\"offlineMoneyMade\":0,\"offlineRunningTime\":72090.445,\"onlineExpGained\":6757.629850770378,\"onlineMoneyMade\":0,\"onlineRunningTime\":5555.009999997141,\"ramUsage\":2.45,\"server\":\"powerhouse-fitness\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-817299.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,5,2,6,4,5,1],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"49.2.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"snap-fitness\"}}]]},\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":75,\"hackDifficulty\":25.66,\"minDifficulty\":25,\"moneyAvailable\":604720825.5844324,\"moneyMax\":6994366739.311999,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":728,\"serverGrowth\":42,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-597513.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1111011011001010\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"92.9.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"infocomm\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.052,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":531,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"run4theh111z\":[0,24180,0,8606]},\"filename\":\"hack-server.js\",\"offlineExpGained\":767316.4847592935,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.31599999999,\"onlineExpGained\":172730.59228866504,\"onlineMoneyMade\":0,\"onlineRunningTime\":16235.410000023992,\"ramUsage\":2.45,\"server\":\"run4theh111z\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"49.4.8.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.3120000000000003,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":345,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"I.I.I.I\":[0,80340,0,56836]},\"filename\":\"hack-server.js\",\"offlineExpGained\":4019870.7615190228,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.32,\"onlineExpGained\":906873.9259734276,\"onlineMoneyMade\":0,\"onlineRunningTime\":16651.210000025505,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"23.5.1.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.2600000000000002,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":213,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"avmnite-02h\":[0,62608,0,37960]},\"filename\":\"hack-server.js\",\"offlineExpGained\":2722862.590481511,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.329,\"onlineExpGained\":632068.2897945608,\"onlineMoneyMade\":0,\"onlineRunningTime\":17235.810000027635,\"ramUsage\":2.45,\"server\":\"avmnite-02h\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"95.2.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":516,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\".\":[0,16458,0,2820]},\"filename\":\"hack-server.js\",\"offlineExpGained\":363303.3110959325,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.33099999999,\"onlineExpGained\":81755.53151495867,\"onlineMoneyMade\":0,\"onlineRunningTime\":16248.810000024041,\"ramUsage\":2.45,\"server\":\".\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"81.4.0.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.054,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":60,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"CSEC\":[0,28356,0,3033]},\"filename\":\"hack-server.js\",\"offlineExpGained\":509293.57993461273,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.333,\"onlineExpGained\":119335.13447178123,\"onlineMoneyMade\":0,\"onlineRunningTime\":17402.810000028243,\"ramUsage\":2.45,\"server\":\"CSEC\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":3,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-87068.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":5054929,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-37067-NiteSec.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"VIRUS QUEUE TRASH SHIFT TABLE\",19],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-502549.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":567119187,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"52.4.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"The-Cave\"}}]]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"98.7.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3804.725383687637,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"20.0.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"darkweb\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"hacknet-server-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":23,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-0\",\"httpPortOpen\":false,\"ip\":\"70.5.6.7\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":12,\"cores\":23,\"hashCapacity\":131072,\"hashRate\":5.545337375028027,\"level\":120,\"onlineTimeSeconds\":119664.19999979169,\"totalHashesGenerated\":436854.73739015264,\"runningScripts\":[]}},\"neighbor-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-0\",\"httpPortOpen\":false,\"ip\":\"62.9.7.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[28898766.825630173,21140,0,0],\"neo-net\":[67304377.35772562,21140,0,0],\"sigma-cosmetics\":[33490113.094963547,21140,0,0],\"applied-energetics\":[11516207692.307177,21140,0,0],\"unitalife\":[15572967598.016506,21140,0,0],\"titan-labs\":[0,0,21140,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":15309791.391183563,\"offlineMoneyMade\":0,\"offlineRunningTime\":31642.624,\"onlineExpGained\":9459556.412594263,\"onlineMoneyMade\":27218868547.602,\"onlineRunningTime\":2240.6100000001534,\"ramUsage\":3.1,\"server\":\"neighbor-0\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":21140,\"temporary\":false}}]}},\"hacknet-server-1\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":23,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-1\",\"httpPortOpen\":false,\"ip\":\"3.6.2.0\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":12,\"cores\":23,\"hashCapacity\":131072,\"hashRate\":5.406703940652326,\"level\":117,\"onlineTimeSeconds\":119663.59999979168,\"totalHashesGenerated\":425822.66566828324,\"runningScripts\":[]}},\"neighbor-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-1\",\"httpPortOpen\":false,\"ip\":\"70.4.4.8\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"rothman-uni\":[2504475576.055847,21140,0,0],\"harakiri-sushi\":[58067963.064864054,21140,0,0],\"hong-fang-tea\":[43525533.13090617,21140,0,0],\"omega-net\":[0,0,21140,0],\"stormtech\":[16084554469.52671,21140,0,0],\"infocomm\":[11710862224.277355,21140,0,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":4605384.54776969,\"offlineMoneyMade\":0,\"offlineRunningTime\":31642.625,\"onlineExpGained\":9833407.14506805,\"onlineMoneyMade\":30401485766.055683,\"onlineRunningTime\":2240.6100000001534,\"ramUsage\":3.1,\"server\":\"neighbor-1\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":21140,\"temporary\":false}}]}},\"neighbor-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-2\",\"httpPortOpen\":false,\"ip\":\"5.7.2.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"helios\":[10015433347.221697,21140,0,0],\"microdyne\":[0,0,21140,0],\"univ-energy\":[17198633475.662033,21140,0,0],\"galactic-cyber\":[11795219478.527882,21140,0,0],\"summit-uni\":[0,0,21140,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":22628620.640654963,\"offlineMoneyMade\":0,\"offlineRunningTime\":31642.626999999997,\"onlineExpGained\":12461691.082459508,\"onlineMoneyMade\":39009286301.411606,\"onlineRunningTime\":2240.6100000001534,\"ramUsage\":3.1,\"server\":\"neighbor-2\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":21140,\"temporary\":false}}]}},\"hacknet-server-2\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":23,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-2\",\"httpPortOpen\":false,\"ip\":\"60.0.2.3\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":11,\"cores\":23,\"hashCapacity\":65536,\"hashRate\":5.221859361484725,\"level\":113,\"onlineTimeSeconds\":119663.19999979169,\"totalHashesGenerated\":410711.2243450554,\"runningScripts\":[]}},\"neighbor-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-3\",\"httpPortOpen\":false,\"ip\":\"38.7.7.7\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"hong-fang-tea\":[43527910.95724634,21140,0,0],\"helios\":[0,21140,0,0],\"omega-net\":[989085513.1449218,21140,21140,0],\"taiyang-digital\":[0,0,21140,0],\"computek\":[3337431022.2931995,21140,0,0],\"nova-med\":[0,0,21140,0],\"deltaone\":[26346762417.263145,21140,0,0],\"unitalife\":[0,0,21140,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":28005719.499735277,\"offlineMoneyMade\":0,\"offlineRunningTime\":31642.627999999997,\"onlineExpGained\":16517405.08929633,\"onlineMoneyMade\":30716806863.658512,\"onlineRunningTime\":2240.6100000001534,\"ramUsage\":3.1,\"server\":\"neighbor-3\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":21140,\"temporary\":false}}]}},\"hacknet-server-3\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":23,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-3\",\"httpPortOpen\":false,\"ip\":\"98.7.0.3\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":11,\"cores\":23,\"hashCapacity\":65536,\"hashRate\":5.037014782317124,\"level\":109,\"onlineTimeSeconds\":119662.59999979168,\"totalHashesGenerated\":403121.3101854693,\"runningScripts\":[]}},\"neighbor-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-4\",\"httpPortOpen\":false,\"ip\":\"86.6.1.4\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aerocorp\":[17801432498.744804,21140,0,0],\"summit-uni\":[4477279220.904742,21140,0,0],\"sigma-cosmetics\":[0,0,0,21140],\"unitalife\":[0,0,21140,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":11476121.864348568,\"offlineMoneyMade\":0,\"offlineRunningTime\":31642.628999999997,\"onlineExpGained\":7714919.661049932,\"onlineMoneyMade\":22278711719.649548,\"onlineRunningTime\":2240.6100000001534,\"ramUsage\":3.1,\"server\":\"neighbor-4\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":21140,\"temporary\":false}}]}},\"neighbor-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-5\",\"httpPortOpen\":false,\"ip\":\"9.1.1.1\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"rothman-uni\":[0,21140,0,0],\"netlink\":[3972066360.1216145,21140,0,0],\"zb-institute\":[8131555800.310227,21140,0,0],\"stormtech\":[0,0,0,21140],\"iron-gym\":[297746121.9201428,21140,0,0],\"crush-fitness\":[0,0,21140,0],\"galactic-cyber\":[0,0,21140,0],\"the-hub\":[0,0,0,21140]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":23879545.00276887,\"offlineMoneyMade\":0,\"offlineRunningTime\":31642.629999999997,\"onlineExpGained\":14515037.908546584,\"onlineMoneyMade\":12401368282.351986,\"onlineRunningTime\":2240.6100000001534,\"ramUsage\":3.1,\"server\":\"neighbor-5\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":21140,\"temporary\":false}}]}},\"hacknet-server-4\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":23,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-4\",\"httpPortOpen\":false,\"ip\":\"19.8.9.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":11,\"cores\":23,\"hashCapacity\":65536,\"hashRate\":4.944592492733324,\"level\":107,\"onlineTimeSeconds\":119661.59999979168,\"totalHashesGenerated\":400177.2978904946,\"runningScripts\":[]}},\"neighbor-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-6\",\"httpPortOpen\":false,\"ip\":\"61.4.9.8\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"global-pharm\":[23139084363.429024,21140,0,0],\"taiyang-digital\":[0,0,21140,0],\"omnia\":[14624297359.587524,21140,0,0],\"aerocorp\":[0,0,21140,0],\"silver-helix\":[531386084.8538458,21140,0,0],\"helios\":[0,0,21140,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":21906698.91127984,\"offlineMoneyMade\":0,\"offlineRunningTime\":31642.631999999998,\"onlineExpGained\":13707860.19070546,\"onlineMoneyMade\":38294767807.87039,\"onlineRunningTime\":2240.6100000001534,\"ramUsage\":3.1,\"server\":\"neighbor-6\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":21140,\"temporary\":false}}]}},\"neighbor-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-7\",\"httpPortOpen\":false,\"ip\":\"1.6.7.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[5659330074.632369,21140,21140,0],\"sigma-cosmetics\":[33241637.585926287,21140,0,0],\"joesguns\":[36228878.99618538,21140,0,0],\"CSEC\":[0,0,21140,0],\"millenium-fitness\":[259393111.4187851,21140,0,0],\"b-and-a\":[320059094871.7201,21140,0,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":12322518.527022757,\"offlineMoneyMade\":0,\"offlineRunningTime\":31642.632999999998,\"onlineExpGained\":11510071.036162602,\"onlineMoneyMade\":326047288574.35333,\"onlineRunningTime\":2240.6100000001534,\"ramUsage\":3.1,\"server\":\"neighbor-7\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":21140,\"temporary\":false}}]}},\"neighbor-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-8\",\"httpPortOpen\":false,\"ip\":\"77.3.5.1\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"vitalife\":[10248367093.20037,21140,0,0],\"crush-fitness\":[785585045.61633,21140,0,0],\"zb-institute\":[0,0,21140,0],\"rothman-uni\":[0,0,21140,0],\"omnia\":[0,0,21140,0],\"snap-fitness\":[6994366739.311999,21140,0,0],\"max-hardware\":[133934275.24283779,21140,0,0],\"nectar-net\":[39937439.74513747,21140,0,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":30196394.83970622,\"offlineMoneyMade\":0,\"offlineRunningTime\":31642.634,\"onlineExpGained\":15384524.081800012,\"onlineMoneyMade\":18202190593.116673,\"onlineRunningTime\":2240.6100000001534,\"ramUsage\":3.1,\"server\":\"neighbor-8\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":21140,\"temporary\":false}}]}},\"neighbor-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-9\",\"httpPortOpen\":false,\"ip\":\"31.2.6.5\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"nectar-net\":[39961766.20852127,5285,0,0],\"sigma-cosmetics\":[33370051.87397751,5285,0,0],\"n00dles\":[1088012.6038929778,5285,0,5285],\"syscore\":[0,0,5285,5285],\"joesguns\":[0,0,0,10570],\"icarus\":[0,5285,10570,5285],\"darkweb\":[0,0,5285,0],\"run4theh111z\":[0,0,10570,0],\"netlink\":[0,0,5285,0],\"zeus-med\":[0,0,5285,5285],\"unitalife\":[0,0,5285,0],\"omnia\":[0,0,0,5285],\"I.I.I.I\":[0,0,5285,5285],\"alpha-ent\":[9744550186.101414,5285,0,0],\"zb-institute\":[0,0,5285,0],\"catalyst\":[0,0,0,5285],\"univ-energy\":[0,0,5285,0],\"crush-fitness\":[0,0,5285,0],\"the-hub\":[0,0,0,5285],\"galactic-cyber\":[0,0,0,5285],\"phantasy\":[0,0,0,5285],\"max-hardware\":[128622859.06191885,5285,0,0],\"zer0\":[0,0,5285,0],\"snap-fitness\":[0,0,10570,5285],\"titan-labs\":[11424782242.642632,5285,0,0],\"harakiri-sushi\":[57283785.22634533,5285,0,0],\"foodnstuff\":[0,0,0,5285],\"iron-gym\":[0,0,5285,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":67569944.17070857,\"offlineMoneyMade\":0,\"offlineRunningTime\":72090.478,\"onlineExpGained\":14744446.312564591,\"onlineMoneyMade\":21429658903.7187,\"onlineRunningTime\":14267.210000016832,\"ramUsage\":3.1,\"server\":\"neighbor-9\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"neighbor-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-10\",\"httpPortOpen\":false,\"ip\":\"93.6.7.7\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"joesguns\":[36239587.29585672,5285,5285,0],\"darkweb\":[0,0,10570,0],\"n00dles\":[0,0,0,10570],\"netlink\":[0,0,5285,5285],\"foodnstuff\":[0,0,0,10570],\"crush-fitness\":[0,0,0,5285],\"sigma-cosmetics\":[0,0,0,5285],\"univ-energy\":[0,0,0,5285],\"deltaone\":[0,0,0,5285],\"nova-med\":[0,0,0,5285],\"unitalife\":[0,0,0,5285],\"iron-gym\":[0,0,5285,5285],\"max-hardware\":[0,0,0,5285],\"galactic-cyber\":[0,0,0,5285],\"stormtech\":[0,0,5285,0],\"harakiri-sushi\":[0,0,5285,0],\"nectar-net\":[0,0,5285,0],\"I.I.I.I\":[0,0,5285,0],\"rothman-uni\":[0,0,5285,0],\".\":[0,0,5285,0],\"applied-energetics\":[0,0,5285,0],\"microdyne\":[0,0,5285,0],\"omnia\":[0,0,0,5285],\"the-hub\":[0,0,5285,0],\"lexo-corp\":[0,0,5285,0],\"b-and-a\":[0,0,5285,0],\"rho-construction\":[0,0,5285,0],\"phantasy\":[323564158.6576713,5285,0,0],\"syscore\":[7210448078.583018,5285,5285,0],\"The-Cave\":[0,0,5285,0],\"taiyang-digital\":[0,0,0,5285]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":60580444.034319535,\"offlineMoneyMade\":0,\"offlineRunningTime\":72090.481,\"onlineExpGained\":14475387.073284214,\"onlineMoneyMade\":7570251824.536547,\"onlineRunningTime\":14267.210000016832,\"ramUsage\":3.1,\"server\":\"neighbor-10\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"neighbor-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-11\",\"httpPortOpen\":false,\"ip\":\"96.9.3.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,330],\"max-hardware\":[134726462.8902844,165,165,165],\"nectar-net\":[0,0,165,165],\"aevum-police\":[4073819194.229276,165,330,0],\"netlink\":[0,0,0,165],\"foodnstuff\":[0,0,0,330],\"silver-helix\":[0,0,165,0],\"joesguns\":[0,0,165,0],\"johnson-ortho\":[1200377229.9043226,165,165,0],\"sigma-cosmetics\":[0,0,0,165],\"neo-net\":[0,0,0,330],\"darkweb\":[0,0,165,0],\"zeus-med\":[0,0,330,165],\"n00dles\":[1088012.6038929778,165,0,0],\"infocomm\":[0,0,0,165],\".\":[0,0,165,0],\"univ-energy\":[0,0,0,165],\"The-Cave\":[0,0,165,0],\"aerocorp\":[0,0,0,165],\"deltaone\":[0,0,165,0],\"helios\":[0,0,0,165],\"taiyang-digital\":[0,0,0,165],\"stormtech\":[0,0,165,0],\"omega-net\":[0,0,0,165],\"CSEC\":[0,0,165,0],\"snap-fitness\":[4270354654.1701655,165,0,0],\"millenium-fitness\":[0,0,165,0],\"powerhouse-fitness\":[0,0,0,165],\"vitalife\":[0,0,165,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":2320092.4317228897,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.387,\"onlineExpGained\":509756.26128461986,\"onlineMoneyMade\":9680365553.797941,\"onlineRunningTime\":16075.010000023409,\"ramUsage\":3.1,\"server\":\"neighbor-11\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":165,\"temporary\":false}}]}},\"neighbor-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-12\",\"httpPortOpen\":false,\"ip\":\"46.4.2.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[1061594.8715344113,165,0,165],\"alpha-ent\":[0,0,0,165],\"avmnite-02h\":[0,0,0,165],\"neo-net\":[67522170.48698297,165,0,165],\"rothman-uni\":[0,0,165,0],\"rho-construction\":[0,0,165,330],\"joesguns\":[0,0,165,165],\"zer0\":[0,0,330,165],\"run4theh111z\":[0,0,165,0],\"phantasy\":[0,0,0,165],\"zb-institute\":[7150545896.600945,165,0,165],\"lexo-corp\":[0,0,0,165],\"netlink\":[0,0,165,0],\"foodnstuff\":[0,0,0,330],\"taiyang-digital\":[0,0,165,165],\"zb-def\":[0,0,165,165],\"zeus-med\":[10638393350.845922,165,165,0],\"icarus\":[1806600509.68685,165,0,0],\"applied-energetics\":[0,0,165,165],\"aerocorp\":[0,0,0,165],\"snap-fitness\":[0,0,0,165],\"nova-med\":[14540036319.570143,330,0,0],\"crush-fitness\":[0,0,0,165]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":2125010.727497776,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.39099999999,\"onlineExpGained\":505423.5541201884,\"onlineMoneyMade\":34204159842.062378,\"onlineRunningTime\":16070.01000002339,\"ramUsage\":3.1,\"server\":\"neighbor-12\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":165,\"temporary\":false}}]}},\"neighbor-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-13\",\"httpPortOpen\":false,\"ip\":\"6.9.6.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,0,165],\"max-hardware\":[0,0,165,0],\"avmnite-02h\":[0,0,0,165],\"iron-gym\":[0,0,330,165],\"foodnstuff\":[0,0,0,495],\"zer0\":[101782529.26317443,165,0,0],\"n00dles\":[2071786.4076885148,330,165,0],\"darkweb\":[0,0,165,0],\"computek\":[0,0,165,0],\"the-hub\":[2376392128.1358113,165,330,0],\"nectar-net\":[0,0,165,0],\"hong-fang-tea\":[0,0,0,165],\"run4theh111z\":[0,0,330,0],\"vitalife\":[0,165,0,330],\"omega-net\":[0,0,165,0],\"unitalife\":[3378509744.7604065,165,0,165],\"CSEC\":[0,0,165,0],\"aerocorp\":[0,0,0,165],\"millenium-fitness\":[0,0,165,165],\"stormtech\":[0,0,165,0],\".\":[0,0,165,0],\"helios\":[0,0,165,0],\"deltaone\":[0,0,330,0],\"galactic-cyber\":[0,0,165,165],\"alpha-ent\":[0,0,165,0],\"applied-energetics\":[0,0,0,165],\"zeus-med\":[0,0,165,0],\"icarus\":[3685422556.5040383,165,0,0],\"taiyang-digital\":[0,0,165,0],\"neo-net\":[0,0,0,165],\"sigma-cosmetics\":[0,0,0,165],\"global-pharm\":[0,0,165,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":2379009.850432488,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.397,\"onlineExpGained\":538582.0273173668,\"onlineMoneyMade\":9544178745.07112,\"onlineRunningTime\":16070.01000002339,\"ramUsage\":3.1,\"server\":\"neighbor-13\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":165,\"temporary\":false}}]}},\"neighbor-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-14\",\"httpPortOpen\":false,\"ip\":\"10.0.1.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"max-hardware\":[0,0,0,330],\"harakiri-sushi\":[57010609.19308189,165,0,495],\"summit-uni\":[0,165,165,330],\"phantasy\":[0,0,0,330],\"darkweb\":[0,0,165,0],\"omega-net\":[0,0,0,330],\"joesguns\":[0,0,165,0],\"run4theh111z\":[0,0,165,165],\"CSEC\":[0,0,495,0],\"nectar-net\":[0,0,0,165],\"I.I.I.I\":[0,0,0,330],\"the-hub\":[0,0,165,0],\"hong-fang-tea\":[0,0,0,165],\"computek\":[0,0,165,0],\"catalyst\":[6690629440.534554,165,165,0],\"n00dles\":[1048619.1324237871,165,0,330],\"foodnstuff\":[0,0,0,165],\"millenium-fitness\":[0,0,0,330],\"silver-helix\":[0,0,165,0],\"taiyang-digital\":[0,0,0,165],\"zeus-med\":[0,0,0,165],\"aerocorp\":[0,0,0,165],\"global-pharm\":[0,0,0,165],\"titan-labs\":[0,0,165,0],\"zb-def\":[0,0,0,165],\"zer0\":[0,0,165,165],\"powerhouse-fitness\":[0,0,0,165],\"microdyne\":[2993728675.9363394,165,0,0],\"johnson-ortho\":[0,0,165,0],\"unitalife\":[0,0,165,0],\"defcomm\":[3027395196.0866675,165,0,0],\"rho-construction\":[0,0,0,165],\"lexo-corp\":[5753988591.4757,165,0,0],\"netlink\":[0,0,165,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":2454556.7683155243,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.401,\"onlineExpGained\":561991.9093945746,\"onlineMoneyMade\":18523801132.358765,\"onlineRunningTime\":16070.01000002339,\"ramUsage\":3.1,\"server\":\"neighbor-14\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":165,\"temporary\":false}}]}},\"neighbor-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-15\",\"httpPortOpen\":false,\"ip\":\"17.8.1.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"crush-fitness\":[0,0,165,165],\"CSEC\":[0,0,660,0],\"joesguns\":[0,0,0,330],\"rothman-uni\":[0,0,165,495],\"aevum-police\":[0,0,165,0],\"the-hub\":[0,0,0,165],\"max-hardware\":[140697541.37219083,165,0,165],\"lexo-corp\":[5494599220.72816,165,165,165],\"alpha-ent\":[0,0,165,0],\"harakiri-sushi\":[0,0,0,165],\"global-pharm\":[0,0,165,0],\"netlink\":[0,0,0,165],\"icarus\":[0,0,0,330],\"run4theh111z\":[0,0,330,0],\"unitalife\":[0,0,330,165],\"solaris\":[0,0,0,165],\"foodnstuff\":[0,0,0,330],\"zb-def\":[0,0,0,330],\"univ-energy\":[0,0,0,165],\"catalyst\":[0,0,165,0],\"n00dles\":[986176.3895840262,165,0,0],\"stormtech\":[0,0,0,165],\"phantasy\":[0,0,0,165],\"sigma-cosmetics\":[0,0,0,165],\"zer0\":[0,0,165,0],\"johnson-ortho\":[0,0,0,165]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":2218799.228991924,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.41,\"onlineExpGained\":538935.7176981367,\"onlineMoneyMade\":5636282938.489934,\"onlineRunningTime\":16065.010000023372,\"ramUsage\":3.1,\"server\":\"neighbor-15\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":165,\"temporary\":false}}]}},\"neighbor-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-16\",\"httpPortOpen\":false,\"ip\":\"53.1.0.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"millenium-fitness\":[0,0,165,165],\"neo-net\":[0,0,0,330],\"nectar-net\":[0,0,165,330],\"zer0\":[0,0,0,165],\"joesguns\":[0,0,0,165],\"run4theh111z\":[0,0,330,165],\"sigma-cosmetics\":[0,0,0,165],\"harakiri-sushi\":[0,0,165,0],\"I.I.I.I\":[0,0,0,495],\"phantasy\":[0,0,330,0],\"the-hub\":[0,0,165,0],\"vitalife\":[0,0,0,165],\"iron-gym\":[0,0,165,165],\"aevum-police\":[0,0,0,165],\"applied-energetics\":[0,0,0,165],\"lexo-corp\":[0,0,0,165],\"unitalife\":[0,0,0,165],\"deltaone\":[0,0,165,0],\"rho-construction\":[0,0,165,0],\"computek\":[0,0,165,0],\"solaris\":[0,0,165,0],\"crush-fitness\":[0,0,165,0],\"catalyst\":[0,0,165,0],\"syscore\":[0,0,165,165],\"zeus-med\":[0,0,165,165],\"netlink\":[0,0,165,0],\"univ-energy\":[0,0,165,0],\"CSEC\":[0,0,165,0],\"johnson-ortho\":[0,0,165,0],\"omega-net\":[0,0,165,0],\"global-pharm\":[8072529396.598101,165,0,0],\"powerhouse-fitness\":[0,0,0,165],\"darkweb\":[0,0,165,0],\"microdyne\":[3975741109.630282,165,0,0],\"max-hardware\":[144066244.40793565,165,0,0],\"stormtech\":[0,0,0,165],\"zb-def\":[0,0,165,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":2734341.4351600287,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.41399999999,\"onlineExpGained\":597825.1660963251,\"onlineMoneyMade\":12192336750.636318,\"onlineRunningTime\":16065.010000023372,\"ramUsage\":3.1,\"server\":\"neighbor-16\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":165,\"temporary\":false}}]}},\"neighbor-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-17\",\"httpPortOpen\":false,\"ip\":\"33.9.3.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"rho-construction\":[0,0,0,165],\"harakiri-sushi\":[58141692.243790716,165,0,0],\"nectar-net\":[0,0,165,0],\"I.I.I.I\":[0,0,0,330],\"omega-net\":[0,0,330,0],\"joesguns\":[0,0,165,165],\"aevum-police\":[0,165,165,165],\"zer0\":[106899200.45309593,165,165,0],\"hong-fang-tea\":[0,0,165,330],\"sigma-cosmetics\":[0,0,165,165],\"the-hub\":[2399389998.614739,165,0,0],\"crush-fitness\":[0,0,0,165],\"millenium-fitness\":[2514747316.357259,165,0,165],\"unitalife\":[0,0,0,165],\"catalyst\":[0,0,165,0],\"icarus\":[0,0,165,330],\"run4theh111z\":[0,0,165,0],\"stormtech\":[0,0,0,165],\"defcomm\":[0,0,0,165],\"snap-fitness\":[0,0,0,165],\"netlink\":[0,0,0,165],\"nova-med\":[0,0,165,0],\"omnia\":[0,0,165,0],\"applied-energetics\":[0,0,165,0],\"CSEC\":[0,0,330,0],\"lexo-corp\":[2914400846.1512766,165,0,0],\"zb-def\":[0,0,330,0],\"darkweb\":[0,0,165,0],\"taiyang-digital\":[0,0,165,0],\"helios\":[0,0,165,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":2214750.7856919104,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.42000000001,\"onlineExpGained\":538935.7176981366,\"onlineMoneyMade\":7993579053.820161,\"onlineRunningTime\":16055.010000023336,\"ramUsage\":3.1,\"server\":\"neighbor-17\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":165,\"temporary\":false}}]}},\"neighbor-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-18\",\"httpPortOpen\":false,\"ip\":\"87.9.8.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"phantasy\":[0,0,0,165],\"max-hardware\":[0,0,165,330],\"omega-net\":[0,0,165,165],\"rothman-uni\":[0,0,0,165],\"CSEC\":[0,0,165,0],\"hong-fang-tea\":[0,0,165,165],\"darkweb\":[0,0,165,0],\"harakiri-sushi\":[0,0,0,165],\"avmnite-02h\":[0,0,0,165],\"rho-construction\":[0,0,330,0],\"syscore\":[0,0,0,165],\"joesguns\":[0,0,0,165],\"summit-uni\":[0,0,165,0],\"univ-energy\":[0,0,0,165],\"johnson-ortho\":[0,165,165,0],\"solaris\":[0,0,165,165],\"zeus-med\":[0,0,495,0],\"catalyst\":[0,0,165,0],\"unitalife\":[0,0,0,165],\"omnia\":[0,0,165,0],\"zb-def\":[0,0,0,165],\"titan-labs\":[0,0,165,0],\"applied-energetics\":[0,0,0,165],\"The-Cave\":[0,0,165,0],\"galactic-cyber\":[0,0,0,165],\"alpha-ent\":[0,0,0,165],\"microdyne\":[4224140464.815197,165,0,0],\"neo-net\":[0,0,165,0],\"snap-fitness\":[0,0,165,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":2136732.673543367,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.424,\"onlineExpGained\":495321.2726194482,\"onlineMoneyMade\":4224140464.815197,\"onlineRunningTime\":16055.010000023336,\"ramUsage\":3.1,\"server\":\"neighbor-18\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":165,\"temporary\":false}}]}},\"neighbor-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-19\",\"httpPortOpen\":false,\"ip\":\"79.8.2.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"harakiri-sushi\":[56996081.38305995,165,0,165],\"summit-uni\":[0,0,0,165],\"rothman-uni\":[0,0,165,165],\"I.I.I.I\":[0,0,0,165],\"omega-net\":[0,0,165,165],\"hong-fang-tea\":[0,0,0,165],\"nectar-net\":[0,0,0,165],\"global-pharm\":[0,0,0,165],\"vitalife\":[0,0,165,0],\"millenium-fitness\":[0,0,165,0],\"johnson-ortho\":[1200377229.9043226,165,165,0],\"aevum-police\":[0,0,165,165],\"microdyne\":[0,0,0,165],\"n00dles\":[1074723.1670243458,165,0,0],\"zeus-med\":[0,0,0,165],\"omnia\":[0,165,0,0],\"stormtech\":[0,0,165,0],\"titan-labs\":[0,0,0,165],\"darkweb\":[0,0,330,0],\"crush-fitness\":[0,0,165,0],\"lexo-corp\":[0,0,165,0],\"unitalife\":[5214713633.6645155,165,0,0],\"univ-energy\":[0,0,0,165],\"taiyang-digital\":[0,0,0,165],\"b-and-a\":[0,0,165,0],\"snap-fitness\":[1655806040.4368901,165,0,0],\"zb-institute\":[0,165,0,0],\"powerhouse-fitness\":[0,0,0,165],\"phantasy\":[0,0,0,165],\"foodnstuff\":[0,0,0,165]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":2066522.701037982,\"offlineMoneyMade\":0,\"offlineRunningTime\":102176.428,\"onlineExpGained\":471115.58718550816,\"onlineMoneyMade\":8128967708.555813,\"onlineRunningTime\":16040.010000023281,\"ramUsage\":3.1,\"server\":\"neighbor-19\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":165,\"temporary\":false}}]}},\"hacknet-server-5\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":23,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-5\",\"httpPortOpen\":false,\"ip\":\"97.1.3.9\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":11,\"cores\":23,\"hashCapacity\":65536,\"hashRate\":4.944592492733324,\"level\":107,\"onlineTimeSeconds\":119608.19999979174,\"totalHashesGenerated\":396604.9526114479,\"runningScripts\":[]}},\"hacknet-server-6\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":23,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-6\",\"httpPortOpen\":false,\"ip\":\"20.5.2.9\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":11,\"cores\":23,\"hashCapacity\":65536,\"hashRate\":4.944592492733324,\"level\":107,\"onlineTimeSeconds\":119426.3999997919,\"totalHashesGenerated\":396213.5434178582,\"runningScripts\":[]}},\"hacknet-server-7\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":22,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-7\",\"httpPortOpen\":false,\"ip\":\"32.0.6.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":11,\"cores\":22,\"hashCapacity\":65536,\"hashRate\":4.761459437446905,\"level\":107,\"onlineTimeSeconds\":119018.7999997942,\"totalHashesGenerated\":394041.2451184058,\"runningScripts\":[]}},\"hacknet-server-8\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":22,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-8\",\"httpPortOpen\":false,\"ip\":\"22.8.4.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":11,\"cores\":22,\"hashCapacity\":65536,\"hashRate\":4.761459437446905,\"level\":107,\"onlineTimeSeconds\":117947.19999981404,\"totalHashesGenerated\":392319.0526610896,\"runningScripts\":[]}},\"hacknet-server-9\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":22,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-9\",\"httpPortOpen\":false,\"ip\":\"2.1.0.3\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":11,\"cores\":22,\"hashCapacity\":65536,\"hashRate\":4.761459437446905,\"level\":107,\"onlineTimeSeconds\":86357.19999997612,\"totalHashesGenerated\":332831.44840229355,\"runningScripts\":[]}},\"hacknet-server-10\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":22,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-10\",\"httpPortOpen\":false,\"ip\":\"97.1.4.3\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":11,\"cores\":22,\"hashCapacity\":65536,\"hashRate\":4.7169598165361855,\"level\":106,\"onlineTimeSeconds\":85377.59999997255,\"totalHashesGenerated\":328798.7179639262,\"runningScripts\":[]}},\"hacknet-server-11\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":22,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-11\",\"httpPortOpen\":false,\"ip\":\"35.8.1.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":11,\"cores\":22,\"hashCapacity\":65536,\"hashRate\":4.7169598165361855,\"level\":106,\"onlineTimeSeconds\":80351.59999996414,\"totalHashesGenerated\":314217.519835204,\"runningScripts\":[]}},\"hacknet-server-12\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":22,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-12\",\"httpPortOpen\":false,\"ip\":\"98.1.7.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":11,\"cores\":22,\"hashCapacity\":65536,\"hashRate\":4.7169598165361855,\"level\":106,\"onlineTimeSeconds\":75752.79999996761,\"totalHashesGenerated\":298912.295331497,\"runningScripts\":[]}},\"hacknet-server-13\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":22,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-13\",\"httpPortOpen\":false,\"ip\":\"29.1.5.9\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":11,\"cores\":22,\"hashCapacity\":65536,\"hashRate\":4.7169598165361855,\"level\":106,\"onlineTimeSeconds\":33882.999999992324,\"totalHashesGenerated\":147568.34226357378,\"runningScripts\":[]}},\"hacknet-server-14\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":18,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-14\",\"httpPortOpen\":false,\"ip\":\"11.8.3.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":9,\"cores\":18,\"hashCapacity\":16384,\"hashRate\":0.9835677705613345,\"level\":32,\"onlineTimeSeconds\":546.1999999999872,\"totalHashesGenerated\":528.5776842639353,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":5.2536,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":965437.6921564799}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":148.4383,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":120.3563,\"isBanned\":false,\"isMember\":true,\"playerReputation\":4022831.811347738}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":122.613,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":53.8438,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":500,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false,\"EnableHistorySearch\":true}","VersionSave":"33","AllGangsSave":"{\"Slum Snakes\":{\"power\":2251.340395957037,\"territory\":0},\"Tetrads\":{\"power\":2119.1225756891345,\"territory\":0},\"The Syndicate\":{\"power\":2199.343343416226,\"territory\":0},\"The Dark Army\":{\"power\":2265.753182322222,\"territory\":0},\"Speakers for the Dead\":{\"power\":1026.9863325142974,\"territory\":0},\"NiteSec\":{\"power\":1,\"territory\":0.14285714285714474},\"The Black Hand\":{\"power\":7737.143156007043,\"territory\":0.8571428571428553}}","LastExportBonus":"1703018478837","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}