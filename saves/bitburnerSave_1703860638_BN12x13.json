{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":3916,\"max\":3916},\"skills\":{\"hacking\":12866,\"strength\":47835,\"defense\":39065,\"dexterity\":9939,\"agility\":11994,\"charisma\":12,\"intelligence\":214},\"exp\":{\"hacking\":694289112811.1077,\"strength\":255276.98469181792,\"defense\":255276.98469181792,\"dexterity\":255276.98469181792,\"agility\":255276.98469181792,\"charisma\":0,\"intelligence\":427719.0413752252},\"mults\":{\"hacking_chance\":3.60314445126161,\"hacking_speed\":3.4356814026884654,\"hacking_money\":19.092945285349114,\"hacking_grow\":4.138713005188329,\"hacking\":24.749135760246407,\"strength\":311.7878635046259,\"defense\":254.62346718579587,\"dexterity\":64.78542286783951,\"agility\":78.17987245243404,\"charisma\":15.949177145313104,\"hacking_exp\":57.970647790477265,\"strength_exp\":6.179934338114998,\"defense_exp\":6.179934338114998,\"dexterity_exp\":7.106924488832249,\"agility_exp\":6.179934338114998,\"charisma_exp\":9.953388592091635,\"company_rep\":25.785046533860587,\"faction_rep\":3.9029223100930253,\"crime_money\":5.522069427867124,\"crime_success\":3.492217819995019,\"hacknet_node_money\":5.064761450084946,\"hacknet_node_purchase_cost\":0.3641461255015451,\"hacknet_node_ram_cost\":0.4760080071915623,\"hacknet_node_core_cost\":0.4760080071915623,\"hacknet_node_level_cost\":0.4046068061128279,\"work_money\":4.437911210738264,\"bladeburner_max_stamina\":1.1400000000000001,\"bladeburner_stamina_gain\":1.1400000000000001,\"bladeburner_analysis\":1.1400000000000001,\"bladeburner_success_chance\":1.1400000000000001},\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":26},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"OmniTek InfoLoad\"},{\"level\":1,\"name\":\"nextSENS Gene Modification\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Neuronal Densification\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"Unstable Circadian Modulator\"},{\"level\":1,\"name\":\"SmartJaw\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface Optimization Submodule\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Enhanced Social Interaction Implant\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"TITN-41 Gene-Modification Injection\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface NeuroNet Injector\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"Graphene Bionic Spine Upgrade\"},{\"level\":1,\"name\":\"CordiARC Fusion Reactor\"},{\"level\":1,\"name\":\"Graphene Bionic Legs Upgrade\"},{\"level\":1,\"name\":\"Xanipher\"},{\"level\":1,\"name\":\"Graphene Bone Lacings\"},{\"level\":1,\"name\":\"Graphene Bionic Arms Upgrade\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Neotra\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Photosynthetic Cells\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"QLink\"},{\"level\":1,\"name\":\"Hydroflame Left Arm\"},{\"level\":1,\"name\":\"SPTN-97 Gene Modification\"},{\"level\":26,\"name\":\"NeuroFlux Governor\"},{\"level\":27,\"name\":\"NeuroFlux Governor\"},{\"level\":28,\"name\":\"NeuroFlux Governor\"},{\"level\":29,\"name\":\"NeuroFlux Governor\"},{\"level\":30,\"name\":\"NeuroFlux Governor\"},{\"level\":31,\"name\":\"NeuroFlux Governor\"},{\"level\":32,\"name\":\"NeuroFlux Governor\"},{\"level\":33,\"name\":\"NeuroFlux Governor\"},{\"level\":34,\"name\":\"NeuroFlux Governor\"},{\"level\":35,\"name\":\"NeuroFlux Governor\"},{\"level\":36,\"name\":\"NeuroFlux Governor\"},{\"level\":37,\"name\":\"NeuroFlux Governor\"},{\"level\":38,\"name\":\"NeuroFlux Governor\"},{\"level\":39,\"name\":\"NeuroFlux Governor\"},{\"level\":40,\"name\":\"NeuroFlux Governor\"},{\"level\":41,\"name\":\"NeuroFlux Governor\"}],\"city\":\"Sector-12\",\"bitNodeN\":12,\"corporation\":null,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"NiteSec\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":2164233.4633518965,\"hack\":164518,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":13744,\"hack_exp\":18066047.08687386,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":1168616.8989040153,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":93579441.24180831,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":6187964.93808694,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-1\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":2163149.516151329,\"hack\":164394,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":13737,\"hack_exp\":18053608.82980141,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":1168101.7513207125,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":93450628.95064268,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":6182510.605560343,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-2\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":2162168.6899639764,\"hack\":164280,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":13735,\"hack_exp\":18042216.034578003,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":1167966.7468420707,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":93332721.44979545,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":6181081.588975283,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-3\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":1911701.0561153344,\"hack\":162339,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":13460,\"hack_exp\":16093082.268646285,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":1037143.3466647584,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":93166041.67545922,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":6122974.609686069,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-4\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":1550117.328629067,\"hack\":160320,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":13217,\"hack_exp\":13276358.97277141,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":855443.6873181841,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":94339103.64724277,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":6213891.364605395,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Neuralstimulator\"],\"name\":\"audrey-5\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":1906226.6138288556,\"hack\":161637,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":13430,\"hack_exp\":16029610.650259128,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":1035085.7157168377,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":92432591.36067198,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":6098703.472175551,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Neuralstimulator\"],\"name\":\"audrey-6\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":1665800.2785667323,\"hack\":160421,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":13285,\"hack_exp\":14167318.524763418,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":915006.2220022049,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":93261499.3927541,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":6165803.079211095,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-7\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":1429148.9805546054,\"hack\":158712,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":13074,\"hack_exp\":12275210.969364712,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":792017.3581550128,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":93901426.2752329,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":6209146.369873645,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Neuralstimulator\"],\"name\":\"audrey-8\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":1297232.921163919,\"hack\":156690,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":12877,\"hack_exp\":11141192.580900846,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":724054.8705383281,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":93311186.56671035,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":6173678.075752869,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Neuralstimulator\"],\"name\":\"audrey-9\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":474008.96767873643,\"hack\":143289,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":11290,\"hack_exp\":4406267.543320657,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":285306.3441159999,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":94850443.45084605,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":6247282.535426902,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Neuralstimulator\"],\"name\":\"audrey-10\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":11235113.17115585,\"hack\":93490,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":8114,\"hack_exp\":68372460.78262922,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":4425959.746206219,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":23781996.583385803,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":1569012.2720393224,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Neuralstimulator\"],\"name\":\"audrey-11\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":9793463.238778343,\"hack\":91391,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":7827,\"hack_exp\":59721705.61430507,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":3833370.4220915693,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":23256965.28187378,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":1507648.3846981933,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-12\"}}],\"wanted\":59.33444900155583,\"respect\":37752365.22593834,\"isHackingGang\":true,\"respectGainRate\":373.11812924996553,\"wantedGainRate\":0.019146362096540342,\"moneyGainRate\":1066485.2142972474,\"storedCycles\":7,\"storedTerritoryAndPowerCycles\":21,\"territoryClashChance\":0,\"territoryWarfareEngaged\":false,\"notifyMemberDeath\":true}},\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Illuminati\",\"The Covenant\",\"NiteSec\"],\"factionInvitations\":[\"Slum Snakes\",\"Netburners\",\"The Black Hand\",\"CyberSec\",\"The Syndicate\",\"Sector-12\",\"BitRunners\",\"Daedalus\"],\"hacknetNodes\":[\"hacknet-server-0\",\"hacknet-server-1\",\"hacknet-server-2\",\"hacknet-server-3\",\"hacknet-server-4\",\"hacknet-server-5\",\"hacknet-server-6\",\"hacknet-server-7\",\"hacknet-server-8\",\"hacknet-server-9\",\"hacknet-server-10\",\"hacknet-server-11\",\"hacknet-server-12\",\"hacknet-server-13\",\"hacknet-server-14\",\"hacknet-server-15\",\"hacknet-server-16\",\"hacknet-server-17\"],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":18874368,\"hashes\":258.15455871407676,\"upgrades\":{\"Sell for Money\":18650,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":431,\"Increase Maximum Money\":427,\"Improve Studying\":21,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":3}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":-158406.25,\"numPeopleKilled\":0,\"location\":\"National Security Agency\",\"money\":12784681882871.55,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":283873685223.66125,\"hacking\":247438224746846.12,\"hacknet\":18650000000,\"hacknet_expenses\":-142408980911044.84,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":3063323816.3034754,\"stock\":0,\"total\":12784680882871.55,\"work\":0,\"servers\":-13632614316935.508,\"other\":-305700000,\"augmentations\":-78917229945091.62}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":403613747755.2433,\"hacking\":274596494834387.2,\"hacknet\":2046999174547.916,\"hacknet_expenses\":-150590297429621.9,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":17633258413.175,\"stock\":0,\"total\":16178963110787.941,\"work\":2041319.1770452585,\"servers\":-15143437489663.254,\"other\":-3223900000,\"augmentations\":-95148821126414.39}},\"playtimeSinceLastAug\":75822400,\"playtimeSinceLastBitnode\":666364000,\"lastAugReset\":1703784815293,\"lastNodeReset\":1703194273046,\"purchasedServers\":[\"neighbor-0\",\"neighbor-1\",\"neighbor-2\",\"neighbor-3\",\"neighbor-4\",\"neighbor-5\",\"neighbor-6\",\"neighbor-7\",\"neighbor-8\",\"neighbor-9\",\"neighbor-10\",\"neighbor-11\",\"neighbor-12\",\"neighbor-13\",\"neighbor-14\",\"neighbor-15\",\"neighbor-16\",\"neighbor-17\",\"neighbor-18\"],\"scriptProdSinceLastAug\":102740853680393.86,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":29,\"max\":29},\"skills\":{\"hacking\":1,\"strength\":196,\"defense\":196,\"dexterity\":196,\"agility\":196,\"charisma\":1,\"intelligence\":179},\"exp\":{\"hacking\":0,\"strength\":1469868.3937248376,\"defense\":1469868.3937248376,\"dexterity\":1469868.3937248376,\"agility\":1469868.3937248376,\"charisma\":0,\"intelligence\":142067.42944290765},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":0,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":3,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":29,\"max\":29},\"skills\":{\"hacking\":1,\"strength\":196,\"defense\":196,\"dexterity\":196,\"agility\":196,\"charisma\":1,\"intelligence\":176},\"exp\":{\"hacking\":0,\"strength\":1469868.3936326695,\"defense\":1469868.3936326695,\"dexterity\":1469868.3936326695,\"agility\":1469868.3936326695,\"charisma\":0,\"intelligence\":128719.45344066303},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":0,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":3,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":29,\"max\":29},\"skills\":{\"hacking\":1,\"strength\":196,\"defense\":196,\"dexterity\":196,\"agility\":196,\"charisma\":1,\"intelligence\":176},\"exp\":{\"hacking\":0,\"strength\":1469868.3936326695,\"defense\":1469868.3936326695,\"dexterity\":1469868.3936326695,\"agility\":1469868.3936326695,\"charisma\":0,\"intelligence\":128682.05988337383},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":0,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":3,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":29,\"max\":29},\"skills\":{\"hacking\":1,\"strength\":196,\"defense\":196,\"dexterity\":196,\"agility\":196,\"charisma\":1,\"intelligence\":176},\"exp\":{\"hacking\":0,\"strength\":1469868.3936326695,\"defense\":1469868.3936326695,\"dexterity\":1469868.3936326695,\"agility\":1469868.3936326695,\"charisma\":0,\"intelligence\":128682.83139255909},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":0,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":3,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":29,\"max\":29},\"skills\":{\"hacking\":1,\"strength\":196,\"defense\":196,\"dexterity\":196,\"agility\":196,\"charisma\":1,\"intelligence\":173},\"exp\":{\"hacking\":0,\"strength\":1469868.3878892758,\"defense\":1469868.3878892758,\"dexterity\":1469868.3878892758,\"agility\":1469868.3878892758,\"charisma\":0,\"intelligence\":117729.12392306191},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":0,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":3,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":29,\"max\":29},\"skills\":{\"hacking\":1,\"strength\":196,\"defense\":196,\"dexterity\":196,\"agility\":196,\"charisma\":1,\"intelligence\":173},\"exp\":{\"hacking\":0,\"strength\":1469868.3878892758,\"defense\":1469868.3878892758,\"dexterity\":1469868.3878892758,\"agility\":1469868.3878892758,\"charisma\":0,\"intelligence\":117862.62575957252},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":0,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":3,\"sync\":100}}],\"sleevesFromCovenant\":3,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,3],[2,3],[3,3],[4,3],[5,3],[10,3],[9,3],[12,12],[6,3],[7,3]]},\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1662043985194},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1662055145998},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1662059766003},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1662066426141},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1662123294982},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1662473253800},{\"ID\":\"NITESEC\",\"unlockedOn\":1662586146115},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1662599826142},{\"ID\":\"DONATION\",\"unlockedOn\":1663589558449},{\"ID\":\"NS2\",\"unlockedOn\":1664451835859},{\"ID\":\"FROZE\",\"unlockedOn\":1664473094691},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1664552329001},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1664798852132},{\"ID\":\"TOR\",\"unlockedOn\":1665066056909},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1665074458530},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1665081718922},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1665334933764},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1665766590313},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1665837400497},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1665874707261},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1665939874779},{\"ID\":\"WORKOUT\",\"unlockedOn\":1665946235177},{\"ID\":\"TRAVEL\",\"unlockedOn\":1666024890747},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1666127536448},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1666177601953},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1666201654675},{\"ID\":\"SF1.1\",\"unlockedOn\":1666396556449},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1668533490192},{\"ID\":\"GANG\",\"unlockedOn\":1668867250197},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1668954907599},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1668955027612},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1669208876810},{\"ID\":\"SF2.1\",\"unlockedOn\":1669423716199},{\"ID\":\"CORPORATION\",\"unlockedOn\":1669431816190},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1671198038341},{\"ID\":\"SF3.1\",\"unlockedOn\":1671300458277},{\"ID\":\"CHALLENGE_BN1\",\"unlockedOn\":1671822590337},{\"ID\":\"SF4.1\",\"unlockedOn\":1674137591582},{\"ID\":\"SF5.1\",\"unlockedOn\":1675551633160},{\"ID\":\"N00DLES\",\"unlockedOn\":1677761263550},{\"ID\":\"SF10.1\",\"unlockedOn\":1680550899708},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1683499237184},{\"ID\":\"KARMA_1000000\",\"unlockedOn\":1683585524648},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1686441026190},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1686518683455},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1686519223506},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1688038167678},{\"ID\":\"ALL_HACKNET_SERVER\",\"unlockedOn\":1688038167687},{\"ID\":\"MAX_HACKNET_SERVER\",\"unlockedOn\":1688038167689},{\"ID\":\"SF9.1\",\"unlockedOn\":1688302024803},{\"ID\":\"NEUROFLUX_255\",\"unlockedOn\":1689366941906},{\"ID\":\"FAST_BN\",\"unlockedOn\":1689431425450},{\"ID\":\"SF12.1\",\"unlockedOn\":1689714316805},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1696862815306},{\"ID\":\"SF6.1\",\"unlockedOn\":1697665718942},{\"ID\":\"SF7.1\",\"unlockedOn\":1699191969386},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1701305531389}],\"terminalCommandHistory\":[\"run bootstrap.js \",\"nano spend-hashes.js \",\"run bootstrap.js \",\"nano spend-hashes.js \",\"run bootstrap.js \",\"home ; nano buy-hacknet-servers.js\",\"top\",\"run bootstrap.js \",\"home ; nano spend-hashes.js\",\"nano *.js\",\"run bootstrap.js \",\"run list-server-security-level.js \",\"nano buy-hacknet-servers.js \",\"run bootstrap.js \",\"nano spend-hashes.js \",\"home\",\"nano buy-hacknet-servers.js \",\"run bootstrap.js \",\"top\",\"run bootstrap.js \",\"run buy-hacknet-servers.js \",\"nano buy-hacknet-servers.js \",\"run bootstrap.js \",\"home ; run fetch-scripts.js \",\"connect The-Cave \",\"connect w0r1d_d43m0n \",\"analyze \",\"hack\",\"run bootstrap.js \",\"nano spend-hashes.js \",\"run bootstrap.js \",\"connect darkweb \",\"buy -l;\",\"home ; run buy-hacknet-servers.js\",\"run bootstrap.js \",\"run list-player-karma.js \",\"nano manage-sleeves.js \",\"run list-player-karma.js \",\"run bootstrap.js \",\"run list-player-karma.js \",\"nano manage-sleeves.js \",\"top\",\"kill manage-sleeves.js \",\"run manage-sleeves.js \",\"run bootstrap.js \",\"run buy-servers.js \",\"run bootstrap.js \",\"nano buy-hacknet-servers.js \",\"run buy-hacknet-servers.js \",\"nano spend-hashes.js \"],\"lastUpdate\":1703860637676,\"lastSave\":1703860628677,\"totalPlaytime\":41817021600,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":25384,\"factionWorkType\":\"hacking\",\"factionName\":\"The Covenant\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"10c510f1398e51\",\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"Bladeburners\",\"Shadows of Anarchy\"]}}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"5.0.5.9\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"ServerProfiler.exe\",\"DeepscanV2.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"launch-hacking.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork, buildPath } from \\\"./scan.js\\\";\\nimport { buildHackingProgramList, countAvailablePrograms } from \\\"./hacking-programs.js\\\";\\n\\n/** @param {NS} ns */\\nasync function openPorts(ns, hackingPrograms, target) {\\n\\tfor (const program of hackingPrograms) {\\n\\t\\tif (ns.fileExists(program.executableName, \\\"home\\\")) {\\n\\t\\t\\tconst executable = program['functionName'].bind(ns);\\n\\t\\t\\tawait executable(target);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction launchScript(ns, script, server) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\tconst scriptNumThreads = ~~(availableRam / scriptRam);\\n\\n\\tif (scriptNumThreads > 0) {\\n\\t\\tns.exec(script, server, scriptNumThreads);\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tconst replace = false;  // Replace an existing script\\n\\n\\twhile (true) {\\n\\t\\tconst fullServerList = scanAllNetwork(ns, 'home');\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tfor (const server of filteredServerList) {\\n\\t\\t\\tns.print(`Current server: ${server}`);\\n\\n\\t\\t\\tconst playerHackingLevel = ns.getHackingLevel();\\n\\t\\t\\tconst hackingPrograms = buildHackingProgramList(ns);\\n\\t\\t\\tconst numberAvailablePrograms = countAvailablePrograms(ns, hackingPrograms);\\n\\n\\t\\t\\t// Check server level vs player level\\n\\t\\t\\tconst machineHackingLevel = ns.getServerRequiredHackingLevel(server);\\n\\t\\t\\tns.print(`Level player: ${playerHackingLevel}, level machine: ${machineHackingLevel}`);\\n\\n\\t\\t\\t// Check number of ports required vs number of programs available\\n\\t\\t\\tconst requiredNumberOfPorts = ns.getServerNumPortsRequired(server);\\n\\t\\t\\tns.print(`Required num ports: ${requiredNumberOfPorts}, number available programs: ${numberAvailablePrograms}`);\\n\\n\\t\\t\\tif (playerHackingLevel < machineHackingLevel) {\\n\\t\\t\\t\\tns.print('----------\\\\n');\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (numberAvailablePrograms < requiredNumberOfPorts) {\\n\\t\\t\\t\\tns.print('----------\\\\n');\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!ns.hasRootAccess(server)) {\\n\\t\\t\\t\\tawait openPorts(ns, hackingPrograms, server);\\n\\t\\t\\t\\tns.nuke(server);\\n\\n\\t\\t\\t\\tif (server == 'w0r1d_d43m0n') {\\n\\t\\t\\t\\t\\tns.tprint('w0r1d_d43m0n is now root-accessible');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.print(`hasRootAccess: ${ns.hasRootAccess(server)}`);\\n\\n\\t\\t\\tconst isBackdoorInstalled = ns.getServer(server).backdoorInstalled;\\n\\t\\t\\tns.print(`isBackdoorInstalled: ${isBackdoorInstalled}`);\\n\\t\\t\\tif (ns.hasRootAccess(server) && !isBackdoorInstalled && server != 'w0r1d_d43m0n') {\\n\\t\\t\\t\\tconst path = await buildPath(ns, server);\\n\\t\\t\\t\\tfor (let item of path) {\\n\\t\\t\\t\\t\\t// ns.print(`Connecting to ${item} from ${ns.singularity.getCurrentServer()}`);\\n\\t\\t\\t\\t\\tif (!ns.singularity.connect(item)) {\\n\\t\\t\\t\\t\\t\\tns.print(`Error while connecting to ${item}`);\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tns.print('Installing backdoor');\\n\\t\\t\\t\\tawait ns.singularity.installBackdoor();\\n\\t\\t\\t\\tns.print('Backdoor installed');\\n\\n\\t\\t\\t\\tfor (let item of path.reverse()) {\\n\\t\\t\\t\\t\\tif (!ns.singularity.connect(item)) {\\n\\t\\t\\t\\t\\t\\tns.print(`Error while connecting to ${item}`);\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (replace) {\\n\\t\\t\\t\\tns.killall(server);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (replace || !ns.fileExists('hack-server.js', server)) {\\n\\t\\t\\t\\tconst scpStatus = ns.scp('hack-server.js', server, 'home');\\n\\t\\t\\t\\tif (!scpStatus) {\\n\\t\\t\\t\\t\\tns.print(`Failed to copy hack-server.js on ${server}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!ns.isRunning('hack-server.js', server)) {\\n\\t\\t\\t\\tlaunchScript(ns, 'hack-server.js', server);\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.print('----------\\\\n');\\n\\t\\t}\\n\\n\\t\\tif (replace) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000 * 5);\\n\\t}\\n}\\n\",\"filename\":\"launch-hacking.js\",\"server\":\"home\"}}],[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"home\"}}],[\"list-server-prices.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tfor (let i = 2; i < 21; i++) {\\n\\t\\tconst serverRam = Math.pow(2.0, i);\\n\\t\\tconst serverCost = ns.getPurchasedServerCost(serverRam);\\n\\t\\tns.tprint(`Server ram: ${serverRam}`);\\n\\t\\tns.tprint(`Server cost: ${formatNumber(serverCost)}\\\\$`);\\n\\t\\tns.tprint(\\\"\\\\n\\\");\\n\\t}\\n}\\n\",\"filename\":\"list-server-prices.js\",\"server\":\"home\"}}],[\"scan.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport function scanAllNetwork(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nexport async function buildPath(ns, server) {\\n\\tlet pathList = [['home']];\\n\\n\\twhile (true) {\\n\\t\\tconst currentPath = pathList.pop();\\n\\t\\tconst lastItem = currentPath.pop();\\n\\t\\tconst neighbors = ns.scan(lastItem);\\n\\t\\tconst neighborsWithoutServers = neighbors.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-') && !currentPath.includes(name));\\n\\n\\t\\tfor (let neighbor of neighborsWithoutServers) {\\n\\t\\t\\tlet newPath = currentPath.slice();\\n\\t\\t\\tnewPath.push(lastItem);\\n\\t\\t\\tnewPath.push(neighbor);\\n\\n\\t\\t\\tif (neighbor == server) {\\n\\t\\t\\t\\treturn newPath;\\n\\t\\t\\t}\\n\\n\\t\\t\\tpathList.unshift(newPath);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(250);  // Just so that the editor does not complain...\\n\\t}\\n}\\n\",\"filename\":\"scan.js\",\"server\":\"home\"}}],[\"buy-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan\\\";\\n\\nfunction generateUUID() {\\n  // https://stackoverflow.com/questions/105034/how-do-i-create-a-guid-uuid\\n  // crypto.randomUUID();\\n  // crypto.getRandomValues();\\n}\\n\\n/** @param {NS} ns */\\nfunction launchScript(ns, scriptName, server) {\\n  const scpStatus = ns.scp(scriptName, server, 'home');\\n  if (!scpStatus) {\\n    ns.print('Failed to copy ' + scriptName + ' on ' + server);\\n  }\\n\\n  ns.killall(server);\\n\\n  const maxRam = ns.getServerMaxRam(server);\\n  const usedRam = ns.getServerUsedRam(server);\\n  const availableRam = maxRam - usedRam;\\n  const scriptRam = ns.getScriptRam(scriptName, server);\\n  const numThreads = Math.floor(availableRam / scriptRam);\\n  if (numThreads > 0) {\\n    if (ns.exec(scriptName, server, numThreads) == 0) {\\n      ns.print('Error launching script');\\n    }\\n  }\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  const BUYING_DELAY = 250;\\n  const UPGRADING_DELAY = 5 * 1000;\\n  const FOLLOWING_BATCH_DELAY = 1000 * 60 * 5;\\n  const HOME_SERVER = 'home';\\n\\n  let targetRam = 4;\\n  while (targetRam <= ns.getPurchasedServerMaxRam()) {\\n    const maxNumberOfServers = ns.getPurchasedServerLimit();\\n    const availableMoney = ns.getServerMoneyAvailable('home');\\n    const serverCost = ns.getPurchasedServerCost(targetRam);\\n\\n    if (availableMoney < maxNumberOfServers * serverCost) {\\n      targetRam /= 2;\\n      break;\\n    }\\n\\n    targetRam *= 2;\\n  }\\n\\n  if (targetRam < 8) {\\n    targetRam = 8;\\n  }\\n\\n  ns.print(`Starting target ram: ${targetRam}`);\\n\\n  // Purchase missing servers\\n  while (true) {\\n    // List current servers\\n    const serverList = scanAllNetwork(ns);\\n    let purchasedServers = serverList.filter(name => name.startsWith('neighbor-'));\\n\\n    // Stopping criteria\\n    if (purchasedServers.length == ns.getPurchasedServerLimit()) {\\n      break;\\n    }\\n\\n    // If limit is not reached, buy server at current targetRam\\n    if (ns.getPurchasedServerCost(targetRam) < ns.getServerMoneyAvailable(HOME_SERVER)) {\\n      const name = `neighbor-${purchasedServers.length}`;\\n      ns.print(`Purchasing server ${name}`);\\n      ns.purchaseServer(name, targetRam);\\n      purchasedServers.push(name);\\n    }\\n\\n    await ns.sleep(BUYING_DELAY);\\n  }\\n\\n  const purchasedServers = scanAllNetwork(ns).filter(name => name.startsWith('neighbor-'));\\n  ns.print(`Purchased servers: ${purchasedServers}`);\\n\\n  targetRam *= 2;\\n  while (true) {\\n    // Stopping criteria\\n    let countServerWithTargetRam = 0;\\n    for (const purchasedServer of purchasedServers) {\\n      const purchasedServerRam = ns.getServer(purchasedServer).maxRam;\\n      if (purchasedServerRam >= targetRam) {\\n        countServerWithTargetRam++;\\n      }\\n    }\\n\\n    ns.print(`Number of servers at target (target: ${ns.formatRam(targetRam)} / max: ${ns.formatRam(ns.getPurchasedServerMaxRam())}): ${countServerWithTargetRam} vs ${ns.getPurchasedServerLimit()}`);\\n    if (countServerWithTargetRam == ns.getPurchasedServerLimit()) {\\n      if (targetRam >= ns.getPurchasedServerMaxRam()) {\\n        break;\\n      }\\n\\n      targetRam *= 2;\\n\\n      await ns.sleep(FOLLOWING_BATCH_DELAY);\\n    }\\n\\n    for (const purchasedServer of purchasedServers) {\\n      const purchasedServerRam = ns.getServer(purchasedServer).maxRam;\\n      if (purchasedServerRam < targetRam) {\\n        const moneyAvailable = ns.getServerMoneyAvailable('home');\\n        const upgradeCost = ns.getPurchasedServerUpgradeCost(purchasedServer, targetRam);\\n        if (upgradeCost < moneyAvailable) {\\n          if (ns.upgradePurchasedServer(purchasedServer, targetRam)) {\\n            ns.print(`Upgraded ${purchasedServer} to ${targetRam}Gb with cost of ${ns.formatNumber(upgradeCost)}\\\\$`);\\n            launchScript(ns, 'hack-remote.js', purchasedServer);\\n          } else {\\n            ns.print(`Error while upgrading purchased server ${purchasedServer} to ${targetRam}Gb`);\\n          }\\n        }\\n      }\\n    }\\n\\n    await ns.sleep(UPGRADING_DELAY);\\n  }\\n}\\n\",\"filename\":\"buy-servers.js\",\"server\":\"home\"}}],[\"delete-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst fullServerList = scanAllNetwork(ns);\\n\\tconst serverList = fullServerList.filter(name => name.startsWith('neighbor-'));\\n\\n\\tfor (const server of serverList) {\\n\\t\\tns.tprint('Deleting: ' + server);\\n\\t\\tns.killall(server);\\n\\t\\tns.deleteServer(server);\\n\\t}\\n}\\n\",\"filename\":\"delete-servers.js\",\"server\":\"home\"}}],[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"home\"}}],[\"list-server-money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst fullServerList = scanAllNetwork(ns);\\n\\tconst serverList = fullServerList.filter(name => !name.startsWith('neighbor-'));\\n\\n\\tfor (let server of serverList) {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(server);\\n\\t\\tconst maxMoneyAvailable = ns.getServerMaxMoney(server);\\n\\n\\t\\tns.tprint(`Server: ${server} --> ${ns.formatNumber(moneyAvailable)}\\\\$ / ${ns.formatNumber(maxMoneyAvailable)}\\\\$`);\\n\\t}\\n}\\n\",\"filename\":\"list-server-money.js\",\"server\":\"home\"}}],[\"fetch-scripts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    if (ns.getHostname() !== \\\"home\\\") {\\n        throw new Exception(\\\"Run the script from home\\\");\\n    }\\n\\n    const scripts = [\\n        'bootstrap.js',\\n        'buy-darkweb-programs.js',\\n        'buy-hacknet-servers.js',\\n        'buy-servers.js',\\n        'delete-servers.js',\\n        'fetch-scripts.js',\\n        'hack-remote.js',\\n        'hack-server.js',\\n        'hacking-programs.js',\\n        'launch-hacking.js',\\n        'list-player-karma.js',\\n        'list-server-money.js',\\n        'list-server-prices.js',\\n        'list-server-security-level.js',\\n        'manage-bladeburner.js',\\n        'manage-corporation.js',\\n        'manage-gang.js',\\n        'manage-sleeves.js',\\n        'scan.js',\\n        'spend-hashes.js'\\n    ];\\n\\n    for (const scriptName of scripts) {\\n        ns.tprint(`Fetching: ${scriptName}`);\\n        await ns.wget(\\n            `https://raw.githubusercontent.com/antoinedube/bitburner-scripts/main/scripts/${scriptName}`,\\n            `${scriptName}`\\n        );\\n\\n        await ns.sleep(250);\\n    }\\n}\\n\",\"filename\":\"fetch-scripts.js\",\"server\":\"home\"}}],[\"list-player-karma.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst karma = ns.heart.break();\\n\\tns.tprint(`karma: ${karma.toFixed(2)}`);\\n}\\n\",\"filename\":\"list-player-karma.js\",\"server\":\"home\"}}],[\"list-server-security-level.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst fullServerList = scanAllNetwork(ns);\\n\\tconst serverList = fullServerList.filter(name => !name.startsWith('neighbor-'));\\n\\n\\tfor (let server of serverList) {\\n\\t\\tconst currentSecurityLevel = ns.getServerSecurityLevel(server);\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(server)\\n\\n\\t\\tns.tprint(`Server: ${server} --> ${ns.formatNumber(currentSecurityLevel)} / ${ns.formatNumber(minSecurityLevel)}`);\\n\\t}\\n}\\n\",\"filename\":\"list-server-security-level.js\",\"server\":\"home\"}}],[\"bootstrap.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  const scripts = [\\n    'launch-hacking.js',\\n    'spend-hashes.js',\\n    'buy-hacknet-servers.js',\\n    'buy-servers.js',\\n    'manage-sleeves.js',\\n    'manage-gang.js',\\n    'buy-darkweb-programs.js',\\n    /* 'manage-bladeburner.js' */\\n  ];\\n\\n  if (ns.isRunning('hack-remote.js')) {\\n    ns.kill('hack-remote.js', 'home');\\n  }\\n\\n  for (let script of scripts) {\\n    if (!ns.isRunning(script)) {\\n      ns.tprint(`Launching script: ${script}`);\\n      ns.run(script);\\n\\n      await ns.sleep(250);\\n    }\\n  }\\n\\n  await ns.sleep(2 * 1000);\\n\\n  const hackingScript = 'hack-remote.js';\\n  const scriptRam = ns.getScriptRam(hackingScript);\\n  const serverMaxRam = ns.getServerMaxRam('home');\\n  const serverUsedRam = ns.getServerUsedRam('home');\\n  const availableRam = serverMaxRam - serverUsedRam;\\n  const scriptNumThreads = ~~(availableRam / scriptRam);\\n\\n  if (scriptNumThreads > 0) {\\n    ns.tprint(`Launching script: ${hackingScript} with ${scriptNumThreads} threads`);\\n    ns.exec(hackingScript, 'home', scriptNumThreads);\\n  }\\n\\n  if (!ns.bladeburner.inBladeburner()) {\\n    ns.singularity.universityCourse('Rothman University', 'Computer Science');\\n  }\\n}\\n\",\"filename\":\"bootstrap.js\",\"server\":\"home\"}}],[\"manage-gang.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction displayMembersInformation(ns, memberName) {\\n\\tconst memberInfo = ns.gang.getMemberInformation(memberName);\\n\\tconst hackingLevel = memberInfo['hack'];\\n\\tconst currentTask = memberInfo['task'];\\n\\tns.print(`Member: ${memberName}\\\\thacking level: ${hackingLevel}\\\\ttask: ${currentTask}`);\\n}\\n\\n/** @param {NS} ns */\\nfunction assignMember(ns, name, task = '') {\\n\\tconst memberInfo = ns.gang.getMemberInformation(name);\\n\\tconst hackingLevel = memberInfo['hack'];\\n\\tconst currentTask = memberInfo['task'];\\n\\n\\t/*\\n\\tTask names:\\n\\t\\t\\t- Unassigned\\n\\t\\t\\t- Ransomware\\n\\t\\t\\t- Phishing\\n\\t\\t\\t- Identity Theft\\n\\t\\t\\t- DDoS Attacks\\n\\t\\t\\t- Plant Virus\\n\\t\\t\\t- Fraud & Counterfeiting,\\n\\t\\t\\t- Money Laundering\\n\\t\\t\\t- Cyberterrorism\\n\\t\\t\\t- Ethical Hacking\\n\\t\\t\\t- Vigilante Justice\\n\\t\\t\\t- Train Combat\\n\\t\\t\\t- Train Hacking\\n\\t\\t\\t- Train Charisma\\n\\t\\t\\t- Territory Warfare\\n\\t*/\\n\\tif (task != '') {\\n\\t\\tif (currentTask != task) {\\n\\t\\t\\tns.gang.setMemberTask(name, task);\\n\\t\\t}\\n\\t} else if (hackingLevel < 120) {\\n\\t\\tif (currentTask != 'Cyberterrorism') {\\n\\t\\t\\tns.gang.setMemberTask(name, 'Cyberterrorism');\\n\\t\\t}\\n\\t} else {\\n\\t\\tif (currentTask != 'Money Laundering') {\\n\\t\\t\\tns.gang.setMemberTask(name, 'Money Laundering');\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction recruitIfPossible(ns) {\\n\\tif (!ns.gang.canRecruitMember()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst gangMembers = ns.gang.getMemberNames();\\n\\tconst newGangMemberName = `audrey-${gangMembers.length + 1}`;\\n\\tns.gang.recruitMember(newGangMemberName);\\n\\tassignMember(ns, newGangMemberName);\\n}\\n\\n/** @param {NS} ns */\\nfunction reassignMembersAccordingToWantedLevelPenalty(ns) {\\n\\tconst gangInformation = ns.gang.getGangInformation();\\n\\t/*\\n\\tGang information structure:\\n\\t{\\n\\t\\t\\t\\\"faction\\\":\\\"NiteSec\\\",\\n\\t\\t\\t\\\"isHacking\\\":true,\\n\\t\\t\\t\\\"moneyGainRate\\\":213.18959642323077,\\n\\t\\t\\t\\\"power\\\":1,\\n\\t\\t\\t\\\"respect\\\":846.631799960249,\\n\\t\\t\\t\\\"respectGainRate\\\":0,\\n\\t\\t\\t\\\"territory\\\":0.14285714285714293,\\n\\t\\t\\t\\\"territoryClashChance\\\":0,\\n\\t\\t\\t\\\"territoryWarfareEngaged\\\":false,\\n\\t\\t\\t\\\"wantedLevel\\\":310.2473419438491,\\n\\t\\t\\t\\\"wantedLevelGainRate\\\":-0.025302857142857158,\\n\\t\\t\\t\\\"wantedPenalty\\\":0.7318238952487159\\n\\t}\\n\\t*/\\n\\n\\tconst wantedLevelPenalty = 1.0 - gangInformation['wantedPenalty'];\\n\\tconst gangRespect = gangInformation['respect'];\\n\\tif (wantedLevelPenalty > 0.25 && gangRespect > 50) {\\n\\t\\tns.gang.getMemberNames().map(memberName => {\\n\\t\\t\\tassignMember(ns, memberName, 'Ethical Hacking');\\n\\t\\t});\\n\\t} else {\\n\\t\\tns.gang.getMemberNames().map(memberName => {\\n\\t\\t\\tassignMember(ns, memberName);\\n\\t\\t});\\n\\t}\\n}\\n\\nfunction ascendIfGainIsWorth(ns) {\\n\\tns.gang.getMemberNames().map(memberName => {\\n\\t\\tconst results = ns.gang.getAscensionResult(memberName);\\n\\n\\t\\tif (results === undefined) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst hackingMultWithAscension = results['hack'];\\n\\n\\t\\tif (hackingMultWithAscension > 2.0) {\\n\\t\\t\\tns.gang.ascendMember(memberName);\\n\\t\\t\\tassignMember(ns, memberName);\\n\\t\\t}\\n\\t});\\n}\\n\\nfunction buyEquipment(ns) {\\n\\t/*\\n\\t\\t\\t[\\n\\t\\t\\t\\t\\t\\\"Baseball Bat\\\",\\n\\t\\t\\t\\t\\t\\\"Katana\\\",\\n\\t\\t\\t\\t\\t\\\"Glock 18C\\\",\\n\\t\\t\\t\\t\\t\\\"P90C\\\",\\n\\t\\t\\t\\t\\t\\\"Steyr AUG\\\",\\n\\t\\t\\t\\t\\t\\\"AK-47\\\",\\n\\t\\t\\t\\t\\t\\\"M15A10 Assault Rifle\\\",\\n\\t\\t\\t\\t\\t\\\"AWM Sniper Rifle\\\",\\n\\t\\t\\t\\t\\t\\\"Bulletproof Vest\\\",\\n\\t\\t\\t\\t\\t\\\"Full Body Armor\\\",\\n\\t\\t\\t\\t\\t\\\"Liquid Body Armor\\\",\\n\\t\\t\\t\\t\\t\\\"Graphene Plating Armor\\\",\\n\\t\\t\\t\\t\\t\\\"Ford Flex V20\\\",\\n\\t\\t\\t\\t\\t\\\"ATX1070 Superbike\\\",\\n\\t\\t\\t\\t\\t\\\"Mercedes-Benz S9001\\\",\\n\\t\\t\\t\\t\\t\\\"White Ferrari\\\",\\n\\t\\t\\t\\t\\t\\\"NUKE Rootkit\\\",\\n\\t\\t\\t\\t\\t\\\"Soulstealer Rootkit\\\",\\n\\t\\t\\t\\t\\t\\\"Demon Rootkit\\\",\\n\\t\\t\\t\\t\\t\\\"Hmap Node\\\",\\n\\t\\t\\t\\t\\t\\\"Jack the Ripper\\\",\\n\\t\\t\\t\\t\\t\\\"Bionic Arms\\\",\\n\\t\\t\\t\\t\\t\\\"Bionic Legs\\\",\\n\\t\\t\\t\\t\\t\\\"Bionic Spine\\\",\\n\\t\\t\\t\\t\\t\\\"BrachiBlades\\\",\\n\\t\\t\\t\\t\\t\\\"Nanofiber Weave\\\",\\n\\t\\t\\t\\t\\t\\\"Synthetic Heart\\\",\\n\\t\\t\\t\\t\\t\\\"Synfibril Muscle\\\",\\n\\t\\t\\t\\t\\t\\\"BitWire\\\",\\n\\t\\t\\t\\t\\t\\\"Neuralstimulator\\\",\\n\\t\\t\\t\\t\\t\\\"DataJack\\\",\\n\\t\\t\\t\\t\\t\\\"Graphene Bone Lacings\\\"\\n\\t\\t\\t\\t\\t]\\n\\t*/\\n\\tconst hackingUpgrades = ['NUKE Rootkit', 'Soulstealer Rootkit', 'Demon Rootkit', 'Hmap Node', 'Jack the Ripper'];\\n\\tconst hackingAugmentations = ['BitWire', 'Neuralstimulator', 'DataJack'];\\n\\n\\tns.gang.getMemberNames().map(memberName => {\\n\\t\\tconst memberInfo = ns.gang.getMemberInformation(memberName);\\n\\t\\tconst memberHackingUpgrade = memberInfo['upgrades'];\\n\\t\\tconst memberHackingAugmentations = memberInfo['augmentations'];\\n\\n\\t\\thackingUpgrades.map(upgrade => {\\n\\t\\t\\tif (!memberHackingUpgrade.includes(upgrade) && ns.gang.getEquipmentCost(upgrade) < ns.getServerMoneyAvailable('home')) {\\n\\t\\t\\t\\tns.gang.purchaseEquipment(memberName, upgrade);\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\thackingAugmentations.map(augmentation => {\\n\\t\\t\\tif (!memberHackingAugmentations.includes(augmentation) && ns.gang.getEquipmentCost(augmentation) < ns.getServerMoneyAvailable('home')) {\\n\\t\\t\\t\\tns.gang.purchaseEquipment(memberName, augmentation);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t});\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tlet counter = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!ns.gang.inGang()) {\\n\\t\\t\\tns.print(`Not in gang. Waiting.`);\\n\\t\\t\\tawait ns.sleep(1000 * 60);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.gang.getMemberNames().map(memberName => displayMembersInformation(ns, memberName));\\n\\n\\t\\trecruitIfPossible(ns);\\n\\t\\tascendIfGainIsWorth(ns);\\n\\t\\treassignMembersAccordingToWantedLevelPenalty(ns);\\n\\t\\tbuyEquipment(ns);\\n\\n\\t\\tif (counter >= 25) {\\n\\t\\t\\tns.gang.getMemberNames().map(memberName => assignMember(ns, memberName));\\n\\t\\t\\tcounter = 0;\\n\\t\\t} else if (counter >= 23) {\\n\\t\\t\\tns.gang.getMemberNames().map(memberName => assignMember(ns, memberName, 'Ethical Hacking'));\\n\\t\\t}\\n\\n\\t\\tcounter++;\\n\\t\\tawait ns.sleep(1000 * 30);\\n\\t}\\n}\\n\",\"filename\":\"manage-gang.js\",\"server\":\"home\"}}],[\"manage-sleeves.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nasync function setSleevesTask(ns) {\\n\\tfor (var i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\tconst sleeve = ns.sleeve.getSleeve(i);\\n\\t\\tns.print(`Sleeve ${i} has:`);\\n\\t\\tns.print(`- sync=${sleeve.sync}`);\\n\\t\\tns.print(`- shock=${sleeve.shock}`);\\n\\t\\tns.print(`--------------------------------------------`);\\n\\n\\t\\tif (sleeve.sync < 100) {\\n\\t\\t\\tns.print('Synchronize');\\n\\t\\t\\tns.sleeve.setToSynchronize(i);\\n\\t\\t} else if (sleeve.shock > 0) {\\n\\t\\t\\tns.print('Shock recovery');\\n\\t\\t\\tns.sleeve.setToShockRecovery(i);\\n\\t\\t} else {\\n\\t\\t\\tns.print('Manual task');\\n\\t\\t\\t// Ref: https://github.com/danielyxie/bitburner/blob/dev/src/Enums.ts\\n\\t\\t\\t// ns.sleeve.setToCommitCrime(i, 'Assassination');\\n\\t\\t\\t// ns.sleeve.setToCommitCrime(i, 'Heist');\\n\\t\\t\\tns.sleeve.setToCommitCrime(i, 'Mug');\\n\\t\\t\\t// ns.sleeve.setToCommitCrime(i, 'Homicide');\\n\\t\\t\\t// ns.sleeve.setToUniversityCourse(i, 'Rothman University', 'Computer Science');\\n\\t\\t\\t// ns.sleeve.setToUniversityCourse(i, 'Rothman University', 'Algorithms');\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\n\\twhile (true) {\\n\\t\\tawait setSleevesTask(ns);\\n\\n\\t\\tawait ns.sleep(1000 * 15);\\n\\t}\\n}\\n\",\"filename\":\"manage-sleeves.js\",\"server\":\"home\"}}],[\"spend-hashes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nasync function spendHashesOnAction(ns, action, target, amount) {\\n  while (ns.hacknet.numHashes() < ns.hacknet.hashCost(action, amount)) {\\n    await ns.sleep(1000);\\n  }\\n\\n  if (!ns.hacknet.spendHashes(action, target, amount)) {\\n    ns.print(`Error while executing ${action} on ${target} with n=${amount}`);\\n  }\\n}\\n\\n/** @param {NS} ns */\\nfunction selectRandomServer(ns) {\\n  const serversToAvoid = ['CSEC', 'I.I.I.I', 'run4theh111z', 'avmnite-02h', '.', 'darkweb', 'The-Cave', 'w0r1d_d43m0n'];\\n\\n  const fullServerList = scanAllNetwork(ns, 'home');\\n  const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-') && !serversToAvoid.includes(name));\\n  const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n  return filteredServerList[serverIndex];\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  /*\\n          const upgrades = ns.hacknet.getHashUpgrades();\\n\\n          [\\n                          \\\"Sell for Money\\\",\\n                          \\\"Sell for Corporation Funds\\\",\\n                          \\\"Reduce Minimum Security\\\",\\n                          \\\"Increase Maximum Money\\\",\\n                          \\\"Improve Studying\\\",\\n                          \\\"Improve Gym Training\\\",\\n                          \\\"Exchange for Corporation Research\\\",\\n                          \\\"Exchange for Bladeburner Rank\\\",\\n                          \\\"Exchange for Bladeburner SP\\\",\\n                          \\\"Generate Coding Contract\\\",\\n                          \\\"Company Favor\\\"\\n          ]\\n  */\\n\\n  const ten_trillions = 10 * 1000 * 1000 * 1000 * 1000;  // k -> m -> g -> t\\n  const low_high_hack_exp_limit = 1500;\\n\\n  for (let i = 0; i < 5; i++) {\\n    ns.print(`--> Improve studying ${i + 1} of 5`);\\n    await spendHashesOnAction(ns, 'Improve Studying', 'home', 1);\\n  }\\n\\n  while (true) {\\n    const r = Math.random();\\n    if (r < 0.1) {\\n      const target = selectRandomServer(ns);\\n      const minLevel = ns.getServerMinSecurityLevel(target);\\n      if (minLevel > 1.0 && ns.getHackingLevel() > low_high_hack_exp_limit) {\\n        await spendHashesOnAction(ns, \\\"Reduce Minimum Security\\\", target, 1);\\n        const minLevelAfter = ns.getServerMinSecurityLevel(target);\\n        ns.print(`Reduced minimum security level on ${target} from ${minLevel} to ${minLevelAfter}`);\\n      }\\n    } else if (r < 0.2) {\\n      const target = selectRandomServer(ns);\\n      const maxMoney = ns.getServerMaxMoney(target);\\n      if (maxMoney < ten_trillions && ns.getHackingLevel() > low_high_hack_exp_limit) {\\n        await spendHashesOnAction(ns, \\\"Increase Maximum Money\\\", target, 1);\\n        const maxMoneyAfter = ns.getServerMaxMoney(target);\\n        ns.print(`Increased maximum money on ${target} from ${ns.formatNumber(maxMoney)}\\\\$ to ${ns.formatNumber(maxMoneyAfter)}\\\\$`);\\n      }\\n      /*\\n      } else if (r < 0.3) {\\n              if (ns.bladeburner.inBladeburner()) {\\n                      await spendHashesOnAction(ns, 'Exchange for Bladeburner Rank', 'home', 1);\\n              }\\n      } else if (r < 0.4) {\\n              if (ns.bladeburner.inBladeburner()) {\\n                      await spendHashesOnAction(ns, 'Exchange for Bladeburner SP', 'home', 1);\\n              }\\n      */\\n    } else {\\n      await spendHashesOnAction(ns, \\\"Sell for Money\\\", \\\"target\\\", 5);\\n      ns.print(`Sold hashes for money`);\\n    }\\n\\n    await ns.sleep(250);\\n  }\\n}\\n\",\"filename\":\"spend-hashes.js\",\"server\":\"home\"}}],[\"manage-bladeburner.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction findNextAction(ns) {\\n\\tconst orderOfTypes = ['Operation', 'Contract', 'General'];\\n\\tconst targetedTasks = {\\n\\t\\t'General': ['Training'],\\n\\t\\t'Contract': ['Tracking', 'Bounty Hunter', 'Retirement'],\\n\\t\\t'Operation': ['Investigation', 'Stealth Retirement Operation', 'Assassination']\\n\\t}\\n\\n\\tconst lowStaminaTask = 'Hyperbolic Regeneration Chamber';\\n\\n\\tconst [currentStamina, maxStamina] = ns.bladeburner.getStamina();\\n\\tconst playerRank = ns.bladeburner.getRank();\\n\\n\\tif (currentStamina < 0.80 * maxStamina) {\\n\\t\\treturn {\\n\\t\\t\\t'type': 'General',\\n\\t\\t\\t'name': lowStaminaTask\\n\\t\\t};\\n\\t}\\n\\n\\t// BlackOps have a special structure\\n\\tconst nextBlackOp = ns.bladeburner.getNextBlackOp();\\n\\tif (nextBlackOp != undefined) {\\n\\n\\t\\tconst [lowerBound, _] = ns.bladeburner.getActionEstimatedSuccessChance('BlackOp', nextBlackOp['name']);\\n\\t\\tif (0.9 < lowerBound && nextBlackOp['rank'] <= playerRank) {\\n\\t\\t\\treturn {\\n\\t\\t\\t\\t'type': 'BlackOp',\\n\\t\\t\\t\\t'name': nextBlackOp['name']\\n\\t\\t\\t};\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let actionType of orderOfTypes) {\\n\\t\\tconst actionNames = targetedTasks[actionType].reverse();\\n\\t\\tfor (let actionName of actionNames) {\\n\\t\\t\\tconst [lowerBound, _] = ns.bladeburner.getActionEstimatedSuccessChance(actionType, actionName);\\n\\t\\t\\tconst countRemaining = ns.bladeburner.getActionCountRemaining(actionType, actionName);\\n\\t\\t\\tif (0.8 < lowerBound && 0 < countRemaining) {\\n\\t\\t\\t\\treturn {\\n\\t\\t\\t\\t\\t'type': actionType,\\n\\t\\t\\t\\t\\t'name': actionName\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn {\\n\\t\\t'type': 'General',\\n\\t\\t'name': 'Training'\\n\\t};\\n}\\n\\n/** @param {NS} ns */\\nfunction upgradeBladeburnerSkills(ns) {\\n\\tconst targetedSkills = [\\n\\t\\t\\\"Blade's Intuition\\\",\\n\\t\\t\\\"Cloak\\\",\\n\\t\\t\\\"Short-Circuit\\\",\\n\\t\\t\\\"Digital Observer\\\",\\n\\t\\t\\\"Tracer\\\",\\n\\t\\t\\\"Hyperdrive\\\",\\n\\t\\t\\\"Hands of Midas\\\"\\n\\t];\\n\\n\\tfor (let skill of targetedSkills) {\\n\\t\\tconst skillCost = ns.bladeburner.getSkillUpgradeCost(skill);\\n\\t\\tconst numberSkillPoints = ns.bladeburner.getSkillPoints();\\n\\t\\tif (skillCost < numberSkillPoints) {\\n\\t\\t\\tns.bladeburner.upgradeSkill(skill);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tconst ten_seconds = 10 * 1000;\\n\\n\\twhile (!ns.bladeburner.inBladeburner()) {\\n\\t\\tns.print('Not in BladeBurner');\\n\\t\\tawait ns.sleep(ten_seconds);\\n\\t}\\n\\n\\tns.print('Managing bladeburner');\\n\\n\\twhile (true) {\\n\\t\\tconst currentAction = ns.bladeburner.getCurrentAction();\\n\\n\\t\\tconst newAction = findNextAction(ns);\\n\\t\\tif (currentAction['type'] != newAction['type'] || currentAction['name'] != newAction['name']) {\\n\\t\\t\\tconst result = ns.bladeburner.startAction(newAction['type'], newAction['name']);\\n\\t\\t\\tif (!result) {\\n\\t\\t\\t\\tns.print(`Unable to start action: ${JSON.stringify(newAction)}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tupgradeBladeburnerSkills(ns);\\n\\t\\tawait ns.sleep(ten_seconds);\\n\\t}\\n}\\n\",\"filename\":\"manage-bladeburner.js\",\"server\":\"home\"}}],[\"hacking-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport function buildHackingProgramList(ns) {\\n\\treturn [\\n\\t\\t{ name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\" },\\n\\t\\t{ name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\" },\\n\\t\\t{ name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\" },\\n\\t\\t{ name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\" },\\n\\t\\t{ name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\" }\\n\\t];\\n}\\n\\n/** @param {NS} ns */\\nexport function listAvailablePrograms(ns, hackingPrograms) {\\n\\tlet availablePrograms = [];\\n\\tfor (const program of hackingPrograms) {\\n\\t\\tif (ns.fileExists(program.executableName, \\\"home\\\")) {\\n\\t\\t\\tavailablePrograms.push(program);\\n\\t\\t}\\n\\t}\\n\\treturn availablePrograms;\\n}\\n\\n/** @param {NS} ns */\\nexport function countAvailablePrograms(ns, hackingPrograms) {\\n\\tconst availablePrograms = listAvailablePrograms(ns, hackingPrograms);\\n\\treturn availablePrograms.length;\\n}\\n\",\"filename\":\"hacking-programs.js\",\"server\":\"home\"}}],[\"buy-darkweb-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const SLEEP_DELAY = 15000;  // in milliseconds\\n    const HOME_SERVER = 'home';\\n    const TOR_ROUTER_PRICE = 200000;\\n\\n    if (!ns.hasTorRouter()) {\\n        ns.print('TOR router not purchased yet');\\n    }\\n\\n    while (!ns.hasTorRouter()) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(HOME_SERVER);\\n\\n        if (TOR_ROUTER_PRICE <= moneyAvailable) {\\n            if (ns.singularity.purchaseTor()) {\\n                ns.print('TOR router purchased');\\n            }\\n        }\\n\\n        await ns.sleep(SLEEP_DELAY);\\n    }\\n\\n    while (true) {\\n        const allHackingPrograms = ns.singularity.getDarkwebPrograms();\\n        const purchasedHackingPrograms = allHackingPrograms.filter((program) => ns.fileExists(program));\\n        const hackingProgramsToPurchase = allHackingPrograms.filter((program) => !ns.fileExists(program));\\n\\n        if (purchasedHackingPrograms.length == allHackingPrograms.length) {\\n            break;\\n        }\\n\\n        for (const program of hackingProgramsToPurchase) {\\n            const programCost = ns.singularity.getDarkwebProgramCost(program);\\n            const moneyAvailable = ns.getServerMoneyAvailable(HOME_SERVER);\\n\\n            if (programCost <= moneyAvailable) {\\n                if (ns.singularity.purchaseProgram(program)) {\\n                    ns.print(`Purchased ${program}`);\\n                }\\n            }\\n        }\\n\\n        await ns.sleep(SLEEP_DELAY);\\n    }\\n}\\n\",\"filename\":\"buy-darkweb-programs.js\",\"server\":\"home\"}}],[\"manage-corporation.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Ref: https://github.com/danielyxie/bitburner/blob/dev/markdown/bitburner.corporation.md\\n    if (ns.corporation.hasCorporation()) {\\n        ns.tprint('Player has corporation');\\n    } else {\\n        ns.tprint('Player does not have corporation');\\n    }\\n\\n    const corporation = ns.corporation.getCorporation();\\n    ns.tprint(`Corporation data:\\\\n${corporation}`);\\n}\\n\",\"filename\":\"manage-corporation.js\",\"server\":\"home\"}}],[\"buy-hacknet-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  const hacknetConstants = ns.formulas.hacknetServers.constants();\\n  /*\\n      ns.formulas.hacknetServers.constants()\\n      {\\n          \\\"HashesPerLevel\\\":0.001,\\n          \\\"BaseCost\\\":50000,\\n          \\\"RamBaseCost\\\":200000,\\n          \\\"CoreBaseCost\\\":1000000,\\n          \\\"CacheBaseCost\\\":10000000,\\n          \\\"PurchaseMult\\\":3.2,\\n          \\\"UpgradeLevelMult\\\":1.1,\\n          \\\"UpgradeRamMult\\\":1.4,\\n          \\\"UpgradeCoreMult\\\":1.55,\\n          \\\"UpgradeCacheMult\\\":1.85,\\n          \\\"MaxServers\\\":20,\\n          \\\"MaxLevel\\\":300,\\n          \\\"MaxRam\\\":8192,\\n          \\\"MaxCores\\\":128,\\n          \\\"MaxCache\\\":15\\n      }\\n  */\\n\\n  /*\\n  const targetCount = hacknetConstants['MaxServers'];\\n  const targetLevel = hacknetConstants['MaxLevel'];\\n  const targetRam = hacknetConstants['MaxRam'];\\n  const targetCore = hacknetConstants['MaxCores'];\\n  const targetCache = hacknetConstants['MaxCache'];\\n  */\\n\\n  const targetCount = 12;\\n  const targetLevel = 100;\\n  const targetRam = hacknetConstants['MaxRam'];\\n  const targetCore = 24;\\n  const targetCache = hacknetConstants['MaxCache'];\\n\\n  while (true) {\\n    if (ns.hacknet.numNodes() < targetCount) {\\n      const cost = ns.hacknet.getPurchaseNodeCost();\\n      if (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n        ns.hacknet.purchaseNode();\\n        ns.print('Bought net node');\\n      }\\n    }\\n\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n      if (ns.hacknet.getNodeStats(i).level < targetLevel) {\\n        const cost = ns.hacknet.getLevelUpgradeCost(i, 1);\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n          ns.hacknet.upgradeLevel(i, 1);\\n          const newLevel = ns.hacknet.getNodeStats(i).level;\\n          ns.print(`Upgrading node ${i} to level ${newLevel}`);\\n        }\\n      }\\n    }\\n\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n      if (ns.hacknet.getNodeStats(i).ram < targetRam) {\\n        const cost = ns.hacknet.getRamUpgradeCost(i, 1);\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n          ns.hacknet.upgradeRam(i, 1);\\n          const newLevel = ns.hacknet.getNodeStats(i).ram;\\n          ns.print(`Upgrading node ${i} to ram ${newLevel}`);\\n        }\\n      }\\n    }\\n\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n      if (ns.hacknet.getNodeStats(i).cores < targetCore) {\\n        const cost = ns.hacknet.getCoreUpgradeCost(i, 1);\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n          ns.hacknet.upgradeCore(i, 1);\\n          const newLevel = ns.hacknet.getNodeStats(i).cores;\\n          ns.print(`Upgrading node ${i} to cores ${newLevel}`);\\n        }\\n      }\\n    }\\n\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n      if (ns.hacknet.getNodeStats(i).cache < targetCache) {\\n        const cost = ns.hacknet.getCacheUpgradeCost(i, 1);\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n          ns.hacknet.upgradeCache(i, 1);\\n          const newLevel = ns.hacknet.getNodeStats(i).cache;\\n          ns.print(`Upgrading node ${i} to cache ${newLevel}`);\\n        }\\n      }\\n    }\\n\\n    let countCompletelyUpgraded = 0;\\n    if (ns.hacknet.numNodes() == targetCount) {\\n      for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n        const nodeStats = ns.hacknet.getNodeStats(i);\\n        const allLevelUpgraded = nodeStats.level == targetLevel;\\n        const allRamUpgraded = nodeStats.ram == targetRam;\\n        const allCoreUpgraded = nodeStats.cores == targetCore;\\n        const allCacheUpgraded = nodeStats.cache == targetCache;\\n\\n\\n        if (allLevelUpgraded && allRamUpgraded && allCoreUpgraded && allCacheUpgraded) {\\n          countCompletelyUpgraded++;\\n        }\\n      }\\n    }\\n\\n    if (countCompletelyUpgraded == targetCount) {\\n      break;\\n    }\\n\\n    await ns.sleep(500);\\n  }\\n}\\n\",\"filename\":\"buy-hacknet-servers.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"hacknet-server-0\",\"neighbor-0\",\"neighbor-1\",\"hacknet-server-1\",\"neighbor-2\",\"darkweb\",\"hacknet-server-2\",\"neighbor-3\",\"neighbor-4\",\"hacknet-server-3\",\"hacknet-server-4\",\"hacknet-server-5\",\"neighbor-5\",\"neighbor-6\",\"neighbor-7\",\"neighbor-8\",\"neighbor-9\",\"neighbor-10\",\"neighbor-11\",\"neighbor-12\",\"neighbor-13\",\"neighbor-14\",\"neighbor-15\",\"neighbor-16\",\"neighbor-17\",\"neighbor-18\",\"hacknet-server-6\",\"hacknet-server-7\",\"hacknet-server-8\",\"hacknet-server-9\",\"hacknet-server-10\",\"hacknet-server-11\",\"hacknet-server-12\",\"hacknet-server-13\",\"hacknet-server-14\",\"hacknet-server-15\",\"hacknet-server-16\",\"hacknet-server-17\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.032,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"launch-hacking.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.21,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15114.210000019923,\"ramUsage\":11.2,\"server\":\"home\",\"scriptKey\":\"launch-hacking.js*[]\",\"title\":\"launch-hacking.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"spend-hashes.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.213,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15114.010000019922,\"ramUsage\":6.05,\"server\":\"home\",\"scriptKey\":\"spend-hashes.js*[]\",\"title\":\"spend-hashes.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"buy-servers.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.216,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15113.41000001992,\"ramUsage\":9.45,\"server\":\"home\",\"scriptKey\":\"buy-servers.js*[]\",\"title\":\"buy-servers.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-sleeves.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.218,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15113.210000019919,\"ramUsage\":21.6,\"server\":\"home\",\"scriptKey\":\"manage-sleeves.js*[]\",\"title\":\"manage-sleeves.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-gang.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.223000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15113.010000019918,\"ramUsage\":24.7,\"server\":\"home\",\"scriptKey\":\"manage-gang.js*[]\",\"title\":\"manage-gang.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[0,0,0,121],\"sigma-cosmetics\":[0,0,0,66],\"phantasy\":[0,0,11,99],\"harakiri-sushi\":[0,0,33,132],\"joesguns\":[0,0,55,77],\"iron-gym\":[0,0,11,99],\"nectar-net\":[0,0,22,99],\"hong-fang-tea\":[0,0,11,66],\"crush-fitness\":[1506399082.5087175,33,11,55],\"catalyst\":[0,0,77,55],\"max-hardware\":[0,0,11,165],\"summit-uni\":[0,0,77,66],\"netlink\":[0,0,55,44],\"silver-helix\":[0,0,0,143],\"zer0\":[0,0,0,99],\"neo-net\":[0,0,33,66],\"n00dles\":[12044579.819728876,165,0,11],\"computek\":[3578314307.360964,22,22,33],\"CSEC\":[0,0,99,0],\"I.I.I.I\":[0,0,176,0],\"avmnite-02h\":[0,0,110,0],\"omega-net\":[0,0,33,110],\"rothman-uni\":[0,0,55,55],\"johnson-ortho\":[0,0,55,22],\"rho-construction\":[0,0,33,77],\"global-pharm\":[22965740572.753353,22,22,44],\"univ-energy\":[0,0,55,55],\"millenium-fitness\":[0,0,77,33],\"unitalife\":[7210407140.7862,22,66,33],\"syscore\":[3624430785.074724,11,44,33],\"zb-def\":[8305094192.241378,11,66,22],\"lexo-corp\":[0,0,55,22],\"snap-fitness\":[11332449271.015175,33,33,44],\"nova-med\":[14956669947.084831,22,22,55],\".\":[0,0,110,0],\"alpha-ent\":[0,0,66,66],\"applied-energetics\":[5167353764.299972,11,44,44],\"run4theh111z\":[0,0,77,0],\"darkweb\":[0,0,33,0],\"deltaone\":[9061607785.318317,11,0,88],\"zeus-med\":[9889711940.992537,11,11,22],\"aevum-police\":[0,0,22,33],\"fulcrumtech\":[0,0,22,55],\"nwo\":[154717954494.2497,11,44,11],\"blade\":[0,0,0,33],\"zb-institute\":[5103208552.70311,11,33,33],\"the-hub\":[0,0,0,55],\"taiyang-digital\":[16722624494.021183,33,11,11],\"icarus\":[5845276387.535335,11,22,33],\"vitalife\":[0,0,66,33],\"infocomm\":[0,0,33,11],\"powerhouse-fitness\":[0,22,44,33],\"The-Cave\":[0,0,110,0],\"clarkinc\":[138295526823.1449,22,22,44],\"solaris\":[0,0,44,44],\"helios\":[0,0,22,22],\"b-and-a\":[0,0,22,22],\"stormtech\":[0,0,33,55],\"omnitek\":[0,0,11,55],\"ecorp\":[590150375265.6195,22,11,22],\"kuai-gong\":[244102941745.7478,22,22,22],\"omnia\":[0,0,22,44],\"galactic-cyber\":[12359135921.753555,22,33,0],\"4sigma\":[135677496512.19624,11,0,22],\"aerocorp\":[7526557691.551038,11,55,11],\"microdyne\":[0,0,33,22],\"defcomm\":[0,0,11,11],\"titan-labs\":[0,0,55,22],\"megacorp\":[611740297663.8713,33,11,0],\"fulcrumassets\":[5622076.62972649,11,0,11]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":7255286.5299096815,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.225,\"onlineExpGained\":4463180.922856018,\"onlineMoneyMade\":2019857240998.2793,\"onlineRunningTime\":15110.410000019909,\"ramUsage\":3.1,\"server\":\"home\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":11,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-365924.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"7tcawiA0919lQNyv2k0R09qjRiausqB390530852hW779xPVwfmuQS163Rn889062\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-543835-Illuminati.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[3,8],[5,1,1],[4,2,6,7],[6,4,7,3,4],[3,8,9,4,5,7],[9,4,7,2,9,4,5]],\"reward\":{\"type\":0,\"name\":\"Illuminati\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"56.1.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"ecorp\"}}]]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":72.85364034437734,\"minDifficulty\":40.85364034437734,\"moneyAvailable\":836946645140.2667,\"moneyMax\":836946645140.2667,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1370,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"39.7.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"megacorp\"}}]]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":44.292119043199996,\"minDifficulty\":44.292119043199996,\"moneyAvailable\":893737283544.9813,\"moneyMax\":893737283544.9813,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1136,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"35.9.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"b-and-a\"}}]]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":34.547852853695986,\"minDifficulty\":34.547852853695986,\"moneyAvailable\":0,\"moneyMax\":500368785748.786,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1037,\"serverGrowth\":78,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"53.6.3.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"blade\"}}]]},\"serversOnNetwork\":[\"4sigma\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":79.91859190060799,\"minDifficulty\":41.634591900608,\"moneyAvailable\":230170121096.25314,\"moneyMax\":230170121096.25314,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1183,\"serverGrowth\":77,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"blade\":[5279605945634.861,2808,14456,2080]},\"filename\":\"hack-server.js\",\"offlineExpGained\":27716966.40841919,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.228,\"onlineExpGained\":22262389.255492736,\"onlineMoneyMade\":5279605945634.861,\"onlineRunningTime\":11362.010000006276,\"ramUsage\":2.45,\"server\":\"blade\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":104,\"temporary\":false}}]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"25.6.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"nwo\"}}]]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":39.29583618674,\"minDifficulty\":39.235836186739995,\"moneyAvailable\":0,\"moneyMax\":467993239460.13336,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1100,\"serverGrowth\":78,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-39440.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[0,4],[0,7],[4,6],[1,4],[8,9],[7,9],[2,5],[2,7],[2,4],[1,7],[5,6],[3,8],[0,8],[2,8],[5,9],[6,8],[1,5]]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"31.5.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"clarkinc\"}}]]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":73.5,\"hackDifficulty\":49.70590767575061,\"minDifficulty\":21.26907556454464,\"moneyAvailable\":288258369301.6239,\"moneyMax\":288258369301.6239,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":963,\"serverGrowth\":54,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"78.9.8.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"omnitek\"}}]]},\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":41.633900062595835,\"minDifficulty\":40.80190006259584,\"moneyAvailable\":298.2675470197246,\"moneyMax\":348474187228.8823,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":952,\"serverGrowth\":97,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"omnitek\":[9119130147887.572,2912,16224,4160]},\"filename\":\"hack-server.js\",\"offlineExpGained\":35659255.615801856,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.229,\"onlineExpGained\":26107361.49305623,\"onlineMoneyMade\":9119130147887.572,\"onlineRunningTime\":11572.410000007041,\"ramUsage\":2.45,\"server\":\"omnitek\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":104,\"temporary\":false}}]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"82.3.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"4sigma\"}}]]},\"serversOnNetwork\":[\"helios\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":58.290325711103996,\"minDifficulty\":31.890325711103998,\"moneyAvailable\":355178570281.8614,\"moneyMax\":355178570281.8614,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":998,\"serverGrowth\":90,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"84.8.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"kuai-gong\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":77.23367167999999,\"minDifficulty\":44.27367167999999,\"moneyAvailable\":368787954674.2732,\"moneyMax\":368787954674.2732,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1099,\"serverGrowth\":99,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"97.4.2.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"fulcrumtech\"}}]]},\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":71.49138810650749,\"minDifficulty\":41.68738810650749,\"moneyAvailable\":0,\"moneyMax\":30008384294.547077,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1110,\"serverGrowth\":98,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"fulcrumtech\":[727318627199.1062,11259,59631,12093]},\"filename\":\"hack-server.js\",\"offlineExpGained\":118283373.70139,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.23,\"onlineExpGained\":94659519.40012431,\"onlineMoneyMade\":727318627199.1062,\"onlineRunningTime\":11693.810000007483,\"ramUsage\":2.45,\"server\":\"fulcrumtech\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":417,\"temporary\":false}}]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-113196.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0],[0,0,1,0],[1,0,0,0],[0,0,0,0],[0,0,1,0],[0,0,0,0]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"40.4.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"fulcrumassets\"}}]]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":41.68738810650749,\"minDifficulty\":41.68738810650749,\"moneyAvailable\":15853897.942440534,\"moneyMax\":15853897.942440534,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1298,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-509829.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[15,[1,3,4,5,7,8,11,14,15]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-814522.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[11,[[0,10],[0,8],[3,5],[9,10],[5,6],[2,4],[6,10],[0,5],[3,4],[0,4],[6,10],[4,7],[7,8],[4,6],[8,9],[2,8],[1,8],[4,9]]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"40.5.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"stormtech\"}}]]},\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":35.134130696164505,\"minDifficulty\":35.134130696164505,\"moneyAvailable\":19905889993.18174,\"moneyMax\":19905889993.18174,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":882,\"serverGrowth\":74,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"19.1.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"defcomm\"}}]]},\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":37.51864929585675,\"minDifficulty\":37.51864929585675,\"moneyAvailable\":15274381742.199045,\"moneyMax\":15274381742.199045,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":930,\"serverGrowth\":71,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"74.2.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"infocomm\"}}]]},\"serversOnNetwork\":[\"solaris\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":37.574649295856744,\"minDifficulty\":37.51864929585675,\"moneyAvailable\":0,\"moneyMax\":14993219888.06428,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":893,\"serverGrowth\":74,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"20.2.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"helios\"}}]]},\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":38.189064703029175,\"minDifficulty\":34.527535844331204,\"moneyAvailable\":3912248291.6474333,\"moneyMax\":12301421648.678967,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":812,\"serverGrowth\":74,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"helios\":[282370835086.61926,1014,3393,390]},\"filename\":\"hack-server.js\",\"offlineExpGained\":6706371.5896060355,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.231,\"onlineExpGained\":5431023.285558456,\"onlineMoneyMade\":282370835086.61926,\"onlineRunningTime\":11412.81000000646,\"ramUsage\":2.45,\"server\":\"helios\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"23.9.3.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"vitalife\"}}]]},\"serversOnNetwork\":[\"applied-energetics\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":39.99305788927697,\"minDifficulty\":34.31705788927697,\"moneyAvailable\":11909081291.321234,\"moneyMax\":11909081291.321234,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":897,\"serverGrowth\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"vitalife\":[326700924468.34644,2028,11076,1716]},\"filename\":\"hack-server.js\",\"offlineExpGained\":20949813.70962246,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.232,\"onlineExpGained\":16908265.414685532,\"onlineMoneyMade\":326700924468.34644,\"onlineRunningTime\":11649.610000007322,\"ramUsage\":2.45,\"server\":\"vitalife\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-468333.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(aaa((((()a()))))a)(\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"14.4.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"icarus\"}}]]},\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":58.524179432991026,\"minDifficulty\":35.232179432991025,\"moneyAvailable\":14750454295.460175,\"moneyMax\":14750454295.460175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":888,\"serverGrowth\":93,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"92.5.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":44.29383088,\"minDifficulty\":39.66183088,\"moneyAvailable\":10259585952.266905,\"moneyMax\":19476806802.40014,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":830,\"serverGrowth\":82,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"univ-energy\":[370301924592.61816,912,1494,186]},\"filename\":\"hack-server.js\",\"offlineExpGained\":4198690.670524596,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.234000000004,\"onlineExpGained\":2792780.7963995044,\"onlineMoneyMade\":370301924592.61816,\"onlineRunningTime\":13958.81000001572,\"ramUsage\":2.45,\"server\":\"univ-energy\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"94.1.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"titan-labs\"}}]]},\"serversOnNetwork\":[\"infocomm\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":40.10302132986881,\"minDifficulty\":34.7250213298688,\"moneyAvailable\":14224495247.413113,\"moneyMax\":14224495247.413113,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":62,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"titan-labs\":[354064990323.9043,1053,3458,364]},\"filename\":\"hack-server.js\",\"offlineExpGained\":6898850.987098,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.235,\"onlineExpGained\":5529550.699146021,\"onlineMoneyMade\":354064990323.9043,\"onlineRunningTime\":11718.410000007572,\"ramUsage\":2.45,\"server\":\"titan-labs\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-8053.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[9,[[1,4],[0,4],[5,6],[4,8],[7,8],[0,7],[3,4],[3,7],[3,4]]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"8.1.9.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"microdyne\"}}]]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":52.760483330239985,\"minDifficulty\":31.004483330239992,\"moneyAvailable\":2599754524.8480434,\"moneyMax\":8889625575.40793,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":828,\"serverGrowth\":87,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"microdyne\":[335570991471.8951,1352,7878,1040]},\"filename\":\"hack-server.js\",\"offlineExpGained\":14912054.067983244,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.236000000004,\"onlineExpGained\":11621428.588035703,\"onlineMoneyMade\":335570991471.8951,\"onlineRunningTime\":11849.210000008046,\"ramUsage\":2.45,\"server\":\"microdyne\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"83.3.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"taiyang-digital\"}}]]},\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":59.09264473012864,\"minDifficulty\":31.478231835526067,\"moneyAvailable\":14667488276.303879,\"moneyMax\":14667488276.303879,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":872,\"serverGrowth\":73,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"45.0.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"galactic-cyber\"}}]]},\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":96,\"hackDifficulty\":26.67992838816479,\"minDifficulty\":26.67992838816479,\"moneyAvailable\":13371498274.375957,\"moneyMax\":13371498274.375957,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":857,\"serverGrowth\":72,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-540190.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"MOUSE SHIFT LOGIC QUEUE ARRAY\",13],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"35.1.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"aerocorp\"}}]]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":83.6968,\"minDifficulty\":40.3368,\"moneyAvailable\":20081629161.47717,\"moneyMax\":20081629161.47717,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":916,\"serverGrowth\":60,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-484034.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,4],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"96.9.0.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"snap-fitness\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":83.66859190060799,\"minDifficulty\":41.634591900608,\"moneyAvailable\":15633096230.64098,\"moneyMax\":15633096230.64098,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":913,\"serverGrowth\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"omnia\":[458532929355.0132,1378,5694,546]},\"filename\":\"hack-server.js\",\"offlineExpGained\":11366389.225473935,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.237,\"onlineExpGained\":8588706.735657489,\"onlineMoneyMade\":458532929355.0132,\"onlineRunningTime\":11889.410000008193,\"ramUsage\":2.45,\"server\":\"omnia\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"14.4.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"zb-def\"}}]]},\"serversOnNetwork\":[\"defcomm\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":94.5,\"hackDifficulty\":27.780017063895034,\"minDifficulty\":27.780017063895034,\"moneyAvailable\":18103461747.774826,\"moneyMax\":18103461747.774826,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":819,\"serverGrowth\":69,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"5.4.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"applied-energetics\"}}]]},\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":36.02835823999999,\"minDifficulty\":35.97235823999999,\"moneyAvailable\":0,\"moneyMax\":13987657561.433998,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":796,\"serverGrowth\":72,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-566857.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"MACRO MOUSE LOGIN VIRUS PASTE\",6],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"34.0.7.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":38.372644730128634,\"minDifficulty\":32.12064473012864,\"moneyAvailable\":1114216358.355107,\"moneyMax\":13801161162.234524,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":819,\"serverGrowth\":73,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"solaris\":[439720158459.73285,1196,8476,390]},\"filename\":\"hack-server.js\",\"offlineExpGained\":13453266.39164829,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.237,\"onlineExpGained\":11688715.602193065,\"onlineMoneyMade\":439720158459.73285,\"onlineRunningTime\":11796.610000007857,\"ramUsage\":2.45,\"server\":\"solaris\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"82.6.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"deltaone\"}}]]},\"serversOnNetwork\":[\"galactic-cyber\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":87.7652,\"minDifficulty\":41.2972,\"moneyAvailable\":23786487072.598133,\"moneyMax\":23786487072.598133,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":888,\"serverGrowth\":54,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-394013-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[200,13,123,51,190,175,117,95,82,167,55,6,73,197,50,149,138,46,23,110,87,10,97]],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"31.6.9.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":35.903990080000014,\"minDifficulty\":35.04999008000001,\"moneyAvailable\":19769714894.862198,\"moneyMax\":30443587517.80269,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":779,\"serverGrowth\":83,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"global-pharm\":[354859835732.77185,465,915,126]},\"filename\":\"hack-server.js\",\"offlineExpGained\":2155452.702287997,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.238000000005,\"onlineExpGained\":1689199.8224449742,\"onlineMoneyMade\":354859835732.77185,\"onlineRunningTime\":13998.810000015865,\"ramUsage\":2.45,\"server\":\"global-pharm\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":3,\"temporary\":false}}]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"83.3.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"nova-med\"}}]]},\"serversOnNetwork\":[\"icarus\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":34.547852853695986,\"minDifficulty\":34.547852853695986,\"moneyAvailable\":0,\"moneyMax\":18620501960.49002,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":813,\"serverGrowth\":75,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-127245.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[158,[1,2,4,5,7,8,9,10,12,15]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"55.3.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"zeus-med\"}}]]},\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":39.530063999999996,\"minDifficulty\":39.530063999999996,\"moneyAvailable\":25292673525.468098,\"moneyMax\":25292673525.468098,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":814,\"serverGrowth\":73,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-261748.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"hhVVIIFeLH44T66UUUUUUUUUAAAAAAAAAAXXXXXXXXXXXX333333333yffffffll\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"26.0.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":68.99610071530799,\"minDifficulty\":33.66201047283201,\"moneyAvailable\":16350915084.10194,\"moneyMax\":18304655769.521065,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":777,\"serverGrowth\":70,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"unitalife\":[371900066811.7424,912,1740,354]},\"filename\":\"hack-server.js\",\"offlineExpGained\":5152514.004728428,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.240000000005,\"onlineExpGained\":3189848.121701737,\"onlineMoneyMade\":371900066811.7424,\"onlineRunningTime\":13979.410000015794,\"ramUsage\":2.45,\"server\":\"unitalife\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"53.5.0.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":45.50499027840001,\"minDifficulty\":34.34899027840001,\"moneyAvailable\":2367054142.816557,\"moneyMax\":13096947006.4494,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":663,\"serverGrowth\":58,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"lexo-corp\":[441817452284.8023,1300,10166,1378]},\"filename\":\"hack-server.js\",\"offlineExpGained\":19855725.802056372,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.241,\"onlineExpGained\":14284071.862548431,\"onlineMoneyMade\":441817452284.8023,\"onlineRunningTime\":13864.210000015375,\"ramUsage\":2.45,\"server\":\"lexo-corp\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"85.7.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"rothman-uni\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":67.5,\"hackDifficulty\":23.280109654224944,\"minDifficulty\":18.4168210672453,\"moneyAvailable\":3768026456.00972,\"moneyMax\":9205368124.832932,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":481,\"serverGrowth\":48,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"rho-construction\":[394928990150.29834,1378,13078,1456]},\"filename\":\"hack-server.js\",\"offlineExpGained\":17186807.09750135,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.242000000006,\"onlineExpGained\":12501839.844705142,\"onlineMoneyMade\":394928990150.29834,\"onlineRunningTime\":14973.810000019412,\"ramUsage\":2.45,\"server\":\"rho-construction\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"6.9.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":91.5,\"hackDifficulty\":29.475891530648326,\"minDifficulty\":26.91189153064831,\"moneyAvailable\":8082020218.470874,\"moneyMax\":13286681921.414661,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":540,\"serverGrowth\":50,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"alpha-ent\":[361969264176.77924,1020,3696,348]},\"filename\":\"hack-server.js\",\"offlineExpGained\":7489635.5597856715,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.243,\"onlineExpGained\":5133481.587790127,\"onlineMoneyMade\":361969264176.77924,\"onlineRunningTime\":13816.410000015201,\"ramUsage\":2.45,\"server\":\"alpha-ent\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-883003.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[135,180,63,1,85,137,101,19,36,187,141,122,157,160,133,144,79,40,65,120,116,153,146,45,187,143,107],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"77.7.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":37.651910485205995,\"minDifficulty\":33.349910485205996,\"moneyAvailable\":3352347088.080415,\"moneyMax\":6214890051.981457,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":404,\"serverGrowth\":45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[203240171536.8172,1196,9932,104]},\"filename\":\"hack-server.js\",\"offlineExpGained\":17181281.951285582,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.244,\"onlineExpGained\":12534609.494457033,\"onlineMoneyMade\":203240171536.8172,\"onlineRunningTime\":14017.010000015931,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-346187.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a())))(()()()a)\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"60.2.8.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":79.5,\"hackDifficulty\":48.74365131668148,\"minDifficulty\":22.511189577514045,\"moneyAvailable\":1313138012.7701297,\"moneyMax\":3982915624.077859,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":401,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"rothman-uni\":[104494127221.12865,962,24466,2132]},\"filename\":\"hack-server.js\",\"offlineExpGained\":37454016.452135555,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.245,\"onlineExpGained\":24276455.62211476,\"onlineMoneyMade\":104494127221.12865,\"onlineRunningTime\":15011.61000001955,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"88.5.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"the-hub\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":39.55120885869797,\"minDifficulty\":37.64768,\"moneyAvailable\":4376386971.248008,\"moneyMax\":14617170208.168247,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":769,\"serverGrowth\":82,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"zb-institute\":[369964598011.56995,1092,3536,520]},\"filename\":\"hack-server.js\",\"offlineExpGained\":7587724.538612818,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.247,\"onlineExpGained\":5784280.109884603,\"onlineMoneyMade\":369964598011.56995,\"onlineRunningTime\":11311.810000006093,\"ramUsage\":2.45,\"server\":\"zb-institute\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"98.9.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":76.5,\"hackDifficulty\":26.9266626566079,\"minDifficulty\":23.501940716800004,\"moneyAvailable\":3940594641.3864155,\"moneyMax\":5417845776.585404,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":434,\"serverGrowth\":47,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[196231937728.818,1248,5862,444]},\"filename\":\"hack-server.js\",\"offlineExpGained\":10015397.004419476,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.248,\"onlineExpGained\":6398289.238524204,\"onlineMoneyMade\":196231937728.818,\"onlineRunningTime\":15000.010000019507,\"ramUsage\":2.45,\"server\":\"summit-uni\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"51.6.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"syscore\"}}]]},\"serversOnNetwork\":[\"computek\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":29.51626813038847,\"minDifficulty\":29.51626813038847,\"moneyAvailable\":8810143872.475748,\"moneyMax\":8810143872.475748,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":574,\"serverGrowth\":60,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"42.9.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":28.265597276242854,\"minDifficulty\":28.025597276242845,\"moneyAvailable\":3112135234.709727,\"moneyMax\":5842380554.698375,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":444,\"serverGrowth\":47,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[145051744005.01566,924,3936,738]},\"filename\":\"hack-server.js\",\"offlineExpGained\":8584407.545573412,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.249,\"onlineExpGained\":6235509.784494949,\"onlineMoneyMade\":145051744005.01566,\"onlineRunningTime\":14986.610000019458,\"ramUsage\":2.45,\"server\":\"catalyst\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-796813.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0100000000000000100000000000000010011011100101010111011001111011\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"95.3.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":67.5,\"hackDifficulty\":22.744674558413543,\"minDifficulty\":18.792674558413573,\"moneyAvailable\":22853.052582321285,\"moneyMax\":2929473812.880988,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":285,\"serverGrowth\":55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"the-hub\":[111658937889.07126,1118,42874,2808]},\"filename\":\"hack-server.js\",\"offlineExpGained\":51903022.29403342,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.25,\"onlineExpGained\":36449026.02611185,\"onlineMoneyMade\":111658937889.07126,\"onlineRunningTime\":15037.210000019642,\"ramUsage\":2.45,\"server\":\"the-hub\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"12.4.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":85.5,\"hackDifficulty\":27.8637031072,\"minDifficulty\":26.2137031072,\"moneyAvailable\":0,\"moneyMax\":3968028769.280799,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":365,\"serverGrowth\":46,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-634808-TheCovenant.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[47,[2,3,4,5,6,7,8,12]],\"reward\":{\"type\":0,\"name\":\"The Covenant\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"36.0.4.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":33.37314868479999,\"minDifficulty\":32.5411486848,\"moneyAvailable\":1174.2652387809403,\"moneyMax\":5108226268.671065,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":411,\"serverGrowth\":65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[188775903359.4027,2236,31876,4628]},\"filename\":\"hack-server.js\",\"offlineExpGained\":66131734.38175328,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.251000000004,\"onlineExpGained\":41602599.61043715,\"onlineMoneyMade\":188775903359.4027,\"onlineRunningTime\":15045.210000019671,\"ramUsage\":2.45,\"server\":\"netlink\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"82.1.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":63,\"hackDifficulty\":16.815358365745713,\"minDifficulty\":16.815358365745713,\"moneyAvailable\":1310898613.0208704,\"moneyMax\":1310898613.0208704,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":281,\"serverGrowth\":36,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"94.6.2.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1.5,\"hackDifficulty\":1.019685275986977,\"minDifficulty\":1,\"moneyAvailable\":1106010.9732304793,\"moneyMax\":1177699.8329391005,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[3191498509.6042233,42292,46759,7147]},\"filename\":\"hack-server.js\",\"offlineExpGained\":17633036.06379293,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.252,\"onlineExpGained\":10686662.565387294,\"onlineMoneyMade\":3191498509.6042233,\"onlineRunningTime\":15112.010000019915,\"ramUsage\":2.45,\"server\":\"n00dles\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":1,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"34.6.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":6.878565541459689,\"minDifficulty\":4.429211904320001,\"moneyAvailable\":12295321.72312773,\"moneyMax\":35708128.123246774,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[1777333603.2825043,2388,363168,23490]},\"filename\":\"hack-server.js\",\"offlineExpGained\":155752855.2286223,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.253000000004,\"onlineExpGained\":93810936.71601468,\"onlineMoneyMade\":1777333603.2825043,\"onlineRunningTime\":15109.410000019905,\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-680455.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"dlKub6nccOccOccOccOccOcccccccQUKwgylSdKJUUUSdKJUUUSdTUSdSbeHDxW8KlKlKlKlK2BlKlG3xCw6\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"72.7.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5.74572402811917,\"minDifficulty\":4.429211904320001,\"moneyAvailable\":33888352.24305609,\"moneyMax\":45338357.595945224,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"sigma-cosmetics\":[6177046924.048564,4506,319854,24090]},\"filename\":\"hack-server.js\",\"offlineExpGained\":136880421.35071537,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.254,\"onlineExpGained\":84643501.16083081,\"onlineMoneyMade\":6177046924.048564,\"onlineRunningTime\":15107.410000019898,\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"93.7.2.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":6.93326202379263,\"minDifficulty\":6.15217911408083,\"moneyAvailable\":33637548.909423016,\"moneyMax\":41235988.54828784,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"joesguns\":[12664079140.401747,7362,256314,22722]},\"filename\":\"hack-server.js\",\"offlineExpGained\":141060413.31373107,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.255000000005,\"onlineExpGained\":91673750.57414961,\"onlineMoneyMade\":12664079140.401747,\"onlineRunningTime\":15105.21000001989,\"ramUsage\":2.45,\"server\":\"joesguns\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-574038.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[55,[2,3,5,8,10,14,15,16,20,21,22]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"83.7.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":15.970914687299823,\"minDifficulty\":12.235496000000001,\"moneyAvailable\":11407724.95389313,\"moneyMax\":114287038.22405228,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"zer0\":[8454529765.776353,3757,121524,5902]},\"filename\":\"hack-server.js\",\"offlineExpGained\":93842272.35594119,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.256,\"onlineExpGained\":61511035.69209249,\"onlineMoneyMade\":8454529765.776353,\"onlineRunningTime\":14954.410000019341,\"ramUsage\":2.45,\"server\":\"zer0\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-950411.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[111,10,30,48,117,138,195,181,16,82,163,35,165,171,88,184,125,102,64,84,8,1,35,26,44,70,147,189,44,162,189,14,74,144,23,46,197,164],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"68.9.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":9.51509176234853,\"minDifficulty\":8.6812553324672,\"moneyAvailable\":37215332.070195906,\"moneyMax\":48135957.02888658,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"nectar-net\":[9793737753.597279,5634,173604,14202]},\"filename\":\"hack-server.js\",\"offlineExpGained\":116852691.53191608,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.257000000005,\"onlineExpGained\":76304684.0107247,\"onlineMoneyMade\":9793737753.597279,\"onlineRunningTime\":15069.010000019758,\"ramUsage\":2.45,\"server\":\"nectar-net\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"62.5.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":15.181950951231974,\"minDifficulty\":11.515950951232002,\"moneyAvailable\":14465363.01960927,\"moneyMax\":82471977.09657568,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"neo-net\":[4586287901.07414,2990,162513,7228]},\"filename\":\"hack-server.js\",\"offlineExpGained\":117219728.36553526,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.258,\"onlineExpGained\":82497593.25058621,\"onlineMoneyMade\":4586287901.07414,\"onlineRunningTime\":14950.610000019327,\"ramUsage\":2.45,\"server\":\"neo-net\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"52.5.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"computek\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":21.035155169523282,\"minDifficulty\":13.287635712959997,\"moneyAvailable\":9216.50581804869,\"moneyMax\":727693915.5580204,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"silver-helix\":[18541364650.799652,884,113516,3744]},\"filename\":\"hack-server.js\",\"offlineExpGained\":97981957.60331155,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.259000000005,\"onlineExpGained\":64114912.06136969,\"onlineMoneyMade\":18541364650.799652,\"onlineRunningTime\":15064.21000001974,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"71.8.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":7.968028189711723,\"minDifficulty\":7.378945279999999,\"moneyAvailable\":34210565.42549414,\"moneyMax\":52511953.12242173,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"hong-fang-tea\":[7022625158.291229,4266,152514,11010]},\"filename\":\"hack-server.js\",\"offlineExpGained\":83228303.05280054,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.26,\"onlineExpGained\":53569201.842512265,\"onlineMoneyMade\":7022625158.291229,\"onlineRunningTime\":15102.010000019878,\"ramUsage\":2.45,\"server\":\"hong-fang-tea\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-638961.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-993108.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[3,4],[24,26],[2,10],[21,24],[7,13],[23,26],[10,15],[12,16],[22,28],[7,8],[23,27],[24,27],[2,4],[23,33],[8,18],[2,9],[14,15],[9,16],[10,12],[8,17]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"42.2.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":7.8977766264235365,\"minDifficulty\":7.378945279999999,\"moneyAvailable\":47773184.484303005,\"moneyMax\":67297133.31080574,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"harakiri-sushi\":[21503590288.499218,7572,130704,12006]},\"filename\":\"hack-server.js\",\"offlineExpGained\":75077876.2585863,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.261,\"onlineExpGained\":47852864.1397821,\"onlineMoneyMade\":21503590288.499218,\"onlineRunningTime\":15098.810000019866,\"ramUsage\":2.45,\"server\":\"harakiri-sushi\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"50.7.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":12.403265117172936,\"minDifficulty\":8.507630225817856,\"moneyAvailable\":109342101.00665781,\"moneyMax\":411858455.8621312,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"phantasy\":[28294288130.41769,3744,121264,4602]},\"filename\":\"hack-server.js\",\"offlineExpGained\":76431677.4502121,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.262,\"onlineExpGained\":51568068.56434037,\"onlineMoneyMade\":28294288130.41769,\"onlineRunningTime\":15080.6100000198,\"ramUsage\":2.45,\"server\":\"phantasy\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-636087.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"5kvCQ5yQvCQ52QvCQ52Qv6tKCQ52Qv67llZO2Qv67llZODMeuODMeuODM1W2vJ3DM1W2vvvvvvvv\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"6.4.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":10.71265498836245,\"minDifficulty\":6.029135531799214,\"moneyAvailable\":57400820.74665283,\"moneyMax\":161709759.01289347,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"max-hardware\":[10914492374.658909,4303,163891,7280]},\"filename\":\"hack-server.js\",\"offlineExpGained\":78514871.66643089,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.262,\"onlineExpGained\":58044662.14130539,\"onlineMoneyMade\":10914492374.658909,\"onlineRunningTime\":15085.210000019817,\"ramUsage\":2.45,\"server\":\"max-hardware\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-426682.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"nxJJeeDDoooAAAAIIIIIIIIIIIIILLLLLLLLLLLLLLm6IIIIIIIIIVVIaaNNLLdIIIIcM\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"44.1.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":39,\"hackDifficulty\":13.335488090885708,\"minDifficulty\":11.990786080000001,\"moneyAvailable\":65113528.51965066,\"moneyMax\":1045357510.1003284,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":180,\"serverGrowth\":34,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"omega-net\":[51657989526.55664,2080,58929,2483]},\"filename\":\"hack-server.js\",\"offlineExpGained\":46462415.21538565,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.263,\"onlineExpGained\":30803995.08123838,\"onlineMoneyMade\":51657989526.55664,\"onlineRunningTime\":15059.410000019723,\"ramUsage\":2.45,\"server\":\"omega-net\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"62.1.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":63,\"hackDifficulty\":18.27263619818112,\"minDifficulty\":18.23063619818112,\"moneyAvailable\":0,\"moneyMax\":889239284.6989098,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":254,\"serverGrowth\":32,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"46.1.4.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":15.049882998700781,\"minDifficulty\":13.021882998700796,\"moneyAvailable\":85252280.27698952,\"moneyMax\":378937512.2941447,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[15984099650.310474,1729,87516,3601]},\"filename\":\"hack-server.js\",\"offlineExpGained\":75269438.06409445,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.264,\"onlineExpGained\":50796889.473507166,\"onlineMoneyMade\":15984099650.310474,\"onlineRunningTime\":15088.210000019828,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-28952-NiteSec.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,4,2,-5,5,-6,-1,-7,-3,9,-4,-1,6,-5,-1,1,5,7,0,-7,10,-7,0,-9,-7,-4,-2],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"13.5.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":81,\"hackDifficulty\":24.047744283328,\"minDifficulty\":23.917744283328002,\"moneyAvailable\":834359810.928499,\"moneyMax\":4123598854.8287826,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":499,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"millenium-fitness\":[94931445991.14932,845,11011,390]},\"filename\":\"hack-server.js\",\"offlineExpGained\":16023834.924002964,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.265,\"onlineExpGained\":11180654.952438964,\"onlineMoneyMade\":94931445991.14932,\"onlineRunningTime\":14955.810000019346,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"66.6.6.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"powerhouse-fitness\"}}]]},\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":90,\"hackDifficulty\":29.548102517395915,\"minDifficulty\":27.671044799999994,\"moneyAvailable\":278.4212593897023,\"moneyMax\":15141854994.931292,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1068,\"serverGrowth\":58,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"powerhouse-fitness\":[454443635418.07074,1170,5668,988]},\"filename\":\"hack-server.js\",\"offlineExpGained\":10609371.77372493,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.266,\"onlineExpGained\":7978317.392944281,\"onlineMoneyMade\":454443635418.07074,\"onlineRunningTime\":11521.810000006857,\"ramUsage\":2.45,\"server\":\"powerhouse-fitness\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"18.0.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"snap-fitness\"}}]]},\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":61.5,\"hackDifficulty\":46.28173136,\"minDifficulty\":19.36973136,\"moneyAvailable\":7570927497.465646,\"moneyMax\":7570927497.465646,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":718,\"serverGrowth\":42,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"54.1.2.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.072,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":537,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"run4theh111z\":[0,1959984,0,965432]},\"filename\":\"hack-server.js\",\"offlineExpGained\":245546546.12850466,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.267,\"onlineExpGained\":156986371.48744,\"onlineMoneyMade\":0,\"onlineRunningTime\":13925.610000015598,\"ramUsage\":2.45,\"server\":\"run4theh111z\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":104,\"temporary\":false}}]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"86.4.2.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.068,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":353,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"I.I.I.I\":[0,1352364,0,669032]},\"filename\":\"hack-server.js\",\"offlineExpGained\":177737190.30477235,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.268000000004,\"onlineExpGained\":106774879.0371065,\"onlineMoneyMade\":0,\"onlineRunningTime\":14969.010000019394,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"31.0.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"summit-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.012,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":208,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"avmnite-02h\":[0,355884,0,70902]},\"filename\":\"hack-server.js\",\"offlineExpGained\":28059239.398448423,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.269,\"onlineExpGained\":16986495.81138229,\"onlineMoneyMade\":0,\"onlineRunningTime\":15023.210000019591,\"ramUsage\":2.45,\"server\":\"avmnite-02h\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-314617.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"8caAjhPa0865Npccc457dgXXxq2515aybFO779UyqGAHzZx19475re\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"9.8.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.06,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":523,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\".\":[0,191040,0,37914]},\"filename\":\"hack-server.js\",\"offlineExpGained\":14368601.045676444,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.269,\"onlineExpGained\":9261318.081022369,\"onlineMoneyMade\":0,\"onlineRunningTime\":13828.410000015245,\"ramUsage\":2.45,\"server\":\".\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-838453-TheCovenant.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[1,10,5,-4,9,6,1,9,2,-8,4,10,-4,0,6,-1,1,3,10,10,-7,0,-7,8,-6,-4,9,-3,-5,5,-9],\"reward\":{\"type\":0,\"name\":\"The Covenant\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-504830.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[6,-9,-10,0,-1,8,3,-1,9,-2,-2,9,7,-7,5,1,6,3,10,-1,9,-8,-8,10,6,5,-1,2,-7],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"76.0.3.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.054,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":57,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"CSEC\":[0,351468,0,38991]},\"filename\":\"hack-server.js\",\"offlineExpGained\":22486620.213298682,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.270000000004,\"onlineExpGained\":13426033.033962598,\"onlineMoneyMade\":0,\"onlineRunningTime\":14953.210000019337,\"ramUsage\":2.45,\"server\":\"CSEC\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":3,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-621073.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()a))a)(\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-481450-NiteSec.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"55555555DDYY88888888auuuuuuuuuuuuunnnnnnnnnnnnnJJQQQQQQQSlTQbbgzuZZZZZZZZ88B7bbbbbbbnn6VV\",\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"82.1.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"The-Cave\"}}]]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"58.3.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3880.8198913613896,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-565626.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"FRAMETRASHCACHEENTERMACRO\",\"TYPEFACE\"],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"10.6.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"darkweb\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"hacknet-server-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":36,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-0\",\"httpPortOpen\":false,\"ip\":\"17.9.9.3\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":36,\"hashCapacity\":1048576,\"hashRate\":11.322103431103416,\"level\":150,\"onlineTimeSeconds\":75817.599999927,\"totalHashesGenerated\":640369.0108391853,\"runningScripts\":[]}},\"neighbor-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-0\",\"httpPortOpen\":false,\"ip\":\"55.2.3.1\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"rho-construction\":[0,0,338250,338250],\"4sigma\":[355178570281.8614,169125,0,338250],\"joesguns\":[0,0,169125,338250],\"omnitek\":[348474187228.8823,169125,338250,169125],\"darkweb\":[0,0,845625,0],\"netlink\":[0,0,169125,0],\"zb-institute\":[29234340416.336494,338250,338250,338250],\"run4theh111z\":[0,0,1014750,169125],\"lexo-corp\":[0,0,507375,169125],\"omnia\":[0,0,338250,169125],\"omega-net\":[0,0,338250,338250],\"summit-uni\":[0,0,169125,338250],\"avmnite-02h\":[0,0,1183875,0],\"zer0\":[0,0,169125,1014750],\"foodnstuff\":[0,0,0,845625],\"titan-labs\":[0,0,845625,338250],\"CSEC\":[0,0,676500,0],\"hong-fang-tea\":[0,0,169125,507375],\"microdyne\":[0,169125,338250,169125],\"nwo\":[0,169125,169125,338250],\"neo-net\":[0,0,169125,169125],\"silver-helix\":[0,0,0,338250],\"applied-energetics\":[0,0,338250,169125],\"powerhouse-fitness\":[0,0,338250,338250],\"icarus\":[14750454295.460175,169125,0,338250],\"defcomm\":[15274381742.199045,507375,0,169125],\"kuai-gong\":[368787954674.2732,169125,0,338250],\"blade\":[0,0,169125,845625],\"rothman-uni\":[0,0,507375,169125],\"aerocorp\":[0,0,338250,338250],\"helios\":[11823742453.555332,169125,169125,169125],\"max-hardware\":[0,0,169125,169125],\"zeus-med\":[25292673525.468098,169125,169125,507375],\"clarkinc\":[261084486267.81076,169125,169125,507375],\"the-hub\":[0,0,507375,169125],\"phantasy\":[0,0,169125,338250],\"ecorp\":[0,169125,169125,169125],\"computek\":[7858253052.889425,338250,0,338250],\"harakiri-sushi\":[0,0,338250,169125],\"catalyst\":[0,0,507375,169125],\"b-and-a\":[1952611755228.8267,676500,169125,0],\"megacorp\":[893737283544.9813,169125,169125,338250],\"iron-gym\":[0,0,169125,676500],\"n00dles\":[2212038.517398511,338250,169125,0],\"unitalife\":[0,0,338250,169125],\"deltaone\":[23786487072.598133,169125,169125,169125],\"fulcrumtech\":[0,0,169125,676500],\"sigma-cosmetics\":[0,0,0,338250],\"galactic-cyber\":[0,0,0,338250],\"aevum-police\":[0,0,169125,507375],\"univ-energy\":[14072996594.03022,169125,169125,169125],\"vitalife\":[0,0,0,169125],\"syscore\":[8810143872.475748,169125,169125,0],\"stormtech\":[19905889993.18174,169125,169125,0],\"infocomm\":[14993219888.06428,169125,0,169125],\"alpha-ent\":[0,0,169125,0],\"taiyang-digital\":[29047378743.268463,338250,338250,338250],\"crush-fitness\":[889239284.6989098,169125,0,169125],\"global-pharm\":[30443587517.80269,169125,0,0],\"fulcrumassets\":[0,0,338250,0],\"I.I.I.I\":[0,0,169125,0],\"solaris\":[0,0,169125,169125],\"millenium-fitness\":[0,0,338250,338250],\"nova-med\":[18620501960.49002,169125,0,0],\"johnson-ortho\":[0,0,169125,0],\"zb-def\":[18103461747.774826,169125,0,0],\".\":[0,0,507375,0],\"The-Cave\":[0,0,169125,0],\"snap-fitness\":[0,0,0,169125],\"nectar-net\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":6426735870.296414,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.271,\"onlineExpGained\":40250343208.47417,\"onlineMoneyMade\":4462783201425.446,\"onlineRunningTime\":5483.409999997204,\"ramUsage\":3.1,\"server\":\"neighbor-0\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-1\",\"httpPortOpen\":false,\"ip\":\"21.1.9.1\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"crush-fitness\":[0,0,507375,169125],\"applied-energetics\":[13987657561.433998,169125,507375,338250],\"global-pharm\":[30443587517.80269,169125,845625,0],\"I.I.I.I\":[0,0,338250,0],\"millenium-fitness\":[0,0,338250,0],\".\":[0,0,507375,0],\"clarkinc\":[0,0,0,338250],\"rho-construction\":[0,0,507375,676500],\"harakiri-sushi\":[0,0,169125,0],\"titan-labs\":[28448990494.826225,338250,1014750,507375],\"max-hardware\":[0,0,169125,676500],\"microdyne\":[0,0,338250,169125],\"rothman-uni\":[0,0,0,676500],\"galactic-cyber\":[12600261470.30173,169125,169125,507375],\"fulcrumassets\":[0,0,169125,169125],\"deltaone\":[47572974145.196266,338250,338250,169125],\"zeus-med\":[0,0,676500,0],\"lexo-corp\":[13096947006.4494,169125,338250,507375],\"neo-net\":[0,0,0,1353000],\"run4theh111z\":[0,0,676500,169125],\"b-and-a\":[0,0,507375,0],\"summit-uni\":[0,0,507375,0],\"computek\":[3665845228.8416843,169125,338250,0],\"zer0\":[0,0,0,338250],\"stormtech\":[0,0,169125,338250],\"foodnstuff\":[0,0,0,676500],\"omnia\":[0,0,169125,169125],\"snap-fitness\":[0,0,169125,507375],\"fulcrumtech\":[0,0,338250,169125],\"johnson-ortho\":[0,169125,338250,676500],\"infocomm\":[13579821191.17446,169125,338250,0],\"solaris\":[0,0,338250,507375],\"defcomm\":[30548763484.39809,338250,169125,169125],\"n00dles\":[5424182.03199074,845625,0,0],\"univ-energy\":[15031796693.721577,169125,338250,169125],\"syscore\":[0,169125,0,0],\"netlink\":[0,0,0,169125],\"sigma-cosmetics\":[0,0,0,507375],\"darkweb\":[0,0,338250,0],\"blade\":[0,0,169125,845625],\"omega-net\":[0,0,169125,0],\"silver-helix\":[0,0,338250,676500],\"CSEC\":[0,0,676500,0],\"alpha-ent\":[0,0,338250,169125],\"zb-institute\":[0,169125,169125,169125],\"phantasy\":[0,0,0,507375],\"unitalife\":[48364394108.11921,507375,338250,0],\"megacorp\":[1787474567089.9626,338250,338250,338250],\"ecorp\":[1673893290280.5334,338250,338250,0],\"aerocorp\":[20081629161.47717,169125,169125,169125],\"nectar-net\":[0,0,507375,169125],\"hong-fang-tea\":[0,0,0,507375],\"avmnite-02h\":[0,0,338250,0],\"kuai-gong\":[737575909348.5464,338250,338250,0],\"helios\":[0,0,0,338250],\"the-hub\":[0,0,169125,507375],\"nova-med\":[0,0,338250,338250],\"nwo\":[467993239460.13336,169125,507375,0],\"iron-gym\":[0,0,0,169125],\"powerhouse-fitness\":[0,0,507375,0],\"omnitek\":[0,0,0,169125],\"taiyang-digital\":[0,169125,338250,0],\"joesguns\":[0,0,0,169125],\"aevum-police\":[0,0,338250,169125],\"The-Cave\":[0,0,676500,0],\"icarus\":[14750454295.460175,169125,169125,338250],\"catalyst\":[0,0,169125,0],\"vitalife\":[0,0,0,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":6052921255.916759,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.271,\"onlineExpGained\":43754698043.670395,\"onlineMoneyMade\":4959115552720.41,\"onlineRunningTime\":5483.409999997204,\"ramUsage\":3.1,\"server\":\"neighbor-1\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"hacknet-server-1\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":36,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-1\",\"httpPortOpen\":false,\"ip\":\"83.7.7.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":36,\"hashCapacity\":1048576,\"hashRate\":11.322103431103416,\"level\":150,\"onlineTimeSeconds\":75817.199999927,\"totalHashesGenerated\":615365.4533195853,\"runningScripts\":[]}},\"neighbor-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-2\",\"httpPortOpen\":false,\"ip\":\"67.4.0.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"titan-labs\":[0,0,676500,169125],\".\":[0,0,676500,169125],\"applied-energetics\":[27975315122.867996,338250,0,338250],\"rothman-uni\":[0,0,507375,169125],\"zb-def\":[0,0,338250,0],\"computek\":[3523495990.812845,169125,338250,676500],\"neo-net\":[0,0,0,676500],\"foodnstuff\":[0,0,0,676500],\"4sigma\":[334692699529.0851,169125,169125,0],\"joesguns\":[0,0,676500,338250],\"microdyne\":[0,0,338250,507375],\"fulcrumassets\":[0,0,169125,338250],\"unitalife\":[13786443966.556452,169125,845625,0],\"max-hardware\":[0,0,169125,338250],\"avmnite-02h\":[0,0,1014750,0],\"zb-institute\":[0,0,676500,169125],\"omnia\":[0,0,507375,0],\"univ-energy\":[0,0,338250,338250],\"run4theh111z\":[0,0,676500,0],\"sigma-cosmetics\":[0,0,169125,338250],\"n00dles\":[5484995.556096523,845625,0,169125],\"b-and-a\":[0,0,0,507375],\"catalyst\":[0,0,507375,169125],\"netlink\":[0,0,0,676500],\"icarus\":[14461229701.431543,169125,169125,338250],\"crush-fitness\":[889239284.6989098,169125,169125,507375],\"defcomm\":[0,0,0,169125],\"fulcrumtech\":[0,0,338250,845625],\"nwo\":[467993239460.13336,169125,169125,338250],\"syscore\":[13165331831.736553,338250,0,169125],\"silver-helix\":[0,0,0,507375],\"CSEC\":[0,0,338250,0],\"snap-fitness\":[21979209951.48186,507375,169125,0],\"aerocorp\":[59465093349.36453,507375,169125,169125],\"powerhouse-fitness\":[0,0,507375,338250],\"lexo-corp\":[0,0,338250,0],\"kuai-gong\":[368787954674.2732,169125,0,338250],\"nova-med\":[0,0,338250,169125],\"blade\":[0,0,338250,0],\"rho-construction\":[0,0,507375,0],\"taiyang-digital\":[0,0,0,169125],\"deltaone\":[0,169125,0,169125],\"darkweb\":[0,0,338250,0],\"clarkinc\":[282606244413.35675,169125,169125,338250],\"ecorp\":[0,0,169125,338250],\"millenium-fitness\":[0,0,338250,338250],\"hong-fang-tea\":[0,0,0,338250],\"summit-uni\":[0,0,169125,169125],\"aevum-police\":[0,0,0,338250],\"iron-gym\":[0,0,507375,0],\"zeus-med\":[25292673525.468098,169125,169125,169125],\"megacorp\":[0,0,507375,338250],\"omega-net\":[0,0,0,338250],\"helios\":[0,0,169125,0],\"The-Cave\":[0,0,338250,0],\"phantasy\":[0,0,169125,0],\"omnitek\":[0,0,169125,169125],\"galactic-cyber\":[0,0,169125,0],\"I.I.I.I\":[0,0,338250,0],\"solaris\":[0,0,507375,169125],\"global-pharm\":[0,0,338250,0],\"nectar-net\":[0,0,169125,0],\"johnson-ortho\":[1310898613.0208704,169125,169125,0],\"zer0\":[0,0,0,169125],\"stormtech\":[0,0,169125,0],\"alpha-ent\":[0,0,169125,0],\"vitalife\":[0,0,0,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":4631946548.071926,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.272000000004,\"onlineExpGained\":38352364166.345985,\"onlineMoneyMade\":1635934554409.8442,\"onlineRunningTime\":5483.409999997204,\"ramUsage\":3.1,\"server\":\"neighbor-2\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"hacknet-server-2\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":36,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-2\",\"httpPortOpen\":false,\"ip\":\"56.7.9.5\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":36,\"hashCapacity\":1048576,\"hashRate\":11.322103431103416,\"level\":150,\"onlineTimeSeconds\":75816.599999927,\"totalHashesGenerated\":607127.6032930282,\"runningScripts\":[]}},\"neighbor-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-3\",\"httpPortOpen\":false,\"ip\":\"79.9.3.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"johnson-ortho\":[1141216130.6961808,169125,169125,507375],\"avmnite-02h\":[0,0,507375,0],\"neo-net\":[0,0,0,507375],\"CSEC\":[0,0,676500,0],\"microdyne\":[0,0,507375,0],\"clarkinc\":[0,0,338250,169125],\"the-hub\":[0,0,169125,507375],\"fulcrumtech\":[0,0,338250,507375],\"crush-fitness\":[2616428608.12624,507375,0,169125],\"kuai-gong\":[0,0,676500,338250],\"fulcrumassets\":[0,0,507375,338250],\"foodnstuff\":[0,0,0,338250],\"rothman-uni\":[0,0,507375,0],\"nwo\":[415564603697.2082,169125,0,0],\"nectar-net\":[0,0,169125,169125],\"aevum-police\":[0,0,0,169125],\"syscore\":[8810143872.475748,169125,507375,338250],\"blade\":[0,169125,169125,169125],\"deltaone\":[0,0,169125,169125],\"iron-gym\":[0,0,169125,169125],\"harakiri-sushi\":[0,0,169125,507375],\"galactic-cyber\":[0,0,507375,169125],\"phantasy\":[0,0,169125,169125],\"powerhouse-fitness\":[0,0,169125,169125],\"taiyang-digital\":[0,0,169125,338250],\"computek\":[3968028769.280799,169125,169125,169125],\"univ-energy\":[0,0,676500,0],\"megacorp\":[859032375571.8774,169125,0,338250],\"infocomm\":[0,0,507375,169125],\"The-Cave\":[0,0,845625,0],\"millenium-fitness\":[0,0,169125,338250],\"helios\":[12301421648.678967,169125,676500,169125],\"titan-labs\":[0,0,507375,507375],\"netlink\":[0,0,0,507375],\"max-hardware\":[0,0,169125,676500],\"global-pharm\":[0,0,169125,0],\"omnia\":[0,0,169125,338250],\"omega-net\":[0,0,169125,169125],\"summit-uni\":[0,0,507375,169125],\"stormtech\":[0,0,169125,338250],\"catalyst\":[0,0,507375,338250],\"applied-energetics\":[27168539689.569103,338250,0,507375],\"zer0\":[0,0,507375,338250],\"hong-fang-tea\":[0,0,0,169125],\".\":[0,0,507375,0],\"omnitek\":[0,0,338250,507375],\"4sigma\":[1065535710845.5842,507375,0,169125],\"darkweb\":[0,0,338250,0],\"solaris\":[0,0,338250,0],\"aerocorp\":[20081629161.47717,169125,338250,338250],\"n00dles\":[4450990.2098819185,676500,338250,0],\"nova-med\":[18620501960.49002,169125,0,0],\"icarus\":[14750454295.460175,169125,169125,169125],\"zeus-med\":[24796738750.45892,169125,0,0],\"alpha-ent\":[0,0,0,169125],\"joesguns\":[0,0,0,338250],\"snap-fitness\":[7422477938.69181,169125,338250,169125],\"unitalife\":[0,0,338250,169125],\"ecorp\":[0,0,169125,338250],\"vitalife\":[0,0,0,338250],\"defcomm\":[0,0,169125,169125],\"lexo-corp\":[0,0,0,338250],\"sigma-cosmetics\":[0,0,0,507375],\"silver-helix\":[0,0,0,169125],\"run4theh111z\":[0,0,507375,0],\"I.I.I.I\":[0,0,338250,0],\"rho-construction\":[0,0,169125,0],\"b-and-a\":[0,0,0,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":6584888424.099133,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.273,\"onlineExpGained\":37880001008.51178,\"onlineMoneyMade\":2481814721930.2847,\"onlineRunningTime\":5483.409999997204,\"ramUsage\":3.1,\"server\":\"neighbor-3\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-4\",\"httpPortOpen\":false,\"ip\":\"30.3.1.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"fulcrumtech\":[0,0,0,338250],\"zb-def\":[15760152892.673008,169125,169125,169125],\"clarkinc\":[0,0,0,676500],\"n00dles\":[985524.0450107519,169125,0,0],\"alpha-ent\":[9781952126.91961,169125,338250,169125],\"omnitek\":[0,0,169125,676500],\"taiyang-digital\":[14379890466.964586,169125,338250,676500],\"galactic-cyber\":[0,0,169125,169125],\"solaris\":[0,0,338250,338250],\"netlink\":[0,169125,507375,169125],\"stormtech\":[39421468417.86972,338250,0,507375],\"vitalife\":[0,0,169125,338250],\"ecorp\":[773209329941.0715,169125,0,0],\"applied-energetics\":[0,0,0,338250],\"catalyst\":[0,0,845625,169125],\"snap-fitness\":[0,0,169125,169125],\"I.I.I.I\":[0,0,1183875,0],\"infocomm\":[28573041079.23874,338250,169125,0],\"sigma-cosmetics\":[0,0,0,845625],\"omnia\":[0,0,169125,338250],\"blade\":[0,0,169125,845625],\"nova-med\":[35822967527.00647,338250,169125,169125],\"deltaone\":[21544154199.27313,169125,0,169125],\"univ-energy\":[19476806802.40014,169125,338250,0],\"titan-labs\":[13404059569.295662,169125,169125,169125],\"aerocorp\":[0,0,169125,169125],\"rothman-uni\":[0,0,0,507375],\".\":[0,0,845625,0],\"unitalife\":[0,0,507375,0],\"johnson-ortho\":[1310898613.0208704,169125,507375,338250],\"fulcrumassets\":[0,0,507375,169125],\"4sigma\":[355178570281.8614,169125,169125,507375],\"rho-construction\":[0,0,676500,0],\"run4theh111z\":[0,0,507375,0],\"harakiri-sushi\":[0,0,338250,338250],\"omega-net\":[0,0,507375,0],\"nwo\":[449820491599.513,169125,169125,169125],\"megacorp\":[0,169125,338250,169125],\"max-hardware\":[0,0,0,507375],\"summit-uni\":[0,0,507375,338250],\"powerhouse-fitness\":[0,0,0,676500],\"zb-institute\":[0,0,338250,507375],\"darkweb\":[0,0,169125,0],\"nectar-net\":[0,0,507375,507375],\"b-and-a\":[500368785748.786,169125,169125,169125],\"joesguns\":[0,0,0,507375],\"zeus-med\":[50585347050.936195,338250,0,338250],\"zer0\":[0,0,169125,169125],\"neo-net\":[0,0,169125,0],\"millenium-fitness\":[0,0,169125,676500],\"foodnstuff\":[0,0,0,169125],\"phantasy\":[0,0,169125,169125],\"the-hub\":[0,0,0,338250],\"microdyne\":[0,0,169125,0],\"aevum-police\":[0,0,338250,169125],\"icarus\":[0,0,169125,0],\"iron-gym\":[0,0,0,169125],\"computek\":[3968028769.280799,169125,169125,169125],\"global-pharm\":[0,0,338250,0],\"CSEC\":[0,0,169125,0],\"hong-fang-tea\":[0,0,169125,338250],\"syscore\":[0,0,0,169125],\"lexo-corp\":[0,0,169125,338250],\"silver-helix\":[0,0,0,169125],\"crush-fitness\":[889239284.6989098,169125,0,0],\"defcomm\":[0,0,0,169125],\"kuai-gong\":[368787954674.2732,169125,0,0],\"helios\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":4059243513.1660843,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.274000000005,\"onlineExpGained\":39423849789.11077,\"onlineMoneyMade\":2702284124569.128,\"onlineRunningTime\":5483.409999997204,\"ramUsage\":3.1,\"server\":\"neighbor-4\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"hacknet-server-3\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":36,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-3\",\"httpPortOpen\":false,\"ip\":\"80.0.8.5\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":36,\"hashCapacity\":1048576,\"hashRate\":11.322103431103416,\"level\":150,\"onlineTimeSeconds\":75816.19999992699,\"totalHashesGenerated\":591981.2064520156,\"runningScripts\":[]}},\"hacknet-server-4\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":36,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-4\",\"httpPortOpen\":false,\"ip\":\"5.4.5.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":36,\"hashCapacity\":1048576,\"hashRate\":11.322103431103416,\"level\":150,\"onlineTimeSeconds\":75815.19999992699,\"totalHashesGenerated\":580204.1176047034,\"runningScripts\":[]}},\"hacknet-server-5\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":36,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-5\",\"httpPortOpen\":false,\"ip\":\"44.8.9.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":36,\"hashCapacity\":1048576,\"hashRate\":11.322103431103416,\"level\":150,\"onlineTimeSeconds\":75813.19999992699,\"totalHashesGenerated\":579874.5732958822,\"runningScripts\":[]}},\"neighbor-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-5\",\"httpPortOpen\":false,\"ip\":\"90.0.4.2\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"darkweb\":[0,0,1014750,0],\"catalyst\":[5842380554.698375,169125,169125,169125],\"omnitek\":[0,169125,169125,338250],\"helios\":[12301421648.678967,169125,338250,338250],\"zeus-med\":[0,0,507375,0],\"global-pharm\":[0,0,507375,0],\"rho-construction\":[0,0,338250,0],\"univ-energy\":[0,0,507375,338250],\"neo-net\":[0,0,338250,676500],\"infocomm\":[0,0,169125,338250],\"omnia\":[2292467163.319874,169125,507375,0],\"4sigma\":[689871269810.9465,338250,0,338250],\"b-and-a\":[490557633087.0451,169125,169125,338250],\"phantasy\":[0,0,0,676500],\"defcomm\":[14681258883.313192,169125,169125,338250],\"fulcrumassets\":[15853897.942440534,169125,0,169125],\"the-hub\":[2671937455.8756685,169125,0,507375],\"kuai-gong\":[0,0,169125,338250],\"max-hardware\":[0,0,169125,676500],\"run4theh111z\":[0,0,338250,0],\"icarus\":[29500908590.92035,338250,169125,169125],\"zer0\":[0,0,169125,169125],\"megacorp\":[893737283544.9813,169125,338250,338250],\"avmnite-02h\":[0,0,507375,0],\"omega-net\":[0,0,169125,169125],\"taiyang-digital\":[0,0,169125,169125],\"aevum-police\":[0,0,338250,169125],\"syscore\":[8810143872.475748,169125,338250,338250],\"silver-helix\":[0,0,0,169125],\"iron-gym\":[0,0,676500,338250],\"n00dles\":[4522686.43994011,676500,169125,0],\"computek\":[7858253052.889425,338250,0,338250],\"galactic-cyber\":[0,0,0,169125],\"aerocorp\":[20081629161.47717,338250,0,338250],\"ecorp\":[836946645140.2667,169125,0,507375],\"unitalife\":[0,0,169125,169125],\"clarkinc\":[282606244413.35675,169125,0,0],\"stormtech\":[19905889993.18174,169125,676500,338250],\"lexo-corp\":[0,0,507375,169125],\"joesguns\":[0,0,0,676500],\".\":[0,0,845625,0],\"nwo\":[467993239460.13336,169125,0,169125],\"blade\":[0,0,338250,338250],\"snap-fitness\":[0,0,169125,169125],\"vitalife\":[0,0,338250,338250],\"I.I.I.I\":[0,0,845625,0],\"powerhouse-fitness\":[0,0,169125,169125],\"fulcrumtech\":[0,0,507375,0],\"sigma-cosmetics\":[0,0,338250,338250],\"The-Cave\":[0,0,676500,0],\"applied-energetics\":[27975315122.867996,338250,0,169125],\"alpha-ent\":[0,0,338250,169125],\"nova-med\":[37241003920.98004,338250,0,0],\"titan-labs\":[0,0,507375,0],\"crush-fitness\":[0,0,0,338250],\"zb-def\":[18103461747.774826,169125,0,169125],\"hong-fang-tea\":[0,0,169125,507375],\"foodnstuff\":[0,0,0,338250],\"microdyne\":[0,0,676500,338250],\"johnson-ortho\":[2621797226.041741,338250,169125,0],\"deltaone\":[23786487072.598133,169125,0,0],\"harakiri-sushi\":[0,0,169125,0],\"solaris\":[0,0,169125,338250],\"millenium-fitness\":[1744978033.2574487,169125,169125,338250],\"CSEC\":[0,0,338250,0],\"rothman-uni\":[0,0,169125,169125],\"zb-institute\":[0,0,338250,169125],\"nectar-net\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":2161415412.746042,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.275,\"onlineExpGained\":40342428445.01948,\"onlineMoneyMade\":3897152025541.4634,\"onlineRunningTime\":5363.409999997313,\"ramUsage\":3.1,\"server\":\"neighbor-5\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-6\",\"httpPortOpen\":false,\"ip\":\"88.4.9.1\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"max-hardware\":[0,0,0,338250],\"blade\":[0,0,169125,169125],\"zer0\":[0,0,338250,338250],\"CSEC\":[0,0,676500,0],\"microdyne\":[0,0,338250,338250],\"snap-fitness\":[0,0,338250,338250],\"phantasy\":[0,0,169125,1014750],\"silver-helix\":[0,0,0,338250],\"icarus\":[0,0,169125,338250],\"zeus-med\":[22908353674.985893,169125,0,338250],\"summit-uni\":[0,0,338250,169125],\"I.I.I.I\":[0,0,507375,0],\"defcomm\":[0,0,338250,0],\"helios\":[0,169125,507375,507375],\"darkweb\":[0,0,338250,0],\"omnia\":[2997255508.749634,169125,169125,507375],\"computek\":[7936057538.561598,338250,169125,338250],\"alpha-ent\":[0,0,507375,169125],\"kuai-gong\":[0,0,169125,338250],\"vitalife\":[0,0,0,507375],\"aevum-police\":[0,0,507375,0],\"megacorp\":[2681211850634.944,507375,0,338250],\"b-and-a\":[0,0,0,169125],\"neo-net\":[0,0,169125,507375],\"univ-energy\":[0,0,338250,0],\"deltaone\":[0,0,507375,169125],\"omega-net\":[0,0,338250,338250],\"aerocorp\":[0,169125,507375,169125],\"unitalife\":[0,0,507375,0],\"rho-construction\":[0,0,338250,169125],\"joesguns\":[0,0,507375,0],\"omnitek\":[0,0,169125,676500],\"syscore\":[0,0,338250,0],\"run4theh111z\":[0,0,845625,0],\"johnson-ortho\":[0,0,169125,338250],\"crush-fitness\":[889239284.6989098,169125,0,0],\"rothman-uni\":[0,0,338250,507375],\"catalyst\":[0,0,169125,338250],\"zb-def\":[18103461747.774826,169125,338250,338250],\"powerhouse-fitness\":[0,0,0,169125],\"nectar-net\":[0,0,0,169125],\"zb-institute\":[14617170208.168247,169125,845625,169125],\"solaris\":[0,0,169125,338250],\"infocomm\":[0,0,0,338250],\"iron-gym\":[0,0,169125,338250],\"The-Cave\":[0,0,169125,0],\"lexo-corp\":[0,0,169125,338250],\"fulcrumtech\":[0,0,0,169125],\"global-pharm\":[0,0,338250,338250],\"fulcrumassets\":[0,0,169125,169125],\"nova-med\":[0,0,169125,169125],\"stormtech\":[0,0,169125,507375],\"ecorp\":[0,0,338250,507375],\"foodnstuff\":[0,0,0,676500],\"4sigma\":[0,0,169125,338250],\"taiyang-digital\":[0,0,169125,0],\"the-hub\":[0,0,338250,338250],\"avmnite-02h\":[0,0,169125,0],\"n00dles\":[1177699.8329391005,169125,0,0],\".\":[0,0,338250,0],\"applied-energetics\":[0,0,169125,0],\"titan-labs\":[0,0,0,169125],\"harakiri-sushi\":[0,0,169125,0],\"hong-fang-tea\":[0,0,169125,169125],\"clarkinc\":[0,0,0,169125],\"netlink\":[0,0,169125,169125],\"nwo\":[467993239460.13336,169125,0,0],\"millenium-fitness\":[0,0,169125,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":3043234611.3155894,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.276000000005,\"onlineExpGained\":37804968593.548935,\"onlineMoneyMade\":3216657805757.849,\"onlineRunningTime\":5353.409999997322,\"ramUsage\":3.1,\"server\":\"neighbor-6\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-7\",\"httpPortOpen\":false,\"ip\":\"76.0.8.2\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"microdyne\":[0,0,338250,507375],\"blade\":[0,0,0,169125],\"run4theh111z\":[0,0,169125,0],\"harakiri-sushi\":[0,0,676500,507375],\"max-hardware\":[0,0,169125,676500],\"global-pharm\":[21867893019.927208,169125,676500,169125],\"neo-net\":[0,0,338250,0],\"clarkinc\":[523807952858.35596,338250,169125,507375],\"rothman-uni\":[0,0,338250,0],\"computek\":[3523495990.812845,169125,169125,0],\"summit-uni\":[0,0,338250,169125],\"snap-fitness\":[6857222293.443136,169125,338250,338250],\"megacorp\":[0,0,169125,507375],\"unitalife\":[0,0,507375,338250],\"vitalife\":[0,0,338250,507375],\"zer0\":[0,0,338250,507375],\"johnson-ortho\":[3932695839.0626116,507375,169125,507375],\"galactic-cyber\":[13371498274.375957,169125,338250,338250],\"millenium-fitness\":[0,0,169125,338250],\"netlink\":[0,0,507375,338250],\"phantasy\":[0,0,0,338250],\"The-Cave\":[0,0,676500,0],\"I.I.I.I\":[0,0,507375,0],\"sigma-cosmetics\":[0,0,0,676500],\"ecorp\":[0,0,169125,338250],\"helios\":[0,0,169125,0],\"syscore\":[0,0,338250,338250],\"the-hub\":[0,0,169125,338250],\"fulcrumtech\":[0,0,0,676500],\"defcomm\":[29955640625.512238,338250,338250,0],\"taiyang-digital\":[28759780933.929173,338250,0,338250],\"zeus-med\":[50089412275.92702,338250,0,338250],\"alpha-ent\":[0,0,338250,169125],\"infocomm\":[29986439776.12856,338250,169125,0],\"nova-med\":[0,0,338250,0],\"powerhouse-fitness\":[0,0,169125,338250],\"icarus\":[14750454295.460175,169125,507375,169125],\"omnia\":[0,0,507375,169125],\"zb-def\":[0,0,169125,169125],\"nectar-net\":[0,0,338250,0],\"CSEC\":[0,0,845625,0],\"crush-fitness\":[2667717854.0967293,507375,169125,0],\"4sigma\":[355178570281.8614,169125,507375,338250],\"titan-labs\":[0,0,338250,169125],\"univ-energy\":[19094908629.804058,169125,338250,169125],\".\":[0,0,676500,0],\"iron-gym\":[0,0,676500,676500],\"rho-construction\":[0,0,507375,169125],\"avmnite-02h\":[0,0,676500,0],\"aerocorp\":[20081629161.47717,338250,169125,169125],\"hong-fang-tea\":[0,0,169125,338250],\"b-and-a\":[0,169125,0,0],\"silver-helix\":[0,0,169125,676500],\"solaris\":[0,0,507375,0],\"catalyst\":[0,0,169125,0],\"lexo-corp\":[0,0,169125,169125],\"kuai-gong\":[0,0,169125,0],\"nwo\":[467993239460.13336,169125,169125,169125],\"foodnstuff\":[0,0,0,507375],\"aevum-police\":[0,0,338250,676500],\"deltaone\":[23786487072.598133,169125,169125,169125],\"applied-energetics\":[41962972684.301994,507375,0,169125],\"omega-net\":[0,0,338250,0],\"stormtech\":[19905889993.18174,169125,338250,0],\"n00dles\":[2283713.125043879,338250,0,0],\"darkweb\":[0,0,338250,0],\"zb-institute\":[14617170208.168247,169125,507375,0],\"joesguns\":[0,0,338250,169125],\"fulcrumassets\":[0,0,169125,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":1054349016.5645667,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.277,\"onlineExpGained\":44579486180.875534,\"onlineMoneyMade\":1692193355241.6826,\"onlineRunningTime\":5313.409999997359,\"ramUsage\":3.1,\"server\":\"neighbor-7\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-8\",\"httpPortOpen\":false,\"ip\":\"99.8.4.4\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"fulcrumassets\":[14939482.120791148,169125,338250,338250],\"titan-labs\":[6722789465.125917,169125,338250,169125],\"darkweb\":[0,0,1353000,0],\"applied-energetics\":[0,0,507375,845625],\"avmnite-02h\":[0,0,1691250,0],\"lexo-corp\":[0,0,676500,338250],\"phantasy\":[0,0,0,1014750],\"powerhouse-fitness\":[15141854994.931292,169125,338250,169125],\"kuai-gong\":[368787954674.2732,169125,169125,338250],\"nova-med\":[0,0,338250,169125],\"vitalife\":[0,0,0,338250],\"The-Cave\":[0,0,338250,0],\"4sigma\":[355178570281.8614,169125,169125,338250],\"nectar-net\":[0,0,338250,0],\"computek\":[0,0,676500,845625],\"snap-fitness\":[0,0,338250,338250],\"syscore\":[0,0,507375,338250],\"zeus-med\":[23833851163.455322,169125,169125,169125],\"blade\":[0,0,0,169125],\"aerocorp\":[19687871726.9384,169125,338250,0],\"stormtech\":[19905889993.18174,169125,169125,0],\"the-hub\":[0,0,338250,676500],\"max-hardware\":[0,0,0,507375],\"galactic-cyber\":[0,0,0,507375],\"crush-fitness\":[1778478569.3978195,338250,338250,169125],\"joesguns\":[0,0,0,507375],\"harakiri-sushi\":[0,0,169125,169125],\"summit-uni\":[0,0,1014750,0],\"foodnstuff\":[0,0,0,507375],\"sigma-cosmetics\":[0,0,0,676500],\"unitalife\":[0,0,507375,169125],\"millenium-fitness\":[0,0,676500,338250],\"microdyne\":[0,0,338250,338250],\"rothman-uni\":[0,0,0,507375],\"alpha-ent\":[0,0,1183875,169125],\"nwo\":[0,0,169125,0],\"helios\":[24602843297.357933,338250,338250,338250],\"catalyst\":[0,0,507375,169125],\"neo-net\":[0,0,0,338250],\"I.I.I.I\":[0,0,845625,0],\"aevum-police\":[0,0,169125,338250],\"megacorp\":[893737283544.9813,169125,169125,0],\"global-pharm\":[0,0,507375,169125],\"rho-construction\":[0,0,338250,169125],\"deltaone\":[0,0,338250,0],\"omnia\":[0,0,169125,338250],\"defcomm\":[0,0,0,169125],\"ecorp\":[836946645140.2667,169125,338250,338250],\"silver-helix\":[0,0,338250,338250],\"b-and-a\":[0,0,0,169125],\"netlink\":[0,0,676500,338250],\"zb-def\":[0,0,338250,0],\"infocomm\":[29986439776.12856,338250,169125,169125],\"iron-gym\":[0,0,0,169125],\"omnitek\":[0,0,169125,338250],\"fulcrumtech\":[0,0,169125,0],\"clarkinc\":[288258369301.6239,169125,676500,0],\"zb-institute\":[0,0,0,169125],\"icarus\":[14750454295.460175,169125,169125,169125],\"omega-net\":[0,0,169125,0],\"solaris\":[0,0,0,169125],\"zer0\":[0,0,0,507375],\".\":[0,0,169125,0],\"johnson-ortho\":[0,0,169125,169125],\"hong-fang-tea\":[0,0,0,169125],\"run4theh111z\":[0,0,507375,0],\"univ-energy\":[0,0,169125,0],\"n00dles\":[1106023.7917627858,169125,0,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":527174516.96659064,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.278,\"onlineExpGained\":44493085218.19101,\"onlineMoneyMade\":2899335341730.896,\"onlineRunningTime\":5193.409999997468,\"ramUsage\":3.1,\"server\":\"neighbor-8\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-9\",\"httpPortOpen\":false,\"ip\":\"40.5.0.8\",\"isConnectedTo\":false,\"maxRam\":262144,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"ecorp\":[773209329941.0715,84562,169124,84562],\"aevum-police\":[0,0,253686,0],\"stormtech\":[58569544715.97515,253686,0,0],\"zer0\":[0,0,84562,253686],\"n00dles\":[3179574.0429186784,253686,0,0],\"defcomm\":[0,0,169124,253686],\"zb-def\":[36206923495.54965,169124,84562,84562],\"hong-fang-tea\":[0,0,84562,169124],\"zb-institute\":[0,0,422810,169124],\"darkweb\":[0,0,338248,0],\"rothman-uni\":[0,0,0,422810],\"nova-med\":[18620501960.49002,84562,169124,169124],\"fulcrumassets\":[15853897.942440534,84562,0,84562],\"nectar-net\":[0,0,84562,169124],\"taiyang-digital\":[12768931213.63659,84562,169124,84562],\"sigma-cosmetics\":[0,0,84562,422810],\"kuai-gong\":[1099132727656.6573,253686,169124,169124],\"blade\":[0,0,253686,84562],\"global-pharm\":[24484652217.97052,84562,84562,0],\".\":[0,0,761058,0],\"univ-energy\":[0,0,338248,0],\"omnia\":[0,0,84562,169124],\"4sigma\":[0,0,338248,338248],\"harakiri-sushi\":[60953087.05282789,84562,253686,0],\"iron-gym\":[0,0,84562,253686],\"catalyst\":[0,0,84562,169124],\"run4theh111z\":[0,0,338248,0],\"the-hub\":[0,0,84562,253686],\"helios\":[0,0,169124,84562],\"megacorp\":[0,84562,169124,169124],\"applied-energetics\":[12922433458.955986,84562,0,84562],\"foodnstuff\":[0,0,0,338248],\"deltaone\":[0,0,84562,253686],\"solaris\":[0,0,169124,253686],\"phantasy\":[0,0,0,507372],\"netlink\":[0,0,84562,169124],\"unitalife\":[0,0,84562,169124],\"omega-net\":[0,0,0,253686],\"powerhouse-fitness\":[0,0,0,84562],\"vitalife\":[0,0,169124,169124],\"summit-uni\":[0,0,338248,0],\"neo-net\":[0,0,169124,84562],\"aerocorp\":[20081629161.47717,84562,84562,0],\"The-Cave\":[0,0,338248,0],\"avmnite-02h\":[0,0,253686,0],\"omnitek\":[0,0,169124,84562],\"clarkinc\":[0,0,84562,253686],\"crush-fitness\":[0,0,84562,169124],\"microdyne\":[0,0,253686,0],\"b-and-a\":[0,0,84562,169124],\"zeus-med\":[24796738750.45892,84562,0,169124],\"johnson-ortho\":[1310898613.0208704,84562,84562,253686],\"fulcrumtech\":[0,0,169124,84562],\"snap-fitness\":[0,0,84562,0],\"max-hardware\":[0,0,0,338248],\"computek\":[7936057538.561598,169124,84562,84562],\"titan-labs\":[14224495247.413113,84562,84562,84562],\"lexo-corp\":[0,0,507372,253686],\"alpha-ent\":[0,0,169124,84562],\"infocomm\":[14993219888.06428,84562,84562,0],\"galactic-cyber\":[13371498274.375957,84562,0,0],\"joesguns\":[0,0,0,84562],\"syscore\":[8810143872.475748,84562,0,253686],\"nwo\":[467993239460.13336,84562,0,84562],\"millenium-fitness\":[0,0,84562,0],\"CSEC\":[0,0,169124,0],\"rho-construction\":[0,0,0,84562],\"silver-helix\":[0,0,0,84562],\"icarus\":[0,0,0,84562]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":4906288450.311995,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.279,\"onlineExpGained\":21544123187.039238,\"onlineMoneyMade\":2609512952025.325,\"onlineRunningTime\":5983.609999996749,\"ramUsage\":3.1,\"server\":\"neighbor-9\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":84562,\"temporary\":false}}]}},\"neighbor-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-10\",\"httpPortOpen\":false,\"ip\":\"24.2.4.1\",\"isConnectedTo\":false,\"maxRam\":262144,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"snap-fitness\":[7422477938.69181,84562,169124,84562],\"titan-labs\":[0,0,338248,169124],\"darkweb\":[0,0,422810,0],\"fulcrumtech\":[0,0,253686,169124],\"nwo\":[415564603697.2082,84562,84562,338248],\"deltaone\":[47572974145.196266,169124,84562,84562],\"summit-uni\":[0,0,422810,169124],\"millenium-fitness\":[1648547106.4980836,84562,0,169124],\"The-Cave\":[0,0,253686,0],\"netlink\":[0,0,169124,338248],\"microdyne\":[0,0,84562,84562],\"blade\":[0,0,169124,253686],\"galactic-cyber\":[40114494823.12787,253686,338248,0],\"unitalife\":[0,0,507372,84562],\"foodnstuff\":[0,0,0,422810],\"fulcrumassets\":[15853897.942440534,84562,253686,84562],\"global-pharm\":[0,0,253686,84562],\"silver-helix\":[0,0,84562,169124],\"4sigma\":[0,0,84562,253686],\"applied-energetics\":[26656709972.175163,253686,84562,0],\"the-hub\":[0,0,84562,169124],\"omega-net\":[0,0,169124,253686],\"joesguns\":[0,0,253686,338248],\"b-and-a\":[444313162284.176,84562,0,0],\"taiyang-digital\":[27148821680.601173,169124,84562,0],\"defcomm\":[0,0,84562,84562],\"aerocorp\":[0,0,169124,84562],\"avmnite-02h\":[0,0,422810,0],\"zeus-med\":[50585347050.936195,169124,84562,169124],\"icarus\":[29500908590.92035,253686,84562,0],\"zb-institute\":[0,0,338248,84562],\"CSEC\":[0,0,169124,0],\"vitalife\":[11446637150.443323,84562,0,169124],\"johnson-ortho\":[2621797226.041741,253686,0,0],\"nectar-net\":[0,0,169124,422810],\"lexo-corp\":[0,0,84562,422810],\"kuai-gong\":[0,0,84562,84562],\"omnia\":[0,0,169124,169124],\"helios\":[12301421648.678967,84562,338248,169124],\"omnitek\":[0,0,169124,169124],\"powerhouse-fitness\":[0,0,253686,253686],\"crush-fitness\":[889239284.6989098,84562,169124,0],\"I.I.I.I\":[0,0,253686,0],\"zer0\":[0,0,338248,169124],\"nova-med\":[37241003920.98004,169124,169124,84562],\"neo-net\":[0,0,0,169124],\"hong-fang-tea\":[0,0,0,591934],\"alpha-ent\":[13026158746.484962,84562,253686,84562],\"sigma-cosmetics\":[0,0,0,507372],\"max-hardware\":[0,0,0,338248],\"megacorp\":[1787474567089.9626,169124,0,0],\"iron-gym\":[0,0,422810,338248],\"rho-construction\":[0,0,169124,0],\"infocomm\":[29986439776.12856,169124,0,0],\"phantasy\":[0,0,169124,84562],\".\":[0,0,338248,0],\"ecorp\":[836946645140.2667,84562,0,84562],\"harakiri-sushi\":[0,0,84562,84562],\"zb-def\":[0,0,84562,169124],\"univ-energy\":[0,0,253686,84562],\"clarkinc\":[0,0,84562,0],\"stormtech\":[0,0,0,84562],\"syscore\":[8810143872.475748,84562,84562,0],\"rothman-uni\":[0,0,84562,84562],\"solaris\":[0,0,84562,84562],\"catalyst\":[5842380554.698375,84562,169124,84562],\"aevum-police\":[0,0,84562,84562],\"run4theh111z\":[0,0,169124,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":4954213287.043853,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.281,\"onlineExpGained\":23494101805.118664,\"onlineMoneyMade\":3837130335598.334,\"onlineRunningTime\":5983.609999996749,\"ramUsage\":3.1,\"server\":\"neighbor-10\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":84562,\"temporary\":false}}]}},\"neighbor-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-11\",\"httpPortOpen\":false,\"ip\":\"24.1.8.8\",\"isConnectedTo\":false,\"maxRam\":262144,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"computek\":[11381749043.70227,253686,169124,169124],\"syscore\":[8810143872.475748,84562,84562,253686],\"omnitek\":[0,84562,253686,84562],\"zer0\":[0,0,84562,169124],\"kuai-gong\":[368787954674.2732,84562,169124,169124],\"ecorp\":[2510839935420.8003,338248,169124,253686],\"crush-fitness\":[889239284.6989098,84562,169124,84562],\"powerhouse-fitness\":[0,0,422810,84562],\"foodnstuff\":[0,0,84562,338248],\"avmnite-02h\":[0,0,253686,0],\"nova-med\":[35154974823.34704,169124,0,169124],\"max-hardware\":[0,0,0,422810],\"rothman-uni\":[0,0,84562,338248],\"the-hub\":[0,0,0,253686],\"zeus-med\":[0,0,169124,84562],\"harakiri-sushi\":[0,0,422810,338248],\"run4theh111z\":[0,0,169124,0],\"rho-construction\":[0,0,253686,253686],\"nectar-net\":[0,0,84562,422810],\"zb-institute\":[0,0,253686,253686],\"millenium-fitness\":[0,0,169124,0],\"megacorp\":[893737283544.9813,84562,84562,0],\"iron-gym\":[0,0,169124,338248],\"n00dles\":[4281911.518005125,338248,0,0],\"netlink\":[0,0,253686,169124],\"applied-energetics\":[12669052410.741163,84562,253686,0],\"univ-energy\":[14656136795.756454,84562,338248,0],\"hong-fang-tea\":[0,0,84562,84562],\"omega-net\":[0,0,253686,338248],\"aevum-police\":[0,0,338248,253686],\"titan-labs\":[0,0,169124,84562],\"defcomm\":[14393391062.071756,84562,169124,84562],\"global-pharm\":[0,0,253686,84562],\"zb-def\":[18103461747.774826,84562,0,84562],\"alpha-ent\":[0,0,253686,169124],\"lexo-corp\":[0,0,169124,0],\"stormtech\":[19515578424.68798,84562,0,169124],\"silver-helix\":[0,0,84562,253686],\"phantasy\":[0,0,0,253686],\"I.I.I.I\":[0,0,676496,0],\"blade\":[0,0,253686,84562],\"CSEC\":[0,0,253686,0],\"microdyne\":[0,0,84562,169124],\"4sigma\":[355178570281.8614,169124,84562,169124],\"darkweb\":[0,0,338248,0],\"icarus\":[14750454295.460175,84562,169124,0],\"neo-net\":[0,0,0,169124],\"unitalife\":[14184365902.304794,84562,253686,0],\"clarkinc\":[576516738603.2478,169124,0,253686],\"fulcrumtech\":[0,0,84562,84562],\"johnson-ortho\":[2621797226.041741,169124,0,253686],\"vitalife\":[0,0,253686,169124],\"summit-uni\":[0,0,169124,84562],\"aerocorp\":[20081629161.47717,84562,84562,338248],\"galactic-cyber\":[13371498274.375957,84562,84562,0],\"b-and-a\":[0,84562,253686,253686],\"deltaone\":[23786487072.598133,84562,84562,0],\"helios\":[0,0,84562,0],\"nwo\":[467993239460.13336,84562,0,84562],\"snap-fitness\":[7422477938.69181,84562,84562,84562],\"taiyang-digital\":[0,0,84562,84562],\"catalyst\":[5842380554.698375,84562,169124,0],\"joesguns\":[0,0,0,169124],\".\":[0,0,338248,0],\"infocomm\":[0,0,0,84562],\"omnia\":[0,0,169124,0],\"fulcrumassets\":[0,0,84562,0],\"The-Cave\":[0,0,84562,0],\"solaris\":[0,0,84562,84562]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":5404705321.888215,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.282,\"onlineExpGained\":23357964251.109043,\"onlineMoneyMade\":5410692821787.719,\"onlineRunningTime\":5903.409999996822,\"ramUsage\":3.1,\"server\":\"neighbor-11\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":84562,\"temporary\":false}}]}},\"neighbor-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-12\",\"httpPortOpen\":false,\"ip\":\"91.7.1.5\",\"isConnectedTo\":false,\"maxRam\":262144,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"the-hub\":[0,0,253686,253686],\"alpha-ent\":[11798193310.426865,84562,169124,0],\"powerhouse-fitness\":[15141854994.931292,84562,338248,0],\"darkweb\":[0,0,422810,0],\"snap-fitness\":[21839322616.695618,253686,84562,169124],\"vitalife\":[0,0,253686,84562],\"aevum-police\":[0,0,422810,169124],\".\":[0,0,338248,0],\"univ-energy\":[19094908629.804058,84562,169124,84562],\"omega-net\":[0,0,84562,507372],\"lexo-corp\":[0,0,84562,169124],\"iron-gym\":[0,0,84562,338248],\"zb-institute\":[0,0,84562,84562],\"unitalife\":[17945740950.51085,169124,169124,0],\"nova-med\":[0,84562,84562,84562],\"galactic-cyber\":[13371498274.375957,84562,338248,0],\"megacorp\":[0,84562,84562,338248],\"hong-fang-tea\":[0,0,84562,422810],\"solaris\":[0,0,169124,253686],\"neo-net\":[0,0,253686,253686],\"kuai-gong\":[0,0,169124,169124],\"netlink\":[0,0,169124,169124],\"summit-uni\":[0,0,84562,84562],\"infocomm\":[0,0,84562,169124],\"microdyne\":[22096379.83885479,84562,253686,253686],\"taiyang-digital\":[14667488276.303879,84562,84562,0],\"omnitek\":[0,0,169124,169124],\"joesguns\":[0,0,84562,253686],\"avmnite-02h\":[0,0,422810,0],\"johnson-ortho\":[1141216130.6961808,84562,84562,0],\"rho-construction\":[8504337237.017173,84562,422810,169124],\"sigma-cosmetics\":[0,0,0,422810],\"nectar-net\":[0,0,84562,169124],\"defcomm\":[0,0,169124,169124],\"computek\":[3968028769.280799,84562,169124,253686],\"titan-labs\":[0,0,169124,84562],\"foodnstuff\":[0,0,84562,253686],\"I.I.I.I\":[0,0,507372,0],\"fulcrumassets\":[0,0,169124,84562],\"harakiri-sushi\":[0,0,84562,253686],\"ecorp\":[0,0,169124,84562],\"n00dles\":[2127802.799480187,169124,0,84562],\"millenium-fitness\":[4123598854.8287826,84562,338248,169124],\"icarus\":[14750454295.460175,84562,253686,84562],\"deltaone\":[23786487072.598133,84562,169124,84562],\"The-Cave\":[0,0,338248,0],\"b-and-a\":[1452623948495.3562,253686,0,84562],\"omnia\":[0,0,84562,84562],\"phantasy\":[0,0,0,169124],\"stormtech\":[0,0,0,253686],\"clarkinc\":[565212488826.7135,169124,169124,169124],\"aerocorp\":[0,0,84562,169124],\"zeus-med\":[24796738750.45892,84562,84562,0],\"crush-fitness\":[0,0,84562,169124],\"nwo\":[467993239460.13336,84562,0,0],\"silver-helix\":[0,0,0,591934],\"syscore\":[17620287744.951496,169124,0,253686],\"run4theh111z\":[0,0,422810,0],\"helios\":[0,0,253686,0],\"fulcrumtech\":[0,0,169124,84562],\"global-pharm\":[0,0,338248,169124],\"zer0\":[0,0,0,507372],\"4sigma\":[355178570281.8614,84562,169124,0],\"rothman-uni\":[0,0,169124,0],\"zb-def\":[0,0,0,253686],\"applied-energetics\":[0,0,169124,84562],\"max-hardware\":[0,0,0,253686],\"catalyst\":[0,0,84562,169124],\"CSEC\":[0,0,84562,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":6098415105.650813,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.283,\"onlineExpGained\":23572544320.58142,\"onlineMoneyMade\":3053582627155.0425,\"onlineRunningTime\":5893.409999996831,\"ramUsage\":3.1,\"server\":\"neighbor-12\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":84562,\"temporary\":false}}]}},\"neighbor-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-13\",\"httpPortOpen\":false,\"ip\":\"8.6.3.1\",\"isConnectedTo\":false,\"maxRam\":262144,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"clarkinc\":[859122983016.6046,253686,169124,84562],\"netlink\":[0,0,169124,0],\".\":[0,0,338248,0],\"nova-med\":[16534472862.85702,84562,169124,0],\"darkweb\":[0,0,169124,0],\"snap-fitness\":[7422477938.69181,84562,84562,84562],\"the-hub\":[0,0,84562,338248],\"univ-energy\":[0,0,253686,253686],\"icarus\":[14750454295.460175,169124,169124,169124],\"omnitek\":[0,0,169124,169124],\"nwo\":[0,0,169124,169124],\"alpha-ent\":[8341428437.93121,84562,338248,0],\"harakiri-sushi\":[0,0,84562,0],\"megacorp\":[859032375571.8774,84562,0,0],\"4sigma\":[0,0,84562,84562],\"omega-net\":[0,0,0,84562],\"kuai-gong\":[368787954674.2732,84562,169124,169124],\"zb-institute\":[0,0,253686,169124],\"run4theh111z\":[0,0,169124,0],\"max-hardware\":[0,0,0,169124],\"aevum-police\":[0,0,253686,169124],\"sigma-cosmetics\":[0,0,0,253686],\"foodnstuff\":[0,0,84562,253686],\"nectar-net\":[0,0,169124,0],\"blade\":[0,169124,0,84562],\"lexo-corp\":[0,0,169124,169124],\"The-Cave\":[0,0,422810,0],\"titan-labs\":[0,0,338248,84562],\"helios\":[6256207125.156094,84562,84562,0],\"deltaone\":[23786487072.598133,84562,0,84562],\"iron-gym\":[0,0,0,253686],\"zeus-med\":[22908353674.985893,84562,0,253686],\"phantasy\":[0,0,0,253686],\"avmnite-02h\":[0,0,169124,0],\"joesguns\":[0,0,0,253686],\"unitalife\":[0,0,169124,84562],\"infocomm\":[0,0,84562,338248],\"vitalife\":[0,0,253686,84562],\"stormtech\":[19905889993.18174,84562,0,84562],\"microdyne\":[0,0,169124,169124],\"crush-fitness\":[0,0,0,169124],\"johnson-ortho\":[1310898613.0208704,84562,84562,84562],\"powerhouse-fitness\":[0,0,169124,169124],\"syscore\":[8810143872.475748,84562,169124,84562],\"n00dles\":[4402392.371648053,338248,0,0],\"rho-construction\":[0,0,169124,84562],\"zer0\":[0,0,84562,338248],\"omnia\":[0,0,338248,84562],\"global-pharm\":[0,0,169124,0],\"fulcrumtech\":[0,0,84562,253686],\"silver-helix\":[0,0,84562,84562],\"millenium-fitness\":[0,0,0,84562],\"neo-net\":[0,0,0,253686],\"ecorp\":[0,0,169124,84562],\"zb-def\":[0,0,84562,338248],\"I.I.I.I\":[0,0,253686,0],\"applied-energetics\":[13987657561.433998,84562,0,169124],\"defcomm\":[30548763484.39809,169124,0,84562],\"galactic-cyber\":[13371498274.375957,84562,0,169124],\"CSEC\":[0,0,253686,0],\"solaris\":[0,0,0,169124],\"fulcrumassets\":[0,0,0,169124],\"b-and-a\":[500368785748.786,84562,0,169124],\"summit-uni\":[0,0,0,169124],\"taiyang-digital\":[0,0,0,84562],\"catalyst\":[0,0,0,84562],\"hong-fang-tea\":[0,0,0,84562],\"computek\":[3968028769.280799,84562,0,84562]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":5263327788.167943,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.285,\"onlineExpGained\":18964046537.144882,\"onlineMoneyMade\":2779219263379.7607,\"onlineRunningTime\":5893.409999996831,\"ramUsage\":3.1,\"server\":\"neighbor-13\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":84562,\"temporary\":false}}]}},\"neighbor-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-14\",\"httpPortOpen\":false,\"ip\":\"96.8.9.0\",\"isConnectedTo\":false,\"maxRam\":262144,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"global-pharm\":[0,0,253686,0],\"defcomm\":[14681258883.313192,84562,84562,253686],\"zer0\":[0,0,0,422810],\"omnia\":[0,0,169124,84562],\"fulcrumassets\":[0,0,84562,253686],\"applied-energetics\":[27975315122.867996,169124,169124,422810],\"the-hub\":[0,0,0,169124],\"I.I.I.I\":[0,0,169124,0],\"zeus-med\":[0,0,338248,84562],\"CSEC\":[0,0,422810,0],\"vitalife\":[0,0,84562,84562],\"kuai-gong\":[0,0,169124,84562],\"b-and-a\":[981115266174.0902,169124,169124,84562],\"fulcrumtech\":[0,0,169124,253686],\"aerocorp\":[57186271657.459854,338248,169124,338248],\"avmnite-02h\":[0,0,253686,84562],\"rothman-uni\":[0,0,253686,84562],\"infocomm\":[42717784962.13409,253686,0,169124],\"crush-fitness\":[0,0,169124,169124],\"silver-helix\":[0,0,84562,253686],\"catalyst\":[0,0,253686,0],\"n00dles\":[4319859.31196568,338248,0,0],\"hong-fang-tea\":[0,0,0,84562],\"unitalife\":[0,0,169124,84562],\"icarus\":[14750454295.460175,84562,84562,84562],\"nwo\":[0,0,169124,84562],\"nectar-net\":[0,0,0,169124],\"powerhouse-fitness\":[0,0,84562,0],\"netlink\":[0,0,84562,253686],\"nova-med\":[0,0,0,253686],\"summit-uni\":[0,0,169124,0],\"neo-net\":[0,0,84562,253686],\"stormtech\":[0,0,0,84562],\"darkweb\":[0,0,253686,0],\"titan-labs\":[0,0,253686,0],\"blade\":[0,0,84562,84562],\"syscore\":[8637395953.407597,84562,0,169124],\"joesguns\":[0,0,0,338248],\"clarkinc\":[842277434330.0044,253686,84562,84562],\"solaris\":[0,0,169124,84562],\"microdyne\":[8889625575.40793,169124,338248,169124],\"alpha-ent\":[0,0,169124,169124],\"zb-institute\":[0,0,169124,84562],\"millenium-fitness\":[0,0,253686,169124],\"galactic-cyber\":[26742996548.751915,169124,338248,84562],\".\":[0,0,253686,0],\"snap-fitness\":[7422477938.69181,84562,0,0],\"megacorp\":[0,0,0,169124],\"taiyang-digital\":[14379890466.964586,84562,84562,84562],\"phantasy\":[0,0,84562,422810],\"ecorp\":[836946645140.2667,84562,0,84562],\"iron-gym\":[0,0,0,253686],\"computek\":[0,0,84562,253686],\"max-hardware\":[0,0,84562,169124],\"rho-construction\":[0,0,253686,0],\"zb-def\":[18103461747.774826,84562,0,0],\"univ-energy\":[15668384033.981848,84562,84562,84562],\"omega-net\":[0,0,84562,253686],\"aevum-police\":[0,0,169124,84562],\"johnson-ortho\":[2621797226.041741,169124,0,84562],\"deltaone\":[23786487072.598133,84562,84562,84562],\"4sigma\":[0,0,84562,0],\"lexo-corp\":[0,0,0,169124],\"foodnstuff\":[0,0,84562,84562],\"helios\":[0,0,253686,84562],\"harakiri-sushi\":[0,0,84562,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":3742917432.529296,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.286,\"onlineExpGained\":21265879626.7565,\"onlineMoneyMade\":2943907266988.529,\"onlineRunningTime\":5893.409999996831,\"ramUsage\":3.1,\"server\":\"neighbor-14\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":84562,\"temporary\":false}}]}},\"neighbor-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-15\",\"httpPortOpen\":false,\"ip\":\"4.7.4.0\",\"isConnectedTo\":false,\"maxRam\":262144,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"vitalife\":[0,0,253686,253686],\"CSEC\":[0,0,253686,0],\"b-and-a\":[444313162284.176,84562,0,169124],\"nwo\":[0,0,0,84562],\"computek\":[3523495990.812845,84562,169124,0],\"aerocorp\":[40163258322.95434,169124,169124,84562],\".\":[0,0,507372,0],\"nectar-net\":[0,0,84562,169124],\"alpha-ent\":[0,0,169124,0],\"icarus\":[13899682527.32751,84562,0,84562],\"The-Cave\":[0,0,84562,0],\"netlink\":[0,0,169124,507372],\"galactic-cyber\":[12852266699.707764,169124,84562,338248],\"univ-energy\":[0,0,253686,84562],\"zer0\":[0,0,84562,169124],\"harakiri-sushi\":[0,0,169124,169124],\"omnitek\":[348474187228.8823,169124,0,84562],\"microdyne\":[0,0,253686,169124],\"rho-construction\":[0,0,253686,84562],\"infocomm\":[0,0,84562,84562],\"aevum-police\":[0,0,253686,253686],\"omnia\":[0,0,253686,338248],\"avmnite-02h\":[0,0,253686,0],\"nova-med\":[35154974823.34704,169124,169124,84562],\"fulcrumassets\":[30793380.063231684,169124,84562,84562],\"applied-energetics\":[13987657561.433998,84562,84562,84562],\"global-pharm\":[0,0,253686,84562],\"4sigma\":[1065535710845.5842,253686,84562,253686],\"zb-institute\":[8109105806.760844,84562,169124,0],\"neo-net\":[0,0,84562,338248],\"zeus-med\":[0,0,169124,0],\"snap-fitness\":[0,0,84562,84562],\"summit-uni\":[0,0,169124,84562],\"solaris\":[0,0,84562,169124],\"darkweb\":[0,0,676496,0],\"ecorp\":[1641393632010.9575,253686,0,253686],\"rothman-uni\":[0,0,84562,84562],\"max-hardware\":[0,0,84562,253686],\"millenium-fitness\":[0,0,169124,0],\"omega-net\":[0,0,0,338248],\"syscore\":[17620287744.951496,169124,84562,253686],\"clarkinc\":[0,0,84562,338248],\"unitalife\":[17945740950.51085,84562,84562,169124],\"n00dles\":[2168659.8191665206,169124,0,0],\"the-hub\":[0,0,0,84562],\"titan-labs\":[0,0,84562,84562],\"powerhouse-fitness\":[15141854994.931292,84562,338248,84562],\"hong-fang-tea\":[0,0,84562,169124],\"blade\":[0,0,84562,253686],\"phantasy\":[0,0,84562,169124],\"silver-helix\":[0,0,84562,338248],\"lexo-corp\":[0,0,84562,84562],\"taiyang-digital\":[14379890466.964586,84562,84562,169124],\"iron-gym\":[0,0,0,84562],\"joesguns\":[0,0,169124,338248],\"catalyst\":[0,0,338248,84562],\"sigma-cosmetics\":[0,0,0,422810],\"run4theh111z\":[0,0,338248,0],\"crush-fitness\":[889239284.6989098,84562,169124,253686],\"I.I.I.I\":[0,0,338248,0],\"helios\":[0,0,84562,0],\"deltaone\":[0,0,84562,0],\"kuai-gong\":[0,84562,0,84562],\"stormtech\":[39811779986.36348,169124,84562,84562],\"zb-def\":[18103461747.774826,84562,84562,0],\"foodnstuff\":[0,0,0,169124],\"megacorp\":[0,0,84562,84562],\"defcomm\":[0,0,0,84562],\"johnson-ortho\":[0,0,84562,0],\"fulcrumtech\":[0,0,0,84562]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":3826785683.878014,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.287000000004,\"onlineExpGained\":21929798888.064415,\"onlineMoneyMade\":3751332351318.022,\"onlineRunningTime\":5883.40999999684,\"ramUsage\":3.1,\"server\":\"neighbor-15\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":84562,\"temporary\":false}}]}},\"neighbor-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-16\",\"httpPortOpen\":false,\"ip\":\"43.8.9.2\",\"isConnectedTo\":false,\"maxRam\":262144,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"stormtech\":[0,0,253686,253686],\"taiyang-digital\":[39917752894.23776,253686,169124,0],\"univ-energy\":[15488904912.888416,84562,253686,84562],\"The-Cave\":[0,0,338248,0],\"avmnite-02h\":[0,0,84562,0],\"microdyne\":[0,0,84562,169124],\"vitalife\":[0,0,169124,169124],\"omnia\":[0,0,84562,253686],\"phantasy\":[0,0,169124,169124],\"unitalife\":[18304655769.521065,84562,253686,169124],\"lexo-corp\":[0,0,0,84562],\"solaris\":[0,0,84562,253686],\"max-hardware\":[0,0,0,253686],\"nova-med\":[0,84562,84562,169124],\"run4theh111z\":[0,0,169124,0],\"omega-net\":[0,0,84562,84562],\"computek\":[0,0,169124,84562],\"zb-institute\":[0,0,0,84562],\"CSEC\":[0,0,253686,0],\"galactic-cyber\":[25971759744.67769,169124,0,84562],\"defcomm\":[15274381742.199045,169124,169124,0],\"sigma-cosmetics\":[0,0,84562,338248],\"crush-fitness\":[1727189323.4273303,169124,84562,0],\"the-hub\":[0,0,338248,0],\"johnson-ortho\":[2621797226.041741,169124,84562,0],\"powerhouse-fitness\":[0,0,422810,169124],\"joesguns\":[0,0,84562,84562],\"infocomm\":[0,0,169124,84562],\"omnitek\":[0,0,169124,84562],\"hong-fang-tea\":[0,0,0,422810],\"applied-energetics\":[0,0,84562,253686],\"kuai-gong\":[0,0,0,84562],\"global-pharm\":[54281255710.96282,169124,84562,84562],\"blade\":[0,0,84562,253686],\"ecorp\":[0,0,169124,0],\"zer0\":[0,0,84562,84562],\"aerocorp\":[0,0,0,169124],\"icarus\":[0,0,84562,169124],\"fulcrumtech\":[0,0,169124,0],\"rothman-uni\":[0,0,84562,84562],\"I.I.I.I\":[0,0,169124,0],\"b-and-a\":[0,84562,169124,169124],\"neo-net\":[0,0,0,84562],\"catalyst\":[0,0,169124,0],\"nwo\":[0,0,169124,84562],\"deltaone\":[0,0,84562,0],\"4sigma\":[0,0,338248,253686],\"megacorp\":[0,169124,84562,169124],\"summit-uni\":[0,0,169124,84562],\".\":[0,0,169124,0],\"darkweb\":[0,0,169124,0],\"clarkinc\":[0,0,169124,0],\"alpha-ent\":[0,0,84562,0],\"zeus-med\":[0,84562,84562,253686],\"snap-fitness\":[18534419869.238064,253686,0,253686],\"fulcrumassets\":[0,0,84562,84562],\"titan-labs\":[14224495247.413113,84562,169124,84562],\"netlink\":[0,0,0,84562],\"zb-def\":[18103461747.774826,84562,253686,169124],\"silver-helix\":[0,0,0,253686],\"aevum-police\":[0,0,253686,0],\"n00dles\":[2212044.998556248,169124,0,0],\"rho-construction\":[0,0,169124,169124],\"nectar-net\":[0,0,84562,84562],\"helios\":[0,0,84562,0],\"syscore\":[8810143872.475748,84562,84562,84562],\"foodnstuff\":[0,0,0,84562],\"harakiri-sushi\":[0,0,84562,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":4078390320.1340795,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.288,\"onlineExpGained\":19328122125.216553,\"onlineMoneyMade\":233262430105.85614,\"onlineRunningTime\":5788.409999996927,\"ramUsage\":3.1,\"server\":\"neighbor-16\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":84562,\"temporary\":false}}]}},\"neighbor-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-17\",\"httpPortOpen\":false,\"ip\":\"9.6.9.8\",\"isConnectedTo\":false,\"maxRam\":262144,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"unitalife\":[0,0,84562,84562],\"catalyst\":[0,0,0,84562],\"nwo\":[467993239460.13336,84562,84562,84562],\"powerhouse-fitness\":[0,0,84562,84562],\"The-Cave\":[0,0,507372,0],\"aerocorp\":[18552321247.991344,84562,0,169124],\"global-pharm\":[0,0,338248,169124],\"rho-construction\":[0,0,169124,169124],\"vitalife\":[0,0,253686,253686],\"joesguns\":[0,0,253686,338248],\"icarus\":[0,0,0,169124],\"darkweb\":[0,0,253686,0],\"syscore\":[24303059927.414013,338248,0,84562],\"phantasy\":[0,0,0,253686],\"harakiri-sushi\":[0,0,253686,0],\"deltaone\":[21121719803.20895,84562,0,338248],\"rothman-uni\":[0,0,84562,84562],\"millenium-fitness\":[0,0,0,169124],\"alpha-ent\":[21906211501.94833,169124,422810,84562],\"zer0\":[0,0,84562,169124],\"defcomm\":[29385549450.112534,169124,84562,0],\"crush-fitness\":[1778478569.3978195,169124,253686,84562],\"hong-fang-tea\":[0,0,84562,169124],\"zeus-med\":[0,0,84562,169124],\"neo-net\":[0,0,338248,338248],\"microdyne\":[8715319191.576403,84562,169124,169124],\"the-hub\":[0,0,84562,169124],\"infocomm\":[0,0,84562,338248],\"summit-uni\":[5311613506.456279,84562,253686,84562],\"omnia\":[0,0,253686,0],\"run4theh111z\":[0,0,338248,0],\"johnson-ortho\":[1310898613.0208704,84562,169124,84562],\"helios\":[0,84562,169124,0],\".\":[0,0,422810,0],\"zb-def\":[15760152892.673008,84562,169124,84562],\"megacorp\":[1769950306628.2964,169124,169124,84562],\"ecorp\":[0,0,0,169124],\"fulcrumtech\":[0,0,84562,84562],\"I.I.I.I\":[0,0,84562,0],\"omega-net\":[0,0,169124,84562],\"computek\":[3968028769.280799,84562,84562,0],\"b-and-a\":[0,0,253686,422810],\"applied-energetics\":[13987657561.433998,84562,84562,84562],\"kuai-gong\":[0,0,169124,84562],\"titan-labs\":[0,0,84562,84562],\"omnitek\":[0,0,169124,253686],\"univ-energy\":[0,0,253686,169124],\"stormtech\":[19905889993.18174,84562,84562,84562],\"avmnite-02h\":[0,0,253686,0],\"CSEC\":[0,0,422810,0],\"lexo-corp\":[0,0,84562,0],\"nectar-net\":[0,0,84562,253686],\"clarkinc\":[282606244413.35675,84562,0,84562],\"netlink\":[0,0,253686,169124],\"n00dles\":[2238954.2485328875,169124,0,0],\"nova-med\":[37241003920.98004,169124,0,84562],\"snap-fitness\":[14993405436.157455,169124,84562,0],\"blade\":[0,0,84562,253686],\"sigma-cosmetics\":[0,0,0,169124],\"solaris\":[0,0,0,169124],\"iron-gym\":[0,0,84562,0],\"foodnstuff\":[0,0,0,84562],\"silver-helix\":[0,0,169124,0],\"taiyang-digital\":[0,0,84562,0],\"max-hardware\":[0,0,0,84562],\"fulcrumassets\":[0,0,0,84562],\"aevum-police\":[0,0,84562,84562],\"4sigma\":[0,0,0,84562],\"galactic-cyber\":[0,0,0,84562]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":4087975390.941519,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.29,\"onlineExpGained\":19952820128.7931,\"onlineMoneyMade\":2758793339840.8677,\"onlineRunningTime\":5788.409999996927,\"ramUsage\":3.1,\"server\":\"neighbor-17\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":84562,\"temporary\":false}}]}},\"neighbor-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-18\",\"httpPortOpen\":false,\"ip\":\"29.1.3.6\",\"isConnectedTo\":false,\"maxRam\":262144,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"vitalife\":[0,0,253686,0],\"zer0\":[0,0,84562,253686],\".\":[0,0,507372,0],\"taiyang-digital\":[13550491955.360857,169124,84562,253686],\"blade\":[0,0,253686,253686],\"crush-fitness\":[0,0,84562,84562],\"kuai-gong\":[730344772982.3842,169124,0,84562],\"neo-net\":[0,0,84562,422810],\"defcomm\":[29385549450.112534,169124,0,253686],\"aerocorp\":[0,84562,253686,169124],\"rothman-uni\":[0,0,338248,169124],\"microdyne\":[0,84562,169124,169124],\"powerhouse-fitness\":[0,0,169124,507372],\"millenium-fitness\":[0,0,169124,338248],\"solaris\":[0,0,253686,84562],\"summit-uni\":[8981833134.357391,169124,338248,84562],\"the-hub\":[0,0,169124,253686],\"n00dles\":[6305458.757205909,507372,0,0],\"zeus-med\":[47705092425.44481,169124,0,0],\"univ-energy\":[0,0,169124,0],\"omnia\":[0,0,0,84562],\"syscore\":[0,0,84562,0],\"silver-helix\":[0,0,84562,84562],\"lexo-corp\":[0,0,0,84562],\"sigma-cosmetics\":[0,0,84562,84562],\"icarus\":[14177676177.874062,169124,0,169124],\"4sigma\":[355178570281.8614,84562,253686,338248],\"catalyst\":[0,0,422810,169124],\"unitalife\":[0,0,422810,84562],\"clarkinc\":[0,0,84562,169124],\"aevum-police\":[0,0,253686,169124],\"max-hardware\":[0,0,0,507372],\"omega-net\":[0,0,0,169124],\"b-and-a\":[952821047127.502,169124,0,169124],\"titan-labs\":[0,0,338248,0],\"I.I.I.I\":[0,0,253686,0],\"CSEC\":[0,0,169124,0],\"alpha-ent\":[12520337126.571474,84562,338248,169124],\"The-Cave\":[0,0,338248,0],\"johnson-ortho\":[0,0,253686,0],\"megacorp\":[0,0,84562,84562],\"zb-institute\":[0,0,84562,84562],\"joesguns\":[0,0,84562,338248],\"helios\":[0,0,253686,0],\"harakiri-sushi\":[0,0,169124,84562],\"applied-energetics\":[13987657561.433998,84562,253686,253686],\"deltaone\":[47572974145.196266,169124,84562,253686],\"avmnite-02h\":[0,0,253686,0],\"nectar-net\":[0,0,253686,253686],\"omnitek\":[0,0,169124,0],\"snap-fitness\":[0,84562,84562,84562],\"hong-fang-tea\":[0,0,0,253686],\"computek\":[7936057538.561598,169124,169124,84562],\"zb-def\":[36206923495.54965,169124,84562,84562],\"galactic-cyber\":[13371498274.375957,84562,0,84562],\"nwo\":[935986478920.2667,169124,0,84562],\"foodnstuff\":[0,0,0,338248],\"phantasy\":[0,0,84562,84562],\"iron-gym\":[0,0,84562,422810],\"infocomm\":[0,0,84562,169124],\"fulcrumtech\":[30008384294.547077,84562,84562,0],\"ecorp\":[836946645140.2667,84562,0,0],\"netlink\":[0,0,169124,0],\"darkweb\":[0,0,253686,0],\"rho-construction\":[0,0,0,169124],\"fulcrumassets\":[0,0,84562,84562],\"stormtech\":[19905889993.18174,84562,0,0],\"nova-med\":[0,0,0,84562]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":5050063469.128653,\"offlineMoneyMade\":0,\"offlineRunningTime\":60704.291000000005,\"onlineExpGained\":22483585994.51067,\"onlineMoneyMade\":4106594185483.6055,\"onlineRunningTime\":5788.409999996927,\"ramUsage\":3.1,\"server\":\"neighbor-18\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":84562,\"temporary\":false}}]}},\"hacknet-server-6\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":36,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-6\",\"httpPortOpen\":false,\"ip\":\"55.2.5.5\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":36,\"hashCapacity\":1048576,\"hashRate\":11.322103431103416,\"level\":150,\"onlineTimeSeconds\":75490.99999992581,\"totalHashesGenerated\":571790.4320661288,\"runningScripts\":[]}},\"hacknet-server-7\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":36,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-7\",\"httpPortOpen\":false,\"ip\":\"62.3.2.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":36,\"hashCapacity\":1048576,\"hashRate\":11.322103431103416,\"level\":150,\"onlineTimeSeconds\":75043.19999992418,\"totalHashesGenerated\":567488.6638647829,\"runningScripts\":[]}},\"hacknet-server-8\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":36,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-8\",\"httpPortOpen\":false,\"ip\":\"52.3.5.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":36,\"hashCapacity\":1048576,\"hashRate\":11.322103431103416,\"level\":150,\"onlineTimeSeconds\":74348.39999992166,\"totalHashesGenerated\":566383.4451891137,\"runningScripts\":[]}},\"hacknet-server-9\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":36,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-9\",\"httpPortOpen\":false,\"ip\":\"78.0.8.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":36,\"hashCapacity\":1048576,\"hashRate\":11.322103431103416,\"level\":150,\"onlineTimeSeconds\":73423.39999992093,\"totalHashesGenerated\":564775.291178048,\"runningScripts\":[]}},\"hacknet-server-10\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":36,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-10\",\"httpPortOpen\":false,\"ip\":\"88.2.8.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":36,\"hashCapacity\":1048576,\"hashRate\":11.322103431103416,\"level\":150,\"onlineTimeSeconds\":72940.19999992137,\"totalHashesGenerated\":563843.0612309183,\"runningScripts\":[]}},\"hacknet-server-11\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":36,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-11\",\"httpPortOpen\":false,\"ip\":\"43.3.1.5\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":36,\"hashCapacity\":1048576,\"hashRate\":11.322103431103416,\"level\":150,\"onlineTimeSeconds\":72924.5999999214,\"totalHashesGenerated\":563360.2424756697,\"runningScripts\":[]}},\"hacknet-server-12\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":36,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-12\",\"httpPortOpen\":false,\"ip\":\"10.1.0.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":36,\"hashCapacity\":1048576,\"hashRate\":11.322103431103416,\"level\":150,\"onlineTimeSeconds\":71456.79999992273,\"totalHashesGenerated\":552830.9907097046,\"runningScripts\":[]}},\"hacknet-server-13\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":36,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-13\",\"httpPortOpen\":false,\"ip\":\"72.5.1.0\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":36,\"hashCapacity\":1048576,\"hashRate\":11.322103431103416,\"level\":150,\"onlineTimeSeconds\":70641.99999992347,\"totalHashesGenerated\":550688.181929383,\"runningScripts\":[]}},\"hacknet-server-14\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":36,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-14\",\"httpPortOpen\":false,\"ip\":\"2.2.1.5\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":36,\"hashCapacity\":1048576,\"hashRate\":11.322103431103416,\"level\":150,\"onlineTimeSeconds\":70468.79999992362,\"totalHashesGenerated\":549876.1611584498,\"runningScripts\":[]}},\"hacknet-server-15\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":36,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-15\",\"httpPortOpen\":false,\"ip\":\"96.6.9.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":36,\"hashCapacity\":1048576,\"hashRate\":11.322103431103416,\"level\":150,\"onlineTimeSeconds\":68342.99999992555,\"totalHashesGenerated\":533507.6584865791,\"runningScripts\":[]}},\"hacknet-server-16\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":36,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-16\",\"httpPortOpen\":false,\"ip\":\"79.8.5.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":36,\"hashCapacity\":1048576,\"hashRate\":11.322103431103416,\"level\":150,\"onlineTimeSeconds\":5012.599999997632,\"totalHashesGenerated\":55944.575241951214,\"runningScripts\":[]}},\"hacknet-server-17\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":36,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-17\",\"httpPortOpen\":false,\"ip\":\"42.6.2.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":36,\"hashCapacity\":1048576,\"hashRate\":11.322103431103416,\"level\":150,\"onlineTimeSeconds\":5012.199999997632,\"totalHashesGenerated\":55897.486211469746,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":19.9421,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":15,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":7.1951,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":12844460.463872971}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":1641921.010215174}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":208.8503,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":153.27,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":330.9865,\"isBanned\":false,\"isMember\":true,\"playerReputation\":22153551.15415882}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":36.1491,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":58.8317,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":202.6734,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":36.6259,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":27.3282,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":124.0657,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":500,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false,\"EnableHistorySearch\":true}","VersionSave":"33","AllGangsSave":"{\"Slum Snakes\":{\"power\":4429.183202875017,\"territory\":0},\"Tetrads\":{\"power\":4333.68572780164,\"territory\":0},\"The Syndicate\":{\"power\":4359.339033612699,\"territory\":0},\"The Dark Army\":{\"power\":4346.42904295152,\"territory\":0},\"Speakers for the Dead\":{\"power\":13284.989407165082,\"territory\":0.8571428571428555},\"NiteSec\":{\"power\":1,\"territory\":0.1428571428571445},\"The Black Hand\":{\"power\":2503.001927606845,\"territory\":0}}","LastExportBonus":"1703860637791","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}