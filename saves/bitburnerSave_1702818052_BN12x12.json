{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":32,\"max\":32},\"skills\":{\"hacking\":553,\"strength\":228,\"defense\":228,\"dexterity\":228,\"agility\":228,\"charisma\":1,\"intelligence\":213},\"exp\":{\"hacking\":30049431.36779827,\"strength\":108374.44451790034,\"defense\":108374.44451790034,\"dexterity\":108374.44451790034,\"agility\":108374.44451790034,\"charisma\":0,\"intelligence\":411861.0055864474},\"mults\":{\"hacking_chance\":1.7805988669144166,\"hacking_speed\":1.7994325155010369,\"hacking_money\":1.6958084446803967,\"hacking_grow\":1.6958084446803967,\"hacking\":2.000502826978347,\"strength\":1.6958084446803967,\"defense\":1.6958084446803967,\"dexterity\":1.6958084446803967,\"agility\":1.6958084446803967,\"charisma\":2.408047991446163,\"hacking_exp\":1.8653892891484363,\"strength_exp\":1.8653892891484363,\"defense_exp\":1.8653892891484363,\"dexterity_exp\":1.8653892891484363,\"agility_exp\":1.8653892891484363,\"charisma_exp\":1.6363063939898563,\"company_rep\":1.4875512672635056,\"faction_rep\":1.4875512672635056,\"crime_money\":2.1123227995141782,\"crime_success\":2.1123227995141782,\"hacknet_node_money\":4.53960994230354,\"hacknet_node_purchase_cost\":0.4062713057021281,\"hacknet_node_ram_cost\":0.531073602225004,\"hacknet_node_core_cost\":0.531073602225004,\"hacknet_node_level_cost\":0.45141256189125345,\"work_money\":1.6958084446803967,\"bladeburner_max_stamina\":1.1400000000000001,\"bladeburner_stamina_gain\":1.1400000000000001,\"bladeburner_analysis\":1.1400000000000001,\"bladeburner_success_chance\":1.1400000000000001},\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":15},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":15,\"name\":\"NeuroFlux Governor\"},{\"level\":16,\"name\":\"NeuroFlux Governor\"},{\"level\":17,\"name\":\"NeuroFlux Governor\"}],\"city\":\"Sector-12\",\"bitNodeN\":12,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"NiteSec\"],\"factionInvitations\":[\"CyberSec\",\"Slum Snakes\",\"Netburners\",\"Sector-12\",\"The Black Hand\",\"The Syndicate\",\"BitRunners\"],\"hacknetNodes\":[\"hacknet-server-0\",\"hacknet-server-1\",\"hacknet-server-2\",\"hacknet-server-3\",\"hacknet-server-4\",\"hacknet-server-5\",\"hacknet-server-6\",\"hacknet-server-7\",\"hacknet-server-8\",\"hacknet-server-9\",\"hacknet-server-10\",\"hacknet-server-11\"],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":45056,\"hashes\":84.56457853774694,\"upgrades\":{\"Sell for Money\":24175,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":15,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":-43427,\"numPeopleKilled\":0,\"location\":\"Rothman University\",\"money\":3680399498.9852896,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":32813309693.065716,\"hacknet\":194234082498.25223,\"hacknet_expenses\":-52588690620.8417,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":1300493334.2138042,\"stock\":0,\"total\":3680398385.9852896,\"work\":0,\"servers\":-152978773526.7938,\"other\":-314200000,\"augmentations\":-18785822991.911324}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-37624704,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":54864147276.62587,\"hacknet\":303385485865.5635,\"hacknet_expenses\":-137464938658.8088,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":4930832611.594918,\"stock\":0,\"total\":4158894078.110552,\"work\":211549.1547309876,\"servers\":-199080056019.9128,\"other\":-942600000,\"augmentations\":-21496563842.094875}},\"playtimeSinceLastAug\":66700600,\"playtimeSinceLastBitnode\":217173400,\"lastAugReset\":1702751351601,\"lastNodeReset\":1702600878706,\"purchasedServers\":[\"neighbor-0\",\"neighbor-1\",\"neighbor-2\",\"neighbor-3\",\"neighbor-4\",\"neighbor-5\",\"neighbor-6\",\"neighbor-7\",\"neighbor-8\",\"neighbor-9\",\"neighbor-10\",\"neighbor-11\",\"neighbor-12\",\"neighbor-13\",\"neighbor-14\",\"neighbor-15\",\"neighbor-16\",\"neighbor-17\",\"neighbor-18\",\"neighbor-19\"],\"scriptProdSinceLastAug\":24794031461.92805,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":26,\"max\":26},\"skills\":{\"hacking\":1,\"strength\":168,\"defense\":168,\"dexterity\":168,\"agility\":168,\"charisma\":1,\"intelligence\":179},\"exp\":{\"hacking\":0,\"strength\":411298.93545330426,\"defense\":411298.93545330426,\"dexterity\":411298.93545330426,\"agility\":411298.93545330426,\"charisma\":0,\"intelligence\":142067.42944290765},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":0,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":169357,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":26,\"max\":26},\"skills\":{\"hacking\":1,\"strength\":168,\"defense\":168,\"dexterity\":168,\"agility\":168,\"charisma\":1,\"intelligence\":176},\"exp\":{\"hacking\":0,\"strength\":411298.93545330426,\"defense\":411298.93545330426,\"dexterity\":411298.93545330426,\"agility\":411298.93545330426,\"charisma\":0,\"intelligence\":128719.45344066303},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":0,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":169357,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":26,\"max\":26},\"skills\":{\"hacking\":1,\"strength\":168,\"defense\":168,\"dexterity\":168,\"agility\":168,\"charisma\":1,\"intelligence\":176},\"exp\":{\"hacking\":0,\"strength\":411298.93545330426,\"defense\":411298.93545330426,\"dexterity\":411298.93545330426,\"agility\":411298.93545330426,\"charisma\":0,\"intelligence\":128682.05988337383},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":0,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":169357,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":26,\"max\":26},\"skills\":{\"hacking\":1,\"strength\":168,\"defense\":168,\"dexterity\":168,\"agility\":168,\"charisma\":1,\"intelligence\":176},\"exp\":{\"hacking\":0,\"strength\":411298.93545330426,\"defense\":411298.93545330426,\"dexterity\":411298.93545330426,\"agility\":411298.93545330426,\"charisma\":0,\"intelligence\":128682.83139255909},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":0,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":169357,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":26,\"max\":26},\"skills\":{\"hacking\":1,\"strength\":168,\"defense\":168,\"dexterity\":168,\"agility\":168,\"charisma\":1,\"intelligence\":173},\"exp\":{\"hacking\":0,\"strength\":411298.9267089592,\"defense\":411298.9267089592,\"dexterity\":411298.9267089592,\"agility\":411298.9267089592,\"charisma\":0,\"intelligence\":117729.12392306191},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":0,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":169357,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":26,\"max\":26},\"skills\":{\"hacking\":1,\"strength\":168,\"defense\":168,\"dexterity\":168,\"agility\":168,\"charisma\":1,\"intelligence\":173},\"exp\":{\"hacking\":0,\"strength\":411298.9267089592,\"defense\":411298.9267089592,\"dexterity\":411298.9267089592,\"agility\":411298.9267089592,\"charisma\":0,\"intelligence\":117862.62575957252},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":0,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":169357,\"sync\":100}}],\"sleevesFromCovenant\":3,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,3],[2,3],[3,3],[4,3],[5,3],[10,3],[9,3],[12,11],[6,3],[7,3]]},\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1662043985194},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1662055145998},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1662059766003},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1662066426141},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1662123294982},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1662473253800},{\"ID\":\"NITESEC\",\"unlockedOn\":1662586146115},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1662599826142},{\"ID\":\"DONATION\",\"unlockedOn\":1663589558449},{\"ID\":\"NS2\",\"unlockedOn\":1664451835859},{\"ID\":\"FROZE\",\"unlockedOn\":1664473094691},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1664552329001},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1664798852132},{\"ID\":\"TOR\",\"unlockedOn\":1665066056909},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1665074458530},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1665081718922},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1665334933764},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1665766590313},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1665837400497},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1665874707261},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1665939874779},{\"ID\":\"WORKOUT\",\"unlockedOn\":1665946235177},{\"ID\":\"TRAVEL\",\"unlockedOn\":1666024890747},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1666127536448},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1666177601953},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1666201654675},{\"ID\":\"SF1.1\",\"unlockedOn\":1666396556449},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1668533490192},{\"ID\":\"GANG\",\"unlockedOn\":1668867250197},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1668954907599},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1668955027612},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1669208876810},{\"ID\":\"SF2.1\",\"unlockedOn\":1669423716199},{\"ID\":\"CORPORATION\",\"unlockedOn\":1669431816190},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1671198038341},{\"ID\":\"SF3.1\",\"unlockedOn\":1671300458277},{\"ID\":\"CHALLENGE_BN1\",\"unlockedOn\":1671822590337},{\"ID\":\"SF4.1\",\"unlockedOn\":1674137591582},{\"ID\":\"SF5.1\",\"unlockedOn\":1675551633160},{\"ID\":\"N00DLES\",\"unlockedOn\":1677761263550},{\"ID\":\"SF10.1\",\"unlockedOn\":1680550899708},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1683499237184},{\"ID\":\"KARMA_1000000\",\"unlockedOn\":1683585524648},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1686441026190},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1686518683455},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1686519223506},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1688038167678},{\"ID\":\"ALL_HACKNET_SERVER\",\"unlockedOn\":1688038167687},{\"ID\":\"MAX_HACKNET_SERVER\",\"unlockedOn\":1688038167689},{\"ID\":\"SF9.1\",\"unlockedOn\":1688302024803},{\"ID\":\"NEUROFLUX_255\",\"unlockedOn\":1689366941906},{\"ID\":\"FAST_BN\",\"unlockedOn\":1689431425450},{\"ID\":\"SF12.1\",\"unlockedOn\":1689714316805},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1696862815306},{\"ID\":\"SF6.1\",\"unlockedOn\":1697665718942},{\"ID\":\"SF7.1\",\"unlockedOn\":1699191969386},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1701305531389}],\"terminalCommandHistory\":[\"run bootstrap.js \",\"home\",\"run list-player-karma.js \",\"home\",\"run list-player-karma.js \",\"run fetch-scripts.js \",\"top\",\"run buy-servers.js \",\"top\",\"run delete-servers.js \",\"run buy-servers.js \",\"nano buy-servers.js \",\"run fetch-scripts.js \",\"nano buy-servers.js \",\"run buy-servers.js \",\"run fetch-scripts.js \",\"nano buy-servers.js \",\"run buy-servers.js \",\"run fetch-scripts.js \",\"run bootstrap.js \",\"nano buy-hacknet-server.js\",\"nano buy-hacknet-server.js fetch-scripts.js \",\"mv buy-hacknet-server.js buy-hacknet-servers.js\",\"nano buy-hacknet-servers.js buy-hacknet-nodes.js \",\"rm buy-hacknet-nodes.js \",\"nano bootstrap.js fetch-scripts.js buy-hacknet-servers.js \",\"run bootstrap.js \",\"home ; nano spend-hashes.js \",\"run spend-hashes.js \",\"nano bootstrap.js fetch-scripts.js spend-hashes.js \",\"run fetch-scripts.js \",\"connect The-Cave \",\"scan\",\"home\",\"run bootstrap.js \",\"connect The-Cave \",\"connect w0r1d_d43m0n \",\"analyze \",\"hack\",\"run bootstrap.js \",\"run fetch-scripts.js \",\"cat bootstrap.js \",\"nano spend-hashes.js buy-hacknet-servers.js buy-servers.js \",\"run bootstrap.js \",\"run fetch-scripts.js \",\"nano bootstrap.js \",\"run bootstrap.js \",\"nano spend-hashes.js \",\"run bootstrap.js \",\"nano spend-hashes.js \"],\"lastUpdate\":1702818052366,\"lastSave\":1702818047367,\"totalPlaytime\":40774437800,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":304280,\"factionWorkType\":\"hacking\",\"factionName\":\"NiteSec\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"10c510f1398e51\",\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"Bladeburners\",\"Shadows of Anarchy\"]}}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"5.0.5.9\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"launch-hacking.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork, buildPath } from \\\"./scan.js\\\";\\nimport { buildHackingProgramList, countAvailablePrograms } from \\\"./hacking-programs.js\\\";\\n\\n/** @param {NS} ns */\\nasync function openPorts(ns, hackingPrograms, target) {\\n\\tfor (const program of hackingPrograms) {\\n\\t\\tif (ns.fileExists(program.executableName, \\\"home\\\")) {\\n\\t\\t\\tconst executable = program['functionName'].bind(ns);\\n\\t\\t\\tawait executable(target);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction launchScript(ns, script, server) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\tconst scriptNumThreads = ~~(availableRam / scriptRam);\\n\\n\\tif (scriptNumThreads > 0) {\\n\\t\\tns.exec(script, server, scriptNumThreads);\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tconst replace = false;  // Replace an existing script\\n\\n\\twhile (true) {\\n\\t\\tconst fullServerList = scanAllNetwork(ns, 'home');\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tfor (const server of filteredServerList) {\\n\\t\\t\\tns.print(`Current server: ${server}`);\\n\\n\\t\\t\\tconst playerHackingLevel = ns.getHackingLevel();\\n\\t\\t\\tconst hackingPrograms = buildHackingProgramList(ns);\\n\\t\\t\\tconst numberAvailablePrograms = countAvailablePrograms(ns, hackingPrograms);\\n\\n\\t\\t\\t// Check server level vs player level\\n\\t\\t\\tconst machineHackingLevel = ns.getServerRequiredHackingLevel(server);\\n\\t\\t\\tns.print(`Level player: ${playerHackingLevel}, level machine: ${machineHackingLevel}`);\\n\\n\\t\\t\\t// Check number of ports required vs number of programs available\\n\\t\\t\\tconst requiredNumberOfPorts = ns.getServerNumPortsRequired(server);\\n\\t\\t\\tns.print(`Required num ports: ${requiredNumberOfPorts}, number available programs: ${numberAvailablePrograms}`);\\n\\n\\t\\t\\tif (playerHackingLevel < machineHackingLevel) {\\n\\t\\t\\t\\tns.print('----------\\\\n');\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (numberAvailablePrograms < requiredNumberOfPorts) {\\n\\t\\t\\t\\tns.print('----------\\\\n');\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!ns.hasRootAccess(server)) {\\n\\t\\t\\t\\tawait openPorts(ns, hackingPrograms, server);\\n\\t\\t\\t\\tns.nuke(server);\\n\\n\\t\\t\\t\\tif (server == 'w0r1d_d43m0n') {\\n\\t\\t\\t\\t\\tns.tprint('w0r1d_d43m0n is now root-accessible');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.print(`hasRootAccess: ${ns.hasRootAccess(server)}`);\\n\\n\\t\\t\\tconst isBackdoorInstalled = ns.getServer(server).backdoorInstalled;\\n\\t\\t\\tns.print(`isBackdoorInstalled: ${isBackdoorInstalled}`);\\n\\t\\t\\tif (ns.hasRootAccess(server) && !isBackdoorInstalled && server != 'w0r1d_d43m0n') {\\n\\t\\t\\t\\tconst path = await buildPath(ns, server);\\n\\t\\t\\t\\tfor (let item of path) {\\n\\t\\t\\t\\t\\t// ns.print(`Connecting to ${item} from ${ns.singularity.getCurrentServer()}`);\\n\\t\\t\\t\\t\\tif (!ns.singularity.connect(item)) {\\n\\t\\t\\t\\t\\t\\tns.print(`Error while connecting to ${item}`);\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tns.print('Installing backdoor');\\n\\t\\t\\t\\tawait ns.singularity.installBackdoor();\\n\\t\\t\\t\\tns.print('Backdoor installed');\\n\\n\\t\\t\\t\\tfor (let item of path.reverse()) {\\n\\t\\t\\t\\t\\tif (!ns.singularity.connect(item)) {\\n\\t\\t\\t\\t\\t\\tns.print(`Error while connecting to ${item}`);\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (replace) {\\n\\t\\t\\t\\tns.killall(server);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (replace || !ns.fileExists('hack-server.js', server)) {\\n\\t\\t\\t\\tconst scpStatus = ns.scp('hack-server.js', server, 'home');\\n\\t\\t\\t\\tif (!scpStatus) {\\n\\t\\t\\t\\t\\tns.print(`Failed to copy hack-server.js on ${server}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!ns.isRunning('hack-server.js', server)) {\\n\\t\\t\\t\\tlaunchScript(ns, 'hack-server.js', server);\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.print('----------\\\\n');\\n\\t\\t}\\n\\n\\t\\tif (replace) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000 * 5);\\n\\t}\\n}\\n\",\"filename\":\"launch-hacking.js\",\"server\":\"home\"}}],[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"home\"}}],[\"list-server-prices.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tfor (let i = 2; i < 21; i++) {\\n\\t\\tconst serverRam = Math.pow(2.0, i);\\n\\t\\tconst serverCost = ns.getPurchasedServerCost(serverRam);\\n\\t\\tns.tprint(`Server ram: ${serverRam}`);\\n\\t\\tns.tprint(`Server cost: ${formatNumber(serverCost)}\\\\$`);\\n\\t\\tns.tprint(\\\"\\\\n\\\");\\n\\t}\\n}\\n\",\"filename\":\"list-server-prices.js\",\"server\":\"home\"}}],[\"scan.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport function scanAllNetwork(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nexport async function buildPath(ns, server) {\\n\\tlet pathList = [['home']];\\n\\n\\twhile (true) {\\n\\t\\tconst currentPath = pathList.pop();\\n\\t\\tconst lastItem = currentPath.pop();\\n\\t\\tconst neighbors = ns.scan(lastItem);\\n\\t\\tconst neighborsWithoutServers = neighbors.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-') && !currentPath.includes(name));\\n\\n\\t\\tfor (let neighbor of neighborsWithoutServers) {\\n\\t\\t\\tlet newPath = currentPath.slice();\\n\\t\\t\\tnewPath.push(lastItem);\\n\\t\\t\\tnewPath.push(neighbor);\\n\\n\\t\\t\\tif (neighbor == server) {\\n\\t\\t\\t\\treturn newPath;\\n\\t\\t\\t}\\n\\n\\t\\t\\tpathList.unshift(newPath);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(250);  // Just so that the editor does not complain...\\n\\t}\\n}\\n\",\"filename\":\"scan.js\",\"server\":\"home\"}}],[\"buy-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan\\\";\\n\\nfunction generateUUID() {\\n\\t// https://stackoverflow.com/questions/105034/how-do-i-create-a-guid-uuid\\n\\t// crypto.randomUUID();\\n\\t// crypto.getRandomValues();\\n}\\n\\n/** @param {NS} ns */\\nfunction launchScript(ns, scriptName, server) {\\n\\tconst scpStatus = ns.scp(scriptName, server, 'home');\\n\\tif (!scpStatus) {\\n\\t\\tns.print('Failed to copy ' + scriptName + ' on ' + server);\\n\\t}\\n\\n\\tns.killall(server);\\n\\n\\tconst maxRam = ns.getServerMaxRam(server);\\n\\tconst usedRam = ns.getServerUsedRam(server);\\n\\tconst availableRam = maxRam - usedRam;\\n\\tconst scriptRam = ns.getScriptRam(scriptName, server);\\n\\tconst numThreads = Math.floor(availableRam / scriptRam);\\n\\tif (numThreads > 0) {\\n\\t\\tif (ns.exec(scriptName, server, numThreads) == 0) {\\n\\t\\t\\tns.print('Error launching script');\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst BUYING_DELAY = 250;\\n\\tconst UPGRADING_DELAY = 5 * 1000;\\n\\tconst FOLLOWING_BATCH_DELAY = 1000 * 60 * 5;\\n\\tconst HOME_SERVER = 'home';\\n\\n\\tlet targetRam = 4;\\n\\twhile (targetRam <= ns.getPurchasedServerMaxRam()) {\\n\\t\\tconst maxNumberOfServers = ns.getPurchasedServerLimit();\\n\\t\\tconst availableMoney = ns.getServerMoneyAvailable('home');\\n\\t\\tconst serverCost = ns.getPurchasedServerCost(targetRam);\\n\\n\\t\\tif (availableMoney < maxNumberOfServers * serverCost) {\\n\\t\\t\\ttargetRam /= 2;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\ttargetRam *= 2;\\n\\t}\\n\\n\\tif (targetRam < 8) {\\n\\t\\ttargetRam = 8;\\n\\t}\\n\\n\\tns.print(`Starting target ram: ${targetRam}`);\\n\\n\\t// Purchase missing servers\\n\\twhile (true) {\\n\\t\\t// List current servers\\n\\t\\tconst serverList = scanAllNetwork(ns);\\n\\t\\tlet purchasedServers = serverList.filter(name => name.startsWith('neighbor-'));\\n\\n\\t\\t// Stopping criteria\\n\\t\\tif (purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// If limit is not reached, buy server at current targetRam\\n\\t\\tif (ns.getPurchasedServerCost(targetRam) < ns.getServerMoneyAvailable(HOME_SERVER)) {\\n\\t\\t\\tconst name = `neighbor-${purchasedServers.length}`;\\n\\t\\t\\tns.print(`Purchasing server ${name}`);\\n\\t\\t\\tns.purchaseServer(name, targetRam);\\n\\t\\t\\tpurchasedServers.push(name);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(BUYING_DELAY);\\n\\t}\\n\\n\\tconst purchasedServers = scanAllNetwork(ns).filter(name => name.startsWith('neighbor-'));\\n\\tns.print(`Purchased servers: ${purchasedServers}`);\\n\\n\\ttargetRam *= 2;\\n\\twhile (true) {\\n\\t\\t// Stopping criteria\\n\\t\\tlet countServerWithTargetRam = 0;\\n\\t\\tfor (const purchasedServer of purchasedServers) {\\n\\t\\t\\tconst purchasedServerRam = ns.getServer(purchasedServer).maxRam;\\n\\t\\t\\tif (purchasedServerRam >= targetRam) {\\n\\t\\t\\t\\tcountServerWithTargetRam++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tns.print(`Number of servers at target (target: ${ns.formatRam(targetRam)} / max: ${ns.formatRam(ns.getPurchasedServerMaxRam())}): ${countServerWithTargetRam} vs ${ns.getPurchasedServerLimit()}`);\\n\\t\\tif (countServerWithTargetRam == ns.getPurchasedServerLimit()) {\\n\\t\\t\\tif (targetRam >= ns.getPurchasedServerMaxRam()) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\ttargetRam *= 2;\\n\\n\\t\\t\\tawait ns.sleep(FOLLOWING_BATCH_DELAY);\\n\\t\\t}\\n\\n\\t\\tfor (const purchasedServer of purchasedServers) {\\n\\t\\t\\tconst purchasedServerRam = ns.getServer(purchasedServer).maxRam;\\n\\t\\t\\tif (purchasedServerRam < targetRam) {\\n\\t\\t\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable('home');\\n\\t\\t\\t\\tconst upgradeCost = ns.getPurchasedServerUpgradeCost(purchasedServer, targetRam);\\n\\t\\t\\t\\tif (upgradeCost < moneyAvailable) {\\n\\t\\t\\t\\t\\tif (ns.upgradePurchasedServer(purchasedServer, targetRam)) {\\n\\t\\t\\t\\t\\t\\tns.print(`Upgraded ${purchasedServer} to ${targetRam}Gb with cost of ${ns.formatNumber(upgradeCost)}\\\\$`);\\n\\t\\t\\t\\t\\t\\tlaunchScript(ns, 'hack-remote.js', purchasedServer);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tns.print(`Error while upgrading purchased server ${purchasedServer} to ${targetRam}Gb`);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(UPGRADING_DELAY);\\n\\t}\\n}\\n\",\"filename\":\"buy-servers.js\",\"server\":\"home\"}}],[\"delete-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst fullServerList = scanAllNetwork(ns);\\n\\tconst serverList = fullServerList.filter(name => name.startsWith('neighbor-'));\\n\\n\\tfor (const server of serverList) {\\n\\t\\tns.tprint('Deleting: ' + server);\\n\\t\\tns.killall(server);\\n\\t\\tns.deleteServer(server);\\n\\t}\\n}\\n\",\"filename\":\"delete-servers.js\",\"server\":\"home\"}}],[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"home\"}}],[\"list-server-money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst fullServerList = scanAllNetwork(ns);\\n\\tconst serverList = fullServerList.filter(name => !name.startsWith('neighbor-'));\\n\\n\\tfor (let server of serverList) {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(server);\\n\\t\\tconst maxMoneyAvailable = ns.getServerMaxMoney(server);\\n\\n\\t\\tns.tprint(`Server: ${server} --> ${ns.formatNumber(moneyAvailable)}\\\\$ / ${ns.formatNumber(maxMoneyAvailable)}\\\\$`);\\n\\t}\\n}\\n\",\"filename\":\"list-server-money.js\",\"server\":\"home\"}}],[\"fetch-scripts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    if (ns.getHostname() !== \\\"home\\\") {\\n        throw new Exception(\\\"Run the script from home\\\");\\n    }\\n\\n    const scripts = [\\n        'bootstrap.js',\\n        'buy-darkweb-programs.js',\\n        'buy-hacknet-servers.js',\\n        'buy-servers.js',\\n        'delete-servers.js',\\n        'fetch-scripts.js',\\n        'hack-remote.js',\\n        'hack-server.js',\\n        'hacking-programs.js',\\n        'launch-hacking.js',\\n        'list-player-karma.js',\\n        'list-server-money.js',\\n        'list-server-prices.js',\\n        'list-server-security-level.js',\\n        'manage-bladeburner.js',\\n        'manage-corporation.js',\\n        'manage-gang.js',\\n        'manage-sleeves.js',\\n        'scan.js',\\n        'spend-hashes.js'\\n    ];\\n\\n    for (const scriptName of scripts) {\\n        ns.tprint(`Fetching: ${scriptName}`);\\n        await ns.wget(\\n            `https://raw.githubusercontent.com/antoinedube/bitburner-scripts/main/scripts/${scriptName}`,\\n            `${scriptName}`\\n        );\\n\\n        await ns.sleep(250);\\n    }\\n}\\n\",\"filename\":\"fetch-scripts.js\",\"server\":\"home\"}}],[\"list-player-karma.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst karma = ns.heart.break();\\n\\tns.tprint(`karma: ${karma.toFixed(2)}`);\\n}\\n\",\"filename\":\"list-player-karma.js\",\"server\":\"home\"}}],[\"list-server-security-level.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst fullServerList = scanAllNetwork(ns);\\n\\tconst serverList = fullServerList.filter(name => !name.startsWith('neighbor-'));\\n\\n\\tfor (let server of serverList) {\\n\\t\\tconst currentSecurityLevel = ns.getServerSecurityLevel(server);\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(server)\\n\\n\\t\\tns.tprint(`Server: ${server} --> ${ns.formatNumber(currentSecurityLevel)} / ${ns.formatNumber(minSecurityLevel)}`);\\n\\t}\\n}\\n\",\"filename\":\"list-server-security-level.js\",\"server\":\"home\"}}],[\"bootstrap.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const scripts = [\\n        'launch-hacking.js',\\n        'spend-hashes.js',\\n        'buy-hacknet-servers.js',\\n        'buy-servers.js',\\n        'manage-sleeves.js',\\n        'manage-gang.js',\\n        'buy-darkweb-programs.js',\\n        /* 'manage-bladeburner.js' */\\n    ];\\n\\n    if (ns.isRunning('hack-remote.js')) {\\n        ns.kill('hack-remote.js', 'home');\\n    }\\n\\n    for (let script of scripts) {\\n        if (!ns.isRunning(script)) {\\n            ns.tprint(`Launching script: ${script}`);\\n            ns.run(script);\\n\\n            await ns.sleep(250);\\n        }\\n    }\\n\\n    await ns.sleep(2 * 1000);\\n\\n    const hackingScript = 'hack-remote.js';\\n    const scriptRam = ns.getScriptRam(hackingScript);\\n    const serverMaxRam = ns.getServerMaxRam('home');\\n    const serverUsedRam = ns.getServerUsedRam('home');\\n    const availableRam = serverMaxRam - serverUsedRam;\\n    const scriptNumThreads = ~~(availableRam / scriptRam);\\n\\n    if (scriptNumThreads > 0) {\\n        ns.tprint(`Launching script: ${hackingScript} with ${scriptNumThreads} threads`);\\n        ns.exec(hackingScript, 'home', scriptNumThreads);\\n    }\\n\\n    if (!ns.bladeburner.inBladeburner()) {\\n        ns.singularity.universityCourse('Rothman University', 'Computer Science');\\n    }\\n}\\n\",\"filename\":\"bootstrap.js\",\"server\":\"home\"}}],[\"manage-gang.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction displayMembersInformation(ns, memberName) {\\n\\tconst memberInfo = ns.gang.getMemberInformation(memberName);\\n\\tconst hackingLevel = memberInfo['hack'];\\n\\tconst currentTask = memberInfo['task'];\\n\\tns.print(`Member: ${memberName}\\\\thacking level: ${hackingLevel}\\\\ttask: ${currentTask}`);\\n}\\n\\n/** @param {NS} ns */\\nfunction assignMember(ns, name, task = '') {\\n\\tconst memberInfo = ns.gang.getMemberInformation(name);\\n\\tconst hackingLevel = memberInfo['hack'];\\n\\tconst currentTask = memberInfo['task'];\\n\\n\\t/*\\n\\tTask names:\\n\\t\\t\\t- Unassigned\\n\\t\\t\\t- Ransomware\\n\\t\\t\\t- Phishing\\n\\t\\t\\t- Identity Theft\\n\\t\\t\\t- DDoS Attacks\\n\\t\\t\\t- Plant Virus\\n\\t\\t\\t- Fraud & Counterfeiting,\\n\\t\\t\\t- Money Laundering\\n\\t\\t\\t- Cyberterrorism\\n\\t\\t\\t- Ethical Hacking\\n\\t\\t\\t- Vigilante Justice\\n\\t\\t\\t- Train Combat\\n\\t\\t\\t- Train Hacking\\n\\t\\t\\t- Train Charisma\\n\\t\\t\\t- Territory Warfare\\n\\t*/\\n\\tif (task != '') {\\n\\t\\tif (currentTask != task) {\\n\\t\\t\\tns.gang.setMemberTask(name, task);\\n\\t\\t}\\n\\t} else if (hackingLevel < 120) {\\n\\t\\tif (currentTask != 'Cyberterrorism') {\\n\\t\\t\\tns.gang.setMemberTask(name, 'Cyberterrorism');\\n\\t\\t}\\n\\t} else {\\n\\t\\tif (currentTask != 'Money Laundering') {\\n\\t\\t\\tns.gang.setMemberTask(name, 'Money Laundering');\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction recruitIfPossible(ns) {\\n\\tif (!ns.gang.canRecruitMember()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst gangMembers = ns.gang.getMemberNames();\\n\\tconst newGangMemberName = `audrey-${gangMembers.length + 1}`;\\n\\tns.gang.recruitMember(newGangMemberName);\\n\\tassignMember(ns, newGangMemberName);\\n}\\n\\n/** @param {NS} ns */\\nfunction reassignMembersAccordingToWantedLevelPenalty(ns) {\\n\\tconst gangInformation = ns.gang.getGangInformation();\\n\\t/*\\n\\tGang information structure:\\n\\t{\\n\\t\\t\\t\\\"faction\\\":\\\"NiteSec\\\",\\n\\t\\t\\t\\\"isHacking\\\":true,\\n\\t\\t\\t\\\"moneyGainRate\\\":213.18959642323077,\\n\\t\\t\\t\\\"power\\\":1,\\n\\t\\t\\t\\\"respect\\\":846.631799960249,\\n\\t\\t\\t\\\"respectGainRate\\\":0,\\n\\t\\t\\t\\\"territory\\\":0.14285714285714293,\\n\\t\\t\\t\\\"territoryClashChance\\\":0,\\n\\t\\t\\t\\\"territoryWarfareEngaged\\\":false,\\n\\t\\t\\t\\\"wantedLevel\\\":310.2473419438491,\\n\\t\\t\\t\\\"wantedLevelGainRate\\\":-0.025302857142857158,\\n\\t\\t\\t\\\"wantedPenalty\\\":0.7318238952487159\\n\\t}\\n\\t*/\\n\\n\\tconst wantedLevelPenalty = 1.0 - gangInformation['wantedPenalty'];\\n\\tconst gangRespect = gangInformation['respect'];\\n\\tif (wantedLevelPenalty > 0.25 && gangRespect > 50) {\\n\\t\\tns.gang.getMemberNames().map(memberName => {\\n\\t\\t\\tassignMember(ns, memberName, 'Ethical Hacking');\\n\\t\\t});\\n\\t} else {\\n\\t\\tns.gang.getMemberNames().map(memberName => {\\n\\t\\t\\tassignMember(ns, memberName);\\n\\t\\t});\\n\\t}\\n}\\n\\nfunction ascendIfGainIsWorth(ns) {\\n\\tns.gang.getMemberNames().map(memberName => {\\n\\t\\tconst results = ns.gang.getAscensionResult(memberName);\\n\\n\\t\\tif (results === undefined) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst hackingMultWithAscension = results['hack'];\\n\\n\\t\\tif (hackingMultWithAscension > 2.0) {\\n\\t\\t\\tns.gang.ascendMember(memberName);\\n\\t\\t\\tassignMember(ns, memberName);\\n\\t\\t}\\n\\t});\\n}\\n\\nfunction buyEquipment(ns) {\\n\\t/*\\n\\t\\t\\t[\\n\\t\\t\\t\\t\\t\\\"Baseball Bat\\\",\\n\\t\\t\\t\\t\\t\\\"Katana\\\",\\n\\t\\t\\t\\t\\t\\\"Glock 18C\\\",\\n\\t\\t\\t\\t\\t\\\"P90C\\\",\\n\\t\\t\\t\\t\\t\\\"Steyr AUG\\\",\\n\\t\\t\\t\\t\\t\\\"AK-47\\\",\\n\\t\\t\\t\\t\\t\\\"M15A10 Assault Rifle\\\",\\n\\t\\t\\t\\t\\t\\\"AWM Sniper Rifle\\\",\\n\\t\\t\\t\\t\\t\\\"Bulletproof Vest\\\",\\n\\t\\t\\t\\t\\t\\\"Full Body Armor\\\",\\n\\t\\t\\t\\t\\t\\\"Liquid Body Armor\\\",\\n\\t\\t\\t\\t\\t\\\"Graphene Plating Armor\\\",\\n\\t\\t\\t\\t\\t\\\"Ford Flex V20\\\",\\n\\t\\t\\t\\t\\t\\\"ATX1070 Superbike\\\",\\n\\t\\t\\t\\t\\t\\\"Mercedes-Benz S9001\\\",\\n\\t\\t\\t\\t\\t\\\"White Ferrari\\\",\\n\\t\\t\\t\\t\\t\\\"NUKE Rootkit\\\",\\n\\t\\t\\t\\t\\t\\\"Soulstealer Rootkit\\\",\\n\\t\\t\\t\\t\\t\\\"Demon Rootkit\\\",\\n\\t\\t\\t\\t\\t\\\"Hmap Node\\\",\\n\\t\\t\\t\\t\\t\\\"Jack the Ripper\\\",\\n\\t\\t\\t\\t\\t\\\"Bionic Arms\\\",\\n\\t\\t\\t\\t\\t\\\"Bionic Legs\\\",\\n\\t\\t\\t\\t\\t\\\"Bionic Spine\\\",\\n\\t\\t\\t\\t\\t\\\"BrachiBlades\\\",\\n\\t\\t\\t\\t\\t\\\"Nanofiber Weave\\\",\\n\\t\\t\\t\\t\\t\\\"Synthetic Heart\\\",\\n\\t\\t\\t\\t\\t\\\"Synfibril Muscle\\\",\\n\\t\\t\\t\\t\\t\\\"BitWire\\\",\\n\\t\\t\\t\\t\\t\\\"Neuralstimulator\\\",\\n\\t\\t\\t\\t\\t\\\"DataJack\\\",\\n\\t\\t\\t\\t\\t\\\"Graphene Bone Lacings\\\"\\n\\t\\t\\t\\t\\t]\\n\\t*/\\n\\tconst hackingUpgrades = ['NUKE Rootkit', 'Soulstealer Rootkit', 'Demon Rootkit', 'Hmap Node', 'Jack the Ripper'];\\n\\tconst hackingAugmentations = ['BitWire', 'Neuralstimulator', 'DataJack'];\\n\\n\\tns.gang.getMemberNames().map(memberName => {\\n\\t\\tconst memberInfo = ns.gang.getMemberInformation(memberName);\\n\\t\\tconst memberHackingUpgrade = memberInfo['upgrades'];\\n\\t\\tconst memberHackingAugmentations = memberInfo['augmentations'];\\n\\n\\t\\thackingUpgrades.map(upgrade => {\\n\\t\\t\\tif (!memberHackingUpgrade.includes(upgrade) && ns.gang.getEquipmentCost(upgrade) < ns.getServerMoneyAvailable('home')) {\\n\\t\\t\\t\\tns.gang.purchaseEquipment(memberName, upgrade);\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\thackingAugmentations.map(augmentation => {\\n\\t\\t\\tif (!memberHackingAugmentations.includes(augmentation) && ns.gang.getEquipmentCost(augmentation) < ns.getServerMoneyAvailable('home')) {\\n\\t\\t\\t\\tns.gang.purchaseEquipment(memberName, augmentation);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t});\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tlet counter = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!ns.gang.inGang()) {\\n\\t\\t\\tns.print(`Not in gang. Waiting.`);\\n\\t\\t\\tawait ns.sleep(1000 * 60);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.gang.getMemberNames().map(memberName => displayMembersInformation(ns, memberName));\\n\\n\\t\\trecruitIfPossible(ns);\\n\\t\\tascendIfGainIsWorth(ns);\\n\\t\\treassignMembersAccordingToWantedLevelPenalty(ns);\\n\\t\\tbuyEquipment(ns);\\n\\n\\t\\tif (counter >= 25) {\\n\\t\\t\\tns.gang.getMemberNames().map(memberName => assignMember(ns, memberName));\\n\\t\\t\\tcounter = 0;\\n\\t\\t} else if (counter >= 23) {\\n\\t\\t\\tns.gang.getMemberNames().map(memberName => assignMember(ns, memberName, 'Ethical Hacking'));\\n\\t\\t}\\n\\n\\t\\tcounter++;\\n\\t\\tawait ns.sleep(1000 * 30);\\n\\t}\\n}\\n\",\"filename\":\"manage-gang.js\",\"server\":\"home\"}}],[\"manage-sleeves.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nasync function setSleevesTask(ns) {\\n\\tfor (var i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\tconst sleeve = ns.sleeve.getSleeve(i);\\n\\t\\tns.print(`Sleeve ${i} has:`);\\n\\t\\tns.print(`- sync=${sleeve.sync}`);\\n\\t\\tns.print(`- shock=${sleeve.shock}`);\\n\\t\\tns.print(`--------------------------------------------`);\\n\\n\\t\\tif (sleeve.sync < 100) {\\n\\t\\t\\tns.print('Synchronize');\\n\\t\\t\\tns.sleeve.setToSynchronize(i);\\n\\t\\t} else if (sleeve.shock > 0) {\\n\\t\\t\\tns.print('Shock recovery');\\n\\t\\t\\tns.sleeve.setToShockRecovery(i);\\n\\t\\t} else {\\n\\t\\t\\tns.print('Manual task');\\n\\t\\t\\t// Ref: https://github.com/danielyxie/bitburner/blob/dev/src/Enums.ts\\n\\t\\t\\t// ns.sleeve.setToCommitCrime(i, 'Assassination');\\n\\t\\t\\t// ns.sleeve.setToCommitCrime(i, 'Heist');\\n\\t\\t\\tns.sleeve.setToCommitCrime(i, 'Mug');\\n\\t\\t\\t// ns.sleeve.setToCommitCrime(i, 'Homicide');\\n\\t\\t\\t// ns.sleeve.setToUniversityCourse(i, 'Rothman University', 'Computer Science');\\n\\t\\t\\t// ns.sleeve.setToUniversityCourse(i, 'Rothman University', 'Algorithms');\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\n\\twhile (true) {\\n\\t\\tawait setSleevesTask(ns);\\n\\n\\t\\tawait ns.sleep(1000 * 15);\\n\\t}\\n}\\n\",\"filename\":\"manage-sleeves.js\",\"server\":\"home\"}}],[\"spend-hashes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nasync function spendHashesOnAction(ns, action, target, amount) {\\n\\twhile (ns.hacknet.numHashes() < ns.hacknet.hashCost(action, amount)) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\n\\tif (!ns.hacknet.spendHashes(action, target, amount)) {\\n\\t\\tns.print(`Error while executing ${action} on ${target} with n=${amount}`);\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction selectRandomServer(ns) {\\n\\tconst serversToAvoid = ['CSEC', 'I.I.I.I', 'run4theh111z', 'avmnite-02h', 'The-Cave', 'w0r1d_d43m0n'];\\n\\n\\tconst fullServerList = scanAllNetwork(ns, 'home');\\n\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-') && !serversToAvoid.includes(name));\\n\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\treturn filteredServerList[serverIndex];\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\t/*\\n\\t\\t\\t\\t\\tconst upgrades = ns.hacknet.getHashUpgrades();\\n\\n\\t\\t\\t\\t\\t[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Sell for Money\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Sell for Corporation Funds\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Reduce Minimum Security\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Increase Maximum Money\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Improve Studying\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Improve Gym Training\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Exchange for Corporation Research\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Exchange for Bladeburner Rank\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Exchange for Bladeburner SP\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Generate Coding Contract\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Company Favor\\\"\\n\\t\\t\\t\\t\\t]\\n\\t*/\\n\\n\\tconst ten_trillions = 10 * 1000 * 1000 * 1000 * 1000;  // k -> m -> g -> t\\n\\tconst low_high_hack_exp_limit = 1500;\\n\\n\\tfor (let i = 0; i < 5; i++) {\\n\\t\\tns.print(`--> Improve studying ${i+1} of 5`);\\n\\t\\tawait spendHashesOnAction(ns, 'Improve Studying', 'home', 1);\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst r = Math.random();\\n\\t\\tif (r < 0.1) {\\n\\t\\t\\tconst target = selectRandomServer(ns);\\n\\t\\t\\tconst minLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\t\\tif (minLevel > 1.0 && ns.getHackingLevel() > low_high_hack_exp_limit) {\\n\\t\\t\\t\\tawait spendHashesOnAction(ns, \\\"Reduce Minimum Security\\\", target, 1);\\n\\t\\t\\t\\tconst minLevelAfter = ns.getServerMinSecurityLevel(target);\\n\\t\\t\\t\\tns.print(`Reduced minimum security level on ${target} from ${minLevel} to ${minLevelAfter}`);\\n\\t\\t\\t}\\n\\t\\t} else if (r < 0.2) {\\n\\t\\t\\tconst target = selectRandomServer(ns);\\n\\t\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\t\\tif (maxMoney < ten_trillions && ns.getHackingLevel() > low_high_hack_exp_limit) {\\n\\t\\t\\t\\tawait spendHashesOnAction(ns, \\\"Increase Maximum Money\\\", target, 1);\\n\\t\\t\\t\\tconst maxMoneyAfter = ns.getServerMaxMoney(target);\\n\\t\\t\\t\\tns.print(`Increased maximum money on ${target} from ${ns.formatNumber(maxMoney)}\\\\$ to ${ns.formatNumber(maxMoneyAfter)}\\\\$`);\\n\\t\\t\\t}\\n\\t\\t\\t/*\\n\\t\\t\\t} else if (r < 0.3) {\\n\\t\\t\\t\\t\\t\\t\\tif (ns.bladeburner.inBladeburner()) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait spendHashesOnAction(ns, 'Exchange for Bladeburner Rank', 'home', 1);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t} else if (r < 0.4) {\\n\\t\\t\\t\\t\\t\\t\\tif (ns.bladeburner.inBladeburner()) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait spendHashesOnAction(ns, 'Exchange for Bladeburner SP', 'home', 1);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t*/\\n\\t\\t} else {\\n\\t\\t\\tawait spendHashesOnAction(ns, \\\"Sell for Money\\\", \\\"target\\\", 25);\\n\\t\\t\\tns.print(`Sold hashes for money`);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(250);\\n\\t}\\n}\\n\",\"filename\":\"spend-hashes.js\",\"server\":\"home\"}}],[\"manage-bladeburner.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction findNextAction(ns) {\\n\\tconst orderOfTypes = ['Operation', 'Contract', 'General'];\\n\\tconst targetedTasks = {\\n\\t\\t'General': ['Training'],\\n\\t\\t'Contract': ['Tracking', 'Bounty Hunter', 'Retirement'],\\n\\t\\t'Operation': ['Investigation', 'Stealth Retirement Operation', 'Assassination']\\n\\t}\\n\\n\\tconst lowStaminaTask = 'Hyperbolic Regeneration Chamber';\\n\\n\\tconst [currentStamina, maxStamina] = ns.bladeburner.getStamina();\\n\\tconst playerRank = ns.bladeburner.getRank();\\n\\n\\tif (currentStamina < 0.80 * maxStamina) {\\n\\t\\treturn {\\n\\t\\t\\t'type': 'General',\\n\\t\\t\\t'name': lowStaminaTask\\n\\t\\t};\\n\\t}\\n\\n\\t// BlackOps have a special structure\\n\\tconst nextBlackOp = ns.bladeburner.getNextBlackOp();\\n\\tif (nextBlackOp != undefined) {\\n\\n\\t\\tconst [lowerBound, _] = ns.bladeburner.getActionEstimatedSuccessChance('BlackOp', nextBlackOp['name']);\\n\\t\\tif (0.9 < lowerBound && nextBlackOp['rank'] <= playerRank) {\\n\\t\\t\\treturn {\\n\\t\\t\\t\\t'type': 'BlackOp',\\n\\t\\t\\t\\t'name': nextBlackOp['name']\\n\\t\\t\\t};\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let actionType of orderOfTypes) {\\n\\t\\tconst actionNames = targetedTasks[actionType].reverse();\\n\\t\\tfor (let actionName of actionNames) {\\n\\t\\t\\tconst [lowerBound, _] = ns.bladeburner.getActionEstimatedSuccessChance(actionType, actionName);\\n\\t\\t\\tconst countRemaining = ns.bladeburner.getActionCountRemaining(actionType, actionName);\\n\\t\\t\\tif (0.8 < lowerBound && 0 < countRemaining) {\\n\\t\\t\\t\\treturn {\\n\\t\\t\\t\\t\\t'type': actionType,\\n\\t\\t\\t\\t\\t'name': actionName\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn {\\n\\t\\t'type': 'General',\\n\\t\\t'name': 'Training'\\n\\t};\\n}\\n\\n/** @param {NS} ns */\\nfunction upgradeBladeburnerSkills(ns) {\\n\\tconst targetedSkills = [\\n\\t\\t\\\"Blade's Intuition\\\",\\n\\t\\t\\\"Cloak\\\",\\n\\t\\t\\\"Short-Circuit\\\",\\n\\t\\t\\\"Digital Observer\\\",\\n\\t\\t\\\"Tracer\\\",\\n\\t\\t\\\"Hyperdrive\\\",\\n\\t\\t\\\"Hands of Midas\\\"\\n\\t];\\n\\n\\tfor (let skill of targetedSkills) {\\n\\t\\tconst skillCost = ns.bladeburner.getSkillUpgradeCost(skill);\\n\\t\\tconst numberSkillPoints = ns.bladeburner.getSkillPoints();\\n\\t\\tif (skillCost < numberSkillPoints) {\\n\\t\\t\\tns.bladeburner.upgradeSkill(skill);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tconst ten_seconds = 10 * 1000;\\n\\n\\twhile (!ns.bladeburner.inBladeburner()) {\\n\\t\\tns.print('Not in BladeBurner');\\n\\t\\tawait ns.sleep(ten_seconds);\\n\\t}\\n\\n\\tns.print('Managing bladeburner');\\n\\n\\twhile (true) {\\n\\t\\tconst currentAction = ns.bladeburner.getCurrentAction();\\n\\n\\t\\tconst newAction = findNextAction(ns);\\n\\t\\tif (currentAction['type'] != newAction['type'] || currentAction['name'] != newAction['name']) {\\n\\t\\t\\tconst result = ns.bladeburner.startAction(newAction['type'], newAction['name']);\\n\\t\\t\\tif (!result) {\\n\\t\\t\\t\\tns.print(`Unable to start action: ${JSON.stringify(newAction)}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tupgradeBladeburnerSkills(ns);\\n\\t\\tawait ns.sleep(ten_seconds);\\n\\t}\\n}\\n\",\"filename\":\"manage-bladeburner.js\",\"server\":\"home\"}}],[\"hacking-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport function buildHackingProgramList(ns) {\\n\\treturn [\\n\\t\\t{ name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\" },\\n\\t\\t{ name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\" },\\n\\t\\t{ name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\" },\\n\\t\\t{ name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\" },\\n\\t\\t{ name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\" }\\n\\t];\\n}\\n\\n/** @param {NS} ns */\\nexport function listAvailablePrograms(ns, hackingPrograms) {\\n\\tlet availablePrograms = [];\\n\\tfor (const program of hackingPrograms) {\\n\\t\\tif (ns.fileExists(program.executableName, \\\"home\\\")) {\\n\\t\\t\\tavailablePrograms.push(program);\\n\\t\\t}\\n\\t}\\n\\treturn availablePrograms;\\n}\\n\\n/** @param {NS} ns */\\nexport function countAvailablePrograms(ns, hackingPrograms) {\\n\\tconst availablePrograms = listAvailablePrograms(ns, hackingPrograms);\\n\\treturn availablePrograms.length;\\n}\\n\",\"filename\":\"hacking-programs.js\",\"server\":\"home\"}}],[\"buy-darkweb-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const SLEEP_DELAY = 15000;  // in milliseconds\\n    const HOME_SERVER = 'home';\\n    const TOR_ROUTER_PRICE = 200000;\\n\\n    if (!ns.hasTorRouter()) {\\n        ns.print('TOR router not purchased yet');\\n    }\\n\\n    while (!ns.hasTorRouter()) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(HOME_SERVER);\\n\\n        if (TOR_ROUTER_PRICE <= moneyAvailable) {\\n            if (ns.singularity.purchaseTor()) {\\n                ns.print('TOR router purchased');\\n            }\\n        }\\n\\n        await ns.sleep(SLEEP_DELAY);\\n    }\\n\\n    while (true) {\\n        const allHackingPrograms = ns.singularity.getDarkwebPrograms();\\n        const purchasedHackingPrograms = allHackingPrograms.filter((program) => ns.fileExists(program));\\n        const hackingProgramsToPurchase = allHackingPrograms.filter((program) => !ns.fileExists(program));\\n\\n        if (purchasedHackingPrograms.length == allHackingPrograms.length) {\\n            break;\\n        }\\n\\n        for (const program of hackingProgramsToPurchase) {\\n            const programCost = ns.singularity.getDarkwebProgramCost(program);\\n            const moneyAvailable = ns.getServerMoneyAvailable(HOME_SERVER);\\n\\n            if (programCost <= moneyAvailable) {\\n                if (ns.singularity.purchaseProgram(program)) {\\n                    ns.print(`Purchased ${program}`);\\n                }\\n            }\\n        }\\n\\n        await ns.sleep(SLEEP_DELAY);\\n    }\\n}\\n\",\"filename\":\"buy-darkweb-programs.js\",\"server\":\"home\"}}],[\"manage-corporation.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Ref: https://github.com/danielyxie/bitburner/blob/dev/markdown/bitburner.corporation.md\\n    if (ns.corporation.hasCorporation()) {\\n        ns.tprint('Player has corporation');\\n    } else {\\n        ns.tprint('Player does not have corporation');\\n    }\\n\\n    const corporation = ns.corporation.getCorporation();\\n    ns.tprint(`Corporation data:\\\\n${corporation}`);\\n}\\n\",\"filename\":\"manage-corporation.js\",\"server\":\"home\"}}],[\"buy-hacknet-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tconst hacknetConstants = ns.formulas.hacknetServers.constants();\\n\\t/*\\n\\t\\t\\tns.formulas.hacknetServers.constants()\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\\"HashesPerLevel\\\":0.001,\\n\\t\\t\\t\\t\\t\\\"BaseCost\\\":50000,\\n\\t\\t\\t\\t\\t\\\"RamBaseCost\\\":200000,\\n\\t\\t\\t\\t\\t\\\"CoreBaseCost\\\":1000000,\\n\\t\\t\\t\\t\\t\\\"CacheBaseCost\\\":10000000,\\n\\t\\t\\t\\t\\t\\\"PurchaseMult\\\":3.2,\\n\\t\\t\\t\\t\\t\\\"UpgradeLevelMult\\\":1.1,\\n\\t\\t\\t\\t\\t\\\"UpgradeRamMult\\\":1.4,\\n\\t\\t\\t\\t\\t\\\"UpgradeCoreMult\\\":1.55,\\n\\t\\t\\t\\t\\t\\\"UpgradeCacheMult\\\":1.85,\\n\\t\\t\\t\\t\\t\\\"MaxServers\\\":20,\\n\\t\\t\\t\\t\\t\\\"MaxLevel\\\":300,\\n\\t\\t\\t\\t\\t\\\"MaxRam\\\":8192,\\n\\t\\t\\t\\t\\t\\\"MaxCores\\\":128,\\n\\t\\t\\t\\t\\t\\\"MaxCache\\\":15\\n\\t\\t\\t}\\n\\t*/\\n\\tconst targetCount = hacknetConstants['MaxServers'];\\n\\tconst targetLevel = hacknetConstants['MaxLevel'];\\n\\tconst targetRam = hacknetConstants['MaxRam'];\\n\\tconst targetCore = hacknetConstants['MaxCores'];\\n\\tconst targetCache = hacknetConstants['MaxCache'];\\n\\n\\twhile (true) {\\n\\t\\tif (ns.hacknet.numNodes() < targetCount) {\\n\\t\\t\\tconst cost = ns.hacknet.getPurchaseNodeCost();\\n\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n\\t\\t\\t\\tns.hacknet.purchaseNode();\\n\\t\\t\\t\\tns.print('Bought net node');\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\tif (ns.hacknet.getNodeStats(i).level < targetLevel) {\\n\\t\\t\\t\\tconst cost = ns.hacknet.getLevelUpgradeCost(i, 1);\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeLevel(i, 1);\\n\\t\\t\\t\\t\\tconst newLevel = ns.hacknet.getNodeStats(i).level;\\n\\t\\t\\t\\t\\tns.print(`Upgrading node ${i} to level ${newLevel}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\tif (ns.hacknet.getNodeStats(i).ram < targetRam) {\\n\\t\\t\\t\\tconst cost = ns.hacknet.getRamUpgradeCost(i, 1);\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeRam(i, 1);\\n\\t\\t\\t\\t\\tconst newLevel = ns.hacknet.getNodeStats(i).ram;\\n\\t\\t\\t\\t\\tns.print(`Upgrading node ${i} to ram ${newLevel}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\tif (ns.hacknet.getNodeStats(i).cores < targetCore) {\\n\\t\\t\\t\\tconst cost = ns.hacknet.getCoreUpgradeCost(i, 1);\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeCore(i, 1);\\n\\t\\t\\t\\t\\tconst newLevel = ns.hacknet.getNodeStats(i).cores;\\n\\t\\t\\t\\t\\tns.print(`Upgrading node ${i} to cores ${newLevel}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\tif (ns.hacknet.getNodeStats(i).cache < targetCache) {\\n\\t\\t\\t\\tconst cost = ns.hacknet.getCacheUpgradeCost(i, 1);\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeCache(i, 1);\\n\\t\\t\\t\\t\\tconst newLevel = ns.hacknet.getNodeStats(i).cache;\\n\\t\\t\\t\\t\\tns.print(`Upgrading node ${i} to cache ${newLevel}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tlet countCompletelyUpgraded = 0;\\n\\t\\tif (ns.hacknet.numNodes() == targetCount) {\\n\\t\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\t\\tconst nodeStats = ns.hacknet.getNodeStats(i);\\n\\t\\t\\t\\tconst allLevelUpgraded = nodeStats.level == targetLevel;\\n\\t\\t\\t\\tconst allRamUpgraded = nodeStats.ram == targetRam;\\n\\t\\t\\t\\tconst allCoreUpgraded = nodeStats.cores == targetCore;\\n\\t\\t\\t\\tconst allCacheUpgraded = nodeStats.cache == targetCache;\\n\\n\\n\\t\\t\\t\\tif (allLevelUpgraded && allRamUpgraded && allCoreUpgraded && allCacheUpgraded) {\\n\\t\\t\\t\\t\\tcountCompletelyUpgraded++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (countCompletelyUpgraded == targetCount) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500);\\n\\t}\\n}\",\"filename\":\"buy-hacknet-servers.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"hacknet-server-0\",\"hacknet-server-1\",\"hacknet-server-2\",\"darkweb\",\"neighbor-0\",\"neighbor-1\",\"neighbor-2\",\"neighbor-3\",\"neighbor-4\",\"neighbor-5\",\"neighbor-6\",\"neighbor-7\",\"neighbor-8\",\"neighbor-9\",\"neighbor-10\",\"neighbor-11\",\"hacknet-server-3\",\"neighbor-12\",\"neighbor-13\",\"neighbor-14\",\"neighbor-15\",\"neighbor-16\",\"neighbor-17\",\"neighbor-18\",\"neighbor-19\",\"hacknet-server-4\",\"hacknet-server-5\",\"hacknet-server-6\",\"hacknet-server-7\",\"hacknet-server-8\",\"hacknet-server-9\",\"hacknet-server-10\",\"hacknet-server-11\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.032,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"launch-hacking.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.841,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12390.010000010012,\"ramUsage\":11.2,\"server\":\"home\",\"scriptKey\":\"launch-hacking.js*[]\",\"title\":\"launch-hacking.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"spend-hashes.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.849,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12389.61000001001,\"ramUsage\":6.05,\"server\":\"home\",\"scriptKey\":\"spend-hashes.js*[]\",\"title\":\"spend-hashes.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-sleeves.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.871,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12388.810000010008,\"ramUsage\":21.6,\"server\":\"home\",\"scriptKey\":\"manage-sleeves.js*[]\",\"title\":\"manage-sleeves.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-gang.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.879,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12388.610000010007,\"ramUsage\":24.7,\"server\":\"home\",\"scriptKey\":\"manage-gang.js*[]\",\"title\":\"manage-gang.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[0,0,0,22],\"joesguns\":[0,11,0,33],\"harakiri-sushi\":[0,0,11,33],\"sigma-cosmetics\":[0,0,11,44],\"hong-fang-tea\":[0,0,0,55],\"nectar-net\":[0,0,0,33],\"zer0\":[0,0,11,44],\"max-hardware\":[0,0,11,44],\"n00dles\":[320950.22843155416,55,22,0],\"iron-gym\":[0,0,0,22],\"CSEC\":[0,0,77,0],\"neo-net\":[0,0,22,11],\"johnson-ortho\":[0,0,0,11],\"crush-fitness\":[0,0,0,11],\"avmnite-02h\":[0,0,0,22],\"omega-net\":[0,0,11,0],\"phantasy\":[0,0,11,0],\"the-hub\":[0,0,0,11],\"catalyst\":[0,0,0,11],\"I.I.I.I\":[0,0,0,11],\"summit-uni\":[0,0,11,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":33462.0241198052,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.883,\"onlineExpGained\":9863.516518717448,\"onlineMoneyMade\":320950.22843155416,\"onlineRunningTime\":12386.010000009997,\"ramUsage\":3.1,\"server\":\"home\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":11,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"40.3.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":54102294890.5948,\"moneyMax\":1066482257613.5077,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1336,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"61.0.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":41822877197.71575,\"moneyMax\":824426331339.7133,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1328,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-494497.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[5,6],[8,8,8],[8,6,3,9],[8,2,5,1,1],[7,9,2,5,2,3],[2,5,1,9,4,5,5]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"53.2.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":36,\"moneyAvailable\":23405911467.5676,\"moneyMax\":461385036511.13696,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":911,\"serverGrowth\":78,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-698431-NiteSec.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":33832856878,\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"69.5.5.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":47,\"moneyAvailable\":16753335955.41126,\"moneyMax\":330247276726.7141,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1041,\"serverGrowth\":79,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"12.5.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":26793913153.38343,\"moneyMax\":528170441714.2602,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1195,\"serverGrowth\":82,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"32.2.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":11998815934.187798,\"moneyMax\":236524611979.1878,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1187,\"serverGrowth\":72,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"21.8.7.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":47,\"moneyAvailable\":11865403517.308441,\"moneyMax\":233894742473.00714,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1079,\"serverGrowth\":95,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"54.1.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":34,\"moneyAvailable\":18193157149.46823,\"moneyMax\":358629506366.00793,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1080,\"serverGrowth\":78,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"89.6.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":23273292081.64205,\"moneyMax\":458770799492.33386,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":954,\"serverGrowth\":94,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"38.4.3.7\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":46,\"moneyAvailable\":1278863908.249802,\"moneyMax\":25209386603.816357,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":999,\"serverGrowth\":81,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"60.7.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":788493.175581656,\"moneyMax\":15543037.19847111,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1382,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-579443.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[12,56,120,185,100,32,46,131,103,143,195,88,108],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"5.3.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":43,\"moneyAvailable\":945223228.8350755,\"moneyMax\":18632551633.44288,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1035,\"serverGrowth\":84,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"11.0.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":48,\"moneyAvailable\":640740024.8785323,\"moneyMax\":12630478423.468582,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":931,\"serverGrowth\":47,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-493254-NiteSec.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[11,[[2,10],[6,10],[8,10],[2,6],[1,2],[3,10],[3,4],[0,8],[4,8],[5,9],[1,5],[1,8],[0,2],[0,6],[1,3],[0,5],[8,9],[7,10],[0,3],[4,5]]],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"82.7.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":39,\"moneyAvailable\":552225387.9368274,\"moneyMax\":10885648744.278027,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":892,\"serverGrowth\":36,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"35.5.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":43,\"moneyAvailable\":576165773.0669932,\"moneyMax\":11357569501.676334,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":838,\"serverGrowth\":77,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"14.6.7.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":42,\"moneyAvailable\":574307550.1239362,\"moneyMax\":11320939598.94359,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":878,\"serverGrowth\":69,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-940983-NiteSec.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,1,1],[1,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,1,0,0,0,1],[1,1,0,0,0,0,0],[1,1,0,1,0,0,0],[1,0,0,0,0,0,0],[1,1,0,0,0,0,0],[0,0,0,1,0,0,0],[1,0,1,0,0,0,1],[0,0,0,0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"95.1.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":46,\"moneyAvailable\":741019099.062385,\"moneyMax\":14607212564.658945,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":92,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"62.3.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":40,\"moneyAvailable\":929288823.3560551,\"moneyMax\":18318447384.013916,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":809,\"serverGrowth\":82,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-263540.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[9,9],[1,4,2]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"61.2.6.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":39,\"moneyAvailable\":623058754.5591491,\"moneyMax\":12281939398.90738,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":846,\"serverGrowth\":69,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-737017.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[33,22,11,2,10,44,12,3],[11,8,37,50,24,42,49,34],[38,31,10,44,43,12,19,25],[37,4,5,44,26,28,49,47],[49,3,10,3,41,22,42,16],[22,2,44,14,11,44,33,31],[35,14,44,49,1,29,32,29],[30,42,2,14,2,10,19,32],[38,25,29,15,2,50,36,3],[30,32,14,21,15,38,8,38],[29,37,50,10,50,49,7,23],[29,50,48,17,44,41,43,49]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-178447.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[7,[[0,1],[2,4],[5,6],[0,5],[4,5],[1,4],[0,3],[3,4],[1,6],[3,6],[5,6]]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"73.7.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":499501457.6211069,\"moneyMax\":9846337263.183315,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":810,\"serverGrowth\":82,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"42.2.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":35,\"moneyAvailable\":652472685.8457042,\"moneyMax\":12861756501.06929,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":907,\"serverGrowth\":79,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"21.3.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":660765063.5650707,\"moneyMax\":13025218582.09594,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":826,\"serverGrowth\":78,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"83.8.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":40,\"moneyAvailable\":935397041.0738541,\"moneyMax\":18438854583.6502,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":855,\"serverGrowth\":65,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-456783.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"ARRAYFRAMEPRINTMODEMTABLE\",\"OPERATING\"],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"82.2.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":45,\"moneyAvailable\":732529022.4491048,\"moneyMax\":14439853377.915524,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":867,\"serverGrowth\":60,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"10.2.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82.5,\"hackDifficulty\":82.5,\"minDifficulty\":28,\"moneyAvailable\":709956969.4520072,\"moneyMax\":13994905634.23855,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":814,\"serverGrowth\":72,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-596428.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":358248257,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"74.6.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":34,\"moneyAvailable\":760456609.4059887,\"moneyMax\":14990371171.06468,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":812,\"serverGrowth\":70,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"37.9.7.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":39,\"moneyAvailable\":655825183.7827924,\"moneyMax\":12927842044.682932,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":809,\"serverGrowth\":79,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-913401.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[195,12,71,165,91,35,188,171,58,77],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"8.8.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":43,\"moneyAvailable\":1139118370.1671906,\"moneyMax\":22454676526.413216,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":848,\"serverGrowth\":64,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-672984.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[3,95,163,148,99,86,41,135,118,71,2,156,165,41,50,130,28,64,168,5,196],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"90.1.6.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":41,\"moneyAvailable\":1294495255.5882945,\"moneyMax\":25517516871.35505,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":769,\"serverGrowth\":80,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"12.2.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94.5,\"hackDifficulty\":94.5,\"minDifficulty\":32,\"moneyAvailable\":933924252.5188575,\"moneyMax\":18409822490.532963,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":785,\"serverGrowth\":68,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"45.2.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":39,\"moneyAvailable\":1153615462.187677,\"moneyMax\":22740447979.511536,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":812,\"serverGrowth\":73,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"4.1.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"snap-fitness\",\"icarus\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":36,\"moneyAvailable\":835174928.4254986,\"moneyMax\":16463243287.010094,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":775,\"serverGrowth\":76,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"4.0.6.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":34,\"moneyAvailable\":579989694.515405,\"moneyMax\":11432947900.82716,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":687,\"serverGrowth\":63,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"45.2.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":400797569.65849763,\"moneyMax\":7900653711.635971,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":501,\"serverGrowth\":44,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":398.8099999999859,\"ramUsage\":2.45,\"server\":\"rho-construction\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"79.1.7.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":491601459.3376913,\"moneyMax\":9690609894.843817,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":514,\"serverGrowth\":57,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":143.01000000000042,\"ramUsage\":2.45,\"server\":\"alpha-ent\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"39.2.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"rothman-uni\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":39,\"minDifficulty\":39,\"moneyAvailable\":205253976.1077573,\"moneyMax\":4046033985.5491734,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":413,\"serverGrowth\":39,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,0,12]},\"filename\":\"hack-server.js\",\"offlineExpGained\":1644.6666209535344,\"offlineMoneyMade\":0,\"offlineRunningTime\":40660.983,\"onlineExpGained\":582.4553028214768,\"onlineMoneyMade\":0,\"onlineRunningTime\":4846.209999997784,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"98.3.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":76.5,\"hackDifficulty\":29.270000000000003,\"minDifficulty\":26,\"moneyAvailable\":0,\"moneyMax\":3861545874.4358463,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":384,\"serverGrowth\":44,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"rothman-uni\":[80308951.43763885,72,18,6]},\"filename\":\"hack-server.js\",\"offlineExpGained\":9538.132166436575,\"offlineMoneyMade\":0,\"offlineRunningTime\":40660.984000000004,\"onlineExpGained\":3664.1733595678365,\"onlineMoneyMade\":80308951.43763885,\"onlineRunningTime\":5140.009999997516,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"50.5.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"netlink\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":34,\"moneyAvailable\":691182340.5901558,\"moneyMax\":13624813965.947346,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":730,\"serverGrowth\":79,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"67.3.9.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"computek\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":72,\"hackDifficulty\":24.148,\"minDifficulty\":24,\"moneyAvailable\":228160547.58005324,\"moneyMax\":3336997869.672049,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":436,\"serverGrowth\":43,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,78,26]},\"filename\":\"hack-server.js\",\"offlineExpGained\":7969.157746237322,\"offlineMoneyMade\":0,\"offlineRunningTime\":40660.985,\"onlineExpGained\":3763.0142594405706,\"onlineMoneyMade\":0,\"onlineRunningTime\":3711.0099999988165,\"ramUsage\":2.45,\"server\":\"summit-uni\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"13.8.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":34,\"moneyAvailable\":381777881.0601415,\"moneyMax\":7525731345.09867,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":591,\"serverGrowth\":65,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"20.7.6.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":96,\"hackDifficulty\":54.048,\"minDifficulty\":32,\"moneyAvailable\":4675802336.991224,\"moneyMax\":4675802336.991224,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":434,\"serverGrowth\":44,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,52,52]},\"filename\":\"hack-server.js\",\"offlineExpGained\":6867.72960874903,\"offlineMoneyMade\":0,\"offlineRunningTime\":40660.986000000004,\"onlineExpGained\":4864.384286593909,\"onlineMoneyMade\":0,\"onlineRunningTime\":3816.6099999987205,\"ramUsage\":2.45,\"server\":\"catalyst\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"78.8.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":67.5,\"hackDifficulty\":46.382000000000005,\"minDifficulty\":23,\"moneyAvailable\":251143.97645763078,\"moneyMax\":2666353708.4827104,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":317,\"serverGrowth\":46,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"the-hub\":[202134874.9264025,96,0,18]},\"filename\":\"hack-server.js\",\"offlineExpGained\":10478.163912967995,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.893,\"onlineExpGained\":3898.479242748292,\"onlineMoneyMade\":202134874.9264025,\"onlineRunningTime\":6897.409999995918,\"ramUsage\":2.45,\"server\":\"the-hub\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"31.4.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":97.5,\"hackDifficulty\":34.416,\"minDifficulty\":33,\"moneyAvailable\":0,\"moneyMax\":3474259783.4159837,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":344,\"serverGrowth\":53,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"40.4.7.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":37.964000000000006,\"minDifficulty\":36,\"moneyAvailable\":0,\"moneyMax\":4274335229.5795555,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":391,\"serverGrowth\":54,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,13,0,26]},\"filename\":\"hack-server.js\",\"offlineExpGained\":3563.4447835890774,\"offlineMoneyMade\":0,\"offlineRunningTime\":40660.988000000005,\"onlineExpGained\":1577.4831118081665,\"onlineMoneyMade\":0,\"onlineRunningTime\":5001.809999997642,\"ramUsage\":2.45,\"server\":\"netlink\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-302171.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":286326098,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"64.3.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":67.5,\"hackDifficulty\":46.123286989062635,\"minDifficulty\":23,\"moneyAvailable\":1211548135.0831614,\"moneyMax\":1211548135.0831614,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":265,\"serverGrowth\":51,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"27.4.7.7\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1.5,\"hackDifficulty\":1.0983561419765107,\"minDifficulty\":1,\"moneyAvailable\":46.75674159250679,\"moneyMax\":1088012.6038929778,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[8687251.072727205,1561,479,195]},\"filename\":\"hack-server.js\",\"offlineExpGained\":36280.50477620135,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.897,\"onlineExpGained\":11318.496483975785,\"onlineMoneyMade\":8687251.072727205,\"onlineRunningTime\":12383.81000000999,\"ramUsage\":2.45,\"server\":\"n00dles\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":1,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"22.6.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":6.821452047325504,\"minDifficulty\":5,\"moneyAvailable\":434.98406118729076,\"moneyMax\":31086074.39694222,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[15077094.285188753,270,6708,204]},\"filename\":\"hack-server.js\",\"offlineExpGained\":242225.17975592247,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.899000000005,\"onlineExpGained\":79177.51772729447,\"onlineMoneyMade\":15077094.285188753,\"onlineRunningTime\":12377.210000009965,\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"81.1.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":27.076000000000022,\"minDifficulty\":5,\"moneyAvailable\":857223.9048482382,\"moneyMax\":35748985.55648355,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"sigma-cosmetics\":[87306423.32032174,660,5298,540]},\"filename\":\"hack-server.js\",\"offlineExpGained\":221145.62116957983,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.902,\"onlineExpGained\":71632.07403165207,\"onlineMoneyMade\":87306423.32032174,\"onlineRunningTime\":12354.410000009882,\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"89.6.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":9.609999999999959,\"minDifficulty\":8,\"moneyAvailable\":305.0893594668351,\"moneyMax\":38857592.99617778,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"joesguns\":[8388289.178055582,180,4668,18]},\"filename\":\"hack-server.js\",\"offlineExpGained\":212584.8731395554,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.905,\"onlineExpGained\":69717.58316414131,\"onlineMoneyMade\":8388289.178055582,\"onlineRunningTime\":12318.410000009751,\"ramUsage\":2.45,\"server\":\"joesguns\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"83.7.5.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":35.163999999999994,\"minDifficulty\":13,\"moneyAvailable\":2399703.9153295388,\"moneyMax\":116572778.98853333,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"zer0\":[28403889.578687824,65,1937,39]},\"filename\":\"hack-server.js\",\"offlineExpGained\":125490.28085838324,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.907,\"onlineExpGained\":42778.47384112518,\"onlineMoneyMade\":28403889.578687824,\"onlineRunningTime\":11721.61000000758,\"ramUsage\":2.45,\"server\":\"zer0\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"34.9.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10.366904094650982,\"minDifficulty\":10,\"moneyAvailable\":40472589.73955837,\"moneyMax\":42743352.29579555,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"nectar-net\":[12802199.409037402,138,2910,24]},\"filename\":\"hack-server.js\",\"offlineExpGained\":162182.7629324261,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.909,\"onlineExpGained\":54141.86792136065,\"onlineMoneyMade\":12802199.409037402,\"onlineRunningTime\":12260.610000009541,\"ramUsage\":2.45,\"server\":\"nectar-net\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"63.5.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":14.311999999999994,\"minDifficulty\":13,\"moneyAvailable\":225.32956902770735,\"moneyMax\":77715185.99235556,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"neo-net\":[157511889.40969363,637,2769,104]},\"filename\":\"hack-server.js\",\"offlineExpGained\":216587.82460742464,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.912,\"onlineExpGained\":73568.07603250808,\"onlineMoneyMade\":157511889.40969363,\"onlineRunningTime\":11700.210000007502,\"ramUsage\":2.45,\"server\":\"neo-net\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"39.5.0.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"computek\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":58.812,\"minDifficulty\":15,\"moneyAvailable\":1463284.4773927396,\"moneyMax\":699436673.9311999,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"silver-helix\":[1033592722.4352652,936,676,390]},\"filename\":\"hack-server.js\",\"offlineExpGained\":134846.55693022165,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.914,\"onlineExpGained\":48586.479843691486,\"onlineMoneyMade\":1033592722.4352652,\"onlineRunningTime\":8526.209999995957,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"3.4.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8.383999999999986,\"minDifficulty\":8,\"moneyAvailable\":814561.6260519534,\"moneyMax\":46629111.59541333,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"hong-fang-tea\":[36430053.70672396,198,2700,66]},\"filename\":\"hack-server.js\",\"offlineExpGained\":129595.51708262114,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.917,\"onlineExpGained\":42441.466085420885,\"onlineMoneyMade\":36430053.70672396,\"onlineRunningTime\":12239.010000009463,\"ramUsage\":2.45,\"server\":\"hong-fang-tea\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"72.8.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8.239999999999991,\"minDifficulty\":8,\"moneyAvailable\":166.02075315750204,\"moneyMax\":62172148.79388444,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"harakiri-sushi\":[20786881.94946638,204,2202,78]},\"filename\":\"hack-server.js\",\"offlineExpGained\":107638.37266589158,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.921,\"onlineExpGained\":35622.43681574078,\"onlineMoneyMade\":20786881.94946638,\"onlineRunningTime\":12200.210000009321,\"ramUsage\":2.45,\"server\":\"harakiri-sushi\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"26.6.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":31.965999999999998,\"minDifficulty\":10,\"moneyAvailable\":5832503.431880608,\"moneyMax\":373032892.7633066,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"phantasy\":[936070474.4934614,936,923,273]},\"filename\":\"hack-server.js\",\"offlineExpGained\":105849.05253980859,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.922999999995,\"onlineExpGained\":37630.1425944056,\"onlineMoneyMade\":936070474.4934614,\"onlineRunningTime\":8317.8099999952,\"ramUsage\":2.45,\"server\":\"phantasy\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-321166.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[88,12,179,53,121,125,75,78,125,153,56,157,183,182,60,156,126,69,192,97,102,76,28,160,54,11,164,152,90,60,15,108,42,142,39,116,160,173,36,94,199,88,56,3,79,123,18,184,9,21]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"48.1.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":30.144,\"minDifficulty\":8,\"moneyAvailable\":7477589.946248289,\"moneyMax\":155430371.9847111,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"max-hardware\":[30234214.855382778,195,2730,13]},\"filename\":\"hack-server.js\",\"offlineExpGained\":131365.95044657504,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.924999999996,\"onlineExpGained\":42133.139840839875,\"onlineMoneyMade\":30234214.855382778,\"onlineRunningTime\":11750.410000007685,\"ramUsage\":2.45,\"server\":\"max-hardware\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"82.1.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"zer0\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":39,\"hackDifficulty\":34.40747943587193,\"minDifficulty\":13,\"moneyAvailable\":1705141.214453924,\"moneyMax\":1003748063.8593396,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":185,\"serverGrowth\":36,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"omega-net\":[1360971446.1913157,650,247,195]},\"filename\":\"hack-server.js\",\"offlineExpGained\":64830.079648757,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.927,\"onlineExpGained\":23399.810850339887,\"onlineMoneyMade\":1360971446.1913157,\"onlineRunningTime\":8340.00999999528,\"ramUsage\":2.45,\"server\":\"omega-net\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-298023.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"23913195234\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"48.5.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":54,\"hackDifficulty\":19.537999999999997,\"minDifficulty\":18,\"moneyAvailable\":0,\"moneyMax\":927683190.9276061,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":235,\"serverGrowth\":30,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-314337.cct\",\"type\":\"Total Ways to Sum\",\"data\":44,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"24.3.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":15.104,\"minDifficulty\":15,\"moneyAvailable\":81744.45181984955,\"moneyMax\":310860743.9694222,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[93005308.3373055,338,1066,130]},\"filename\":\"hack-server.js\",\"offlineExpGained\":108740.48809564265,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.929,\"onlineExpGained\":37228.60143867271,\"onlineMoneyMade\":93005308.3373055,\"onlineRunningTime\":11770.410000007758,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"48.3.1.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":197123293.89541402,\"moneyMax\":3885759299.6177773,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":521,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":282.20999999999253,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"16.2.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91.5,\"hackDifficulty\":91.5,\"minDifficulty\":31,\"moneyAvailable\":709643858.0234905,\"moneyMax\":13988733478.623999,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":950,\"serverGrowth\":55,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"21.3.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82.5,\"hackDifficulty\":82.5,\"minDifficulty\":28,\"moneyAvailable\":354821929.0117453,\"moneyMax\":6994366739.311999,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":753,\"serverGrowth\":47,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"66.1.4.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.104,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":520,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"run4theh111z\":[0,364,0,312]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1956.0790586421267,\"onlineMoneyMade\":0,\"onlineRunningTime\":268.6099999999933,\"ramUsage\":2.45,\"server\":\"run4theh111z\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-480671.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"FRAME PRINT SHIFT ARRAY LINUX\",22],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"8.5.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"netlink\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.052,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":359,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"I.I.I.I\":[0,4290,0,1222]},\"filename\":\"hack-server.js\",\"offlineExpGained\":27839.421957190447,\"offlineMoneyMade\":0,\"offlineRunningTime\":40661.002,\"onlineExpGained\":11137.030769365645,\"onlineMoneyMade\":0,\"onlineRunningTime\":4995.609999997648,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-245206.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,1,0,1,0],[0,1,0,1,0,0,1,0],[0,0,1,0,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,1,0,0,1,0,0],[1,0,0,0,1,0,0,0],[0,1,0,0,0,0,1,1],[0,0,1,0,1,0,0,0],[1,1,0,0,1,0,0,0],[1,0,1,0,0,0,0,1],[0,1,1,1,0,0,0,0],[0,0,1,0,0,0,0,0]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"64.4.2.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.104,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":214,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"avmnite-02h\":[0,24076,0,11752]},\"filename\":\"hack-server.js\",\"offlineExpGained\":248160.9594118622,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.932,\"onlineExpGained\":86256.77655366999,\"onlineMoneyMade\":0,\"onlineRunningTime\":8334.60999999526,\"ramUsage\":2.45,\"server\":\"avmnite-02h\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"7.1.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.048,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":524,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\".\":[0,114,0,18]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":232.98212112859073,\"onlineMoneyMade\":0,\"onlineRunningTime\":252.6099999999942,\"ramUsage\":2.45,\"server\":\".\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"14.5.8.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.03,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":55,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"CSEC\":[0,6393,0,639]},\"filename\":\"hack-server.js\",\"offlineExpGained\":33184.32077185476,\"offlineMoneyMade\":0,\"offlineRunningTime\":54298.934,\"onlineExpGained\":10859.151051977828,\"onlineMoneyMade\":0,\"onlineRunningTime\":11697.210000007492,\"ramUsage\":2.45,\"server\":\"CSEC\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":3,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"23.5.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"45.2.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3804.725383687637,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"49.2.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"darkweb\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"hacknet-server-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":16,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-0\",\"httpPortOpen\":false,\"ip\":\"93.4.9.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":7,\"cores\":16,\"hashCapacity\":4096,\"hashRate\":2.1405621301456588,\"level\":76,\"onlineTimeSeconds\":66687.00000000655,\"totalHashesGenerated\":85610.61372567574,\"runningScripts\":[]}},\"hacknet-server-1\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":16,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-1\",\"httpPortOpen\":false,\"ip\":\"1.6.8.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":7,\"cores\":16,\"hashCapacity\":4096,\"hashRate\":1.9215572491469881,\"level\":73,\"onlineTimeSeconds\":66686.40000000656,\"totalHashesGenerated\":83468.97550776633,\"runningScripts\":[]}},\"hacknet-server-2\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":16,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-2\",\"httpPortOpen\":false,\"ip\":\"4.4.4.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":7,\"cores\":16,\"hashCapacity\":4096,\"hashRate\":1.8952345471038794,\"level\":72,\"onlineTimeSeconds\":66684.40000000656,\"totalHashesGenerated\":83333.4652679676,\"runningScripts\":[]}},\"neighbor-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-0\",\"httpPortOpen\":false,\"ip\":\"6.7.6.3\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.809999999981,\"ramUsage\":3.1,\"server\":\"neighbor-0\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"neighbor-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-1\",\"httpPortOpen\":false,\"ip\":\"31.9.7.5\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[30098876.484144825,5285,0,0],\"I.I.I.I\":[0,0,5285,0],\"iron-gym\":[0,0,5285,5285],\"phantasy\":[0,0,5285,0],\"harakiri-sushi\":[0,0,0,5285],\"n00dles\":[1070113.2376455036,5285,0,0],\"zer0\":[0,0,5285,0],\"computek\":[3474259783.4159837,5285,0,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":897830.5803283557,\"onlineMoneyMade\":3505428773.137774,\"onlineRunningTime\":484.809999999981,\"ramUsage\":3.1,\"server\":\"neighbor-1\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"neighbor-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-2\",\"httpPortOpen\":false,\"ip\":\"48.0.2.9\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.809999999981,\"ramUsage\":3.1,\"server\":\"neighbor-2\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"neighbor-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-3\",\"httpPortOpen\":false,\"ip\":\"14.6.6.1\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"silver-helix\":[636818264.9700192,5285,0,0],\"I.I.I.I\":[0,0,5285,0],\"joesguns\":[36241979.25343302,5285,0,0],\"harakiri-sushi\":[58290568.10972602,5285,0,0],\"crush-fitness\":[0,5285,0,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":342808.03976173577,\"onlineMoneyMade\":731350812.3331783,\"onlineRunningTime\":484.809999999981,\"ramUsage\":3.1,\"server\":\"neighbor-3\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"neighbor-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-4\",\"httpPortOpen\":false,\"ip\":\"56.0.8.2\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"hong-fang-tea\":[45271523.44404895,5285,0,0],\"catalyst\":[0,0,5285,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":322985.8061700708,\"onlineMoneyMade\":45271523.44404895,\"onlineRunningTime\":484.809999999981,\"ramUsage\":3.1,\"server\":\"neighbor-4\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"neighbor-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-5\",\"httpPortOpen\":false,\"ip\":\"73.3.9.2\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.809999999981,\"ramUsage\":3.1,\"server\":\"neighbor-5\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"neighbor-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-6\",\"httpPortOpen\":false,\"ip\":\"76.6.6.5\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"zer0\":[110224622.11570516,5285,0,0],\"netlink\":[4274335229.5795555,5285,0,0],\"n00dles\":[0,0,5285,0],\"max-hardware\":[0,0,5285,0],\"hong-fang-tea\":[0,0,0,5285]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":545694.4306411304,\"onlineMoneyMade\":4384559851.695261,\"onlineRunningTime\":484.809999999981,\"ramUsage\":3.1,\"server\":\"neighbor-6\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"neighbor-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-7\",\"httpPortOpen\":false,\"ip\":\"88.4.7.2\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,5285,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":247194.91302546932,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.809999999981,\"ramUsage\":3.1,\"server\":\"neighbor-7\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"neighbor-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-8\",\"httpPortOpen\":false,\"ip\":\"26.9.0.0\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[1082011.4797388674,5285,0,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26818.316035782052,\"onlineMoneyMade\":1082011.4797388674,\"onlineRunningTime\":484.809999999981,\"ramUsage\":3.1,\"server\":\"neighbor-8\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"neighbor-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-9\",\"httpPortOpen\":false,\"ip\":\"15.1.4.3\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[295199364.68843263,5285,0,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":128261.51147547938,\"onlineMoneyMade\":295199364.68843263,\"onlineRunningTime\":484.809999999981,\"ramUsage\":3.1,\"server\":\"neighbor-9\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"neighbor-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-10\",\"httpPortOpen\":false,\"ip\":\"20.9.9.3\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"max-hardware\":[146574731.618916,5285,0,0],\"CSEC\":[0,0,5285,0],\"hong-fang-tea\":[0,0,5285,0],\"avmnite-02h\":[0,0,0,5285],\"iron-gym\":[0,0,0,5285]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":393821.140916756,\"onlineMoneyMade\":146574731.618916,\"onlineRunningTime\":484.809999999981,\"ramUsage\":3.1,\"server\":\"neighbor-10\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"neighbor-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-11\",\"httpPortOpen\":false,\"ip\":\"87.0.0.6\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"darkweb\":[0,0,5285,0],\"sigma-cosmetics\":[0,0,5285,5285],\"n00dles\":[0,0,0,5285],\"avmnite-02h\":[0,0,0,5285]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":194724.29469459143,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.809999999981,\"ramUsage\":3.1,\"server\":\"neighbor-11\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"hacknet-server-3\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":16,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-3\",\"httpPortOpen\":false,\"ip\":\"36.8.6.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":7,\"cores\":16,\"hashCapacity\":4096,\"hashRate\":1.8952345471038794,\"level\":72,\"onlineTimeSeconds\":66053.40000000712,\"totalHashesGenerated\":81137.54315424123,\"runningScripts\":[]}},\"neighbor-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-12\",\"httpPortOpen\":false,\"ip\":\"76.0.6.2\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"I.I.I.I\":[0,0,5285,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25652.302295095877,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.809999999981,\"ramUsage\":3.1,\"server\":\"neighbor-12\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"neighbor-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-13\",\"httpPortOpen\":false,\"ip\":\"40.4.6.9\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.809999999981,\"ramUsage\":3.1,\"server\":\"neighbor-13\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"neighbor-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-14\",\"httpPortOpen\":false,\"ip\":\"75.0.1.5\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"phantasy\":[353133728.5004022,5285,0,0],\"silver-helix\":[0,5285,0,0],\"the-hub\":[0,5285,0,0],\"I.I.I.I\":[0,0,5285,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":196181.81187044914,\"onlineMoneyMade\":353133728.5004022,\"onlineRunningTime\":484.809999999981,\"ramUsage\":3.1,\"server\":\"neighbor-14\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"neighbor-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-15\",\"httpPortOpen\":false,\"ip\":\"96.5.1.8\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.809999999981,\"ramUsage\":3.1,\"server\":\"neighbor-15\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"neighbor-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-16\",\"httpPortOpen\":false,\"ip\":\"31.0.4.1\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"sigma-cosmetics\":[0,5285,5285,5285],\"neo-net\":[73258447.40930846,5285,0,0],\"the-hub\":[2637370405.245938,5285,0,0],\"rothman-uni\":[0,5285,0,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":473110.07528341596,\"onlineMoneyMade\":2710628852.6552463,\"onlineRunningTime\":484.809999999981,\"ramUsage\":3.1,\"server\":\"neighbor-16\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"neighbor-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-17\",\"httpPortOpen\":false,\"ip\":\"40.7.9.5\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.809999999981,\"ramUsage\":3.1,\"server\":\"neighbor-17\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"neighbor-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-18\",\"httpPortOpen\":false,\"ip\":\"91.6.2.4\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"sigma-cosmetics\":[34622055.58617623,5285,0,0],\"omega-net\":[961814020.0978785,5285,5285,0],\"crush-fitness\":[927683190.9276061,5285,0,0],\"silver-helix\":[0,0,5285,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":564350.6504921092,\"onlineMoneyMade\":1924119266.611661,\"onlineRunningTime\":484.809999999981,\"ramUsage\":3.1,\"server\":\"neighbor-18\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"neighbor-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-19\",\"httpPortOpen\":false,\"ip\":\"97.6.9.3\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"rothman-uni\":[3832784406.684249,5285,0,0],\"silver-helix\":[0,0,5285,0],\"the-hub\":[0,0,5285,0],\"CSEC\":[0,0,5285,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":536366.320715641,\"onlineMoneyMade\":3832784406.684249,\"onlineRunningTime\":484.809999999981,\"ramUsage\":3.1,\"server\":\"neighbor-19\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":5285,\"temporary\":false}}]}},\"hacknet-server-4\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":15,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-4\",\"httpPortOpen\":false,\"ip\":\"18.5.3.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":7,\"cores\":15,\"hashCapacity\":4096,\"hashRate\":1.8004728197486852,\"level\":72,\"onlineTimeSeconds\":63748.800000009236,\"totalHashesGenerated\":80646.79879302144,\"runningScripts\":[]}},\"hacknet-server-5\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":15,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-5\",\"httpPortOpen\":false,\"ip\":\"93.8.2.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":7,\"cores\":15,\"hashCapacity\":4096,\"hashRate\":1.8004728197486852,\"level\":72,\"onlineTimeSeconds\":63598.80000000937,\"totalHashesGenerated\":80224.26510101181,\"runningScripts\":[]}},\"hacknet-server-6\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":15,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-6\",\"httpPortOpen\":false,\"ip\":\"73.6.3.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":7,\"cores\":15,\"hashCapacity\":4096,\"hashRate\":1.8004728197486852,\"level\":72,\"onlineTimeSeconds\":63474.20000000948,\"totalHashesGenerated\":80103.62638504128,\"runningScripts\":[]}},\"hacknet-server-7\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":15,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-7\",\"httpPortOpen\":false,\"ip\":\"67.6.6.4\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":7,\"cores\":15,\"hashCapacity\":4096,\"hashRate\":1.8004728197486852,\"level\":72,\"onlineTimeSeconds\":46037.59999999069,\"totalHashesGenerated\":69524.00014776134,\"runningScripts\":[]}},\"hacknet-server-8\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":15,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-8\",\"httpPortOpen\":false,\"ip\":\"26.5.4.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":7,\"cores\":15,\"hashCapacity\":4096,\"hashRate\":1.8004728197486852,\"level\":72,\"onlineTimeSeconds\":46036.999999990694,\"totalHashesGenerated\":69473.67216864946,\"runningScripts\":[]}},\"hacknet-server-9\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":15,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-9\",\"httpPortOpen\":false,\"ip\":\"47.7.3.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":7,\"cores\":15,\"hashCapacity\":4096,\"hashRate\":1.8004728197486852,\"level\":72,\"onlineTimeSeconds\":44911.799999991716,\"totalHashesGenerated\":68585.62236830224,\"runningScripts\":[]}},\"hacknet-server-10\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":14,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-10\",\"httpPortOpen\":false,\"ip\":\"7.7.4.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":6,\"cores\":14,\"hashCapacity\":2048,\"hashRate\":0.9741859821561994,\"level\":44,\"onlineTimeSeconds\":484.799999999981,\"totalHashesGenerated\":461.5875817686879,\"runningScripts\":[]}},\"hacknet-server-11\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":14,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-11\",\"httpPortOpen\":false,\"ip\":\"70.9.3.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":6,\"cores\":14,\"hashCapacity\":2048,\"hashRate\":0.9520453916526496,\"level\":43,\"onlineTimeSeconds\":484.39999999998105,\"totalHashesGenerated\":450.7243703213697,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":5.2536,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":230604.25334010096}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":122.613,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":53.8438,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":500,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false,\"EnableHistorySearch\":true}","VersionSave":"33","AllGangsSave":"","LastExportBonus":"1702818052399","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}