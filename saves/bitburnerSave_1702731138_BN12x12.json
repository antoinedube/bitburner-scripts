{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":32,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":213},\"exp\":{\"hacking\":577.1820159951262,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":411631.31658678915},\"mults\":{\"hacking_chance\":1.6623905990643,\"hacking_speed\":1.6623905990643,\"hacking_money\":1.6623905990643,\"hacking_grow\":1.6623905990643,\"hacking\":1.6623905990643,\"strength\":1.6623905990643,\"defense\":1.6623905990643,\"dexterity\":1.6623905990643,\"agility\":1.6623905990643,\"charisma\":2.360594650671306,\"hacking_exp\":1.6623905990643,\"strength_exp\":1.6623905990643,\"defense_exp\":1.6623905990643,\"dexterity_exp\":1.6623905990643,\"agility_exp\":1.6623905990643,\"charisma_exp\":1.4582373676002631,\"company_rep\":1.4582373676002631,\"faction_rep\":1.4582373676002631,\"crime_money\":2.0706970619923735,\"crime_success\":2.0706970619923735,\"hacknet_node_money\":4.450151734517701,\"hacknet_node_purchase_cost\":0.4144382863021421,\"hacknet_node_ram_cost\":0.5417493938590092,\"hacknet_node_core_cost\":0.5417493938590092,\"hacknet_node_level_cost\":0.4604869847801578,\"work_money\":1.6623905990643,\"bladeburner_max_stamina\":1.1400000000000001,\"bladeburner_stamina_gain\":1.1400000000000001,\"bladeburner_analysis\":1.1400000000000001,\"bladeburner_success_chance\":1.1400000000000001},\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":13},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":12,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"nectar-net\",\"factions\":[],\"factionInvitations\":[],\"hacknetNodes\":[],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Rothman University\",\"money\":-40551,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-41664,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":-41664,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-36866688,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":1604537161.1114728,\"hacknet\":55901403367.31125,\"hacknet_expenses\":-13408761003.142124,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":213403712.36298922,\"work\":0,\"servers\":-42405529413.103806,\"other\":-314200000,\"augmentations\":-1127179711.8137856}},\"playtimeSinceLastAug\":128800,\"playtimeSinceLastBitnode\":130259000,\"lastAugReset\":1702731009092,\"lastNodeReset\":1702600878706,\"purchasedServers\":[],\"scriptProdSinceLastAug\":0,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":179},\"exp\":{\"hacking\":0,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":142067.42944290765},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveRecoveryWork\",\"data\":{\"type\":\"RECOVERY\"}},\"memory\":100,\"shock\":53.74884924301083,\"storedCycles\":508450,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":176},\"exp\":{\"hacking\":0,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":128719.45344066303},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveRecoveryWork\",\"data\":{\"type\":\"RECOVERY\"}},\"memory\":100,\"shock\":53.794481202788745,\"storedCycles\":508450,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":176},\"exp\":{\"hacking\":0,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":128682.05988337383},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveRecoveryWork\",\"data\":{\"type\":\"RECOVERY\"}},\"memory\":100,\"shock\":53.794481202788745,\"storedCycles\":508450,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":176},\"exp\":{\"hacking\":0,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":128682.83139255909},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveRecoveryWork\",\"data\":{\"type\":\"RECOVERY\"}},\"memory\":100,\"shock\":53.794481202788745,\"storedCycles\":508450,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":173},\"exp\":{\"hacking\":0,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":117729.12392306191},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveRecoveryWork\",\"data\":{\"type\":\"RECOVERY\"}},\"memory\":100,\"shock\":53.84026900000613,\"storedCycles\":508450,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":173},\"exp\":{\"hacking\":0,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":117862.62575957252},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveRecoveryWork\",\"data\":{\"type\":\"RECOVERY\"}},\"memory\":100,\"shock\":53.84026900000613,\"storedCycles\":508450,\"sync\":100}}],\"sleevesFromCovenant\":3,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,3],[2,3],[3,3],[4,3],[5,3],[10,3],[9,3],[12,11],[6,3],[7,3]]},\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1662043985194},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1662055145998},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1662059766003},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1662066426141},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1662123294982},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1662473253800},{\"ID\":\"NITESEC\",\"unlockedOn\":1662586146115},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1662599826142},{\"ID\":\"DONATION\",\"unlockedOn\":1663589558449},{\"ID\":\"NS2\",\"unlockedOn\":1664451835859},{\"ID\":\"FROZE\",\"unlockedOn\":1664473094691},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1664552329001},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1664798852132},{\"ID\":\"TOR\",\"unlockedOn\":1665066056909},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1665074458530},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1665081718922},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1665334933764},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1665766590313},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1665837400497},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1665874707261},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1665939874779},{\"ID\":\"WORKOUT\",\"unlockedOn\":1665946235177},{\"ID\":\"TRAVEL\",\"unlockedOn\":1666024890747},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1666127536448},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1666177601953},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1666201654675},{\"ID\":\"SF1.1\",\"unlockedOn\":1666396556449},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1668533490192},{\"ID\":\"GANG\",\"unlockedOn\":1668867250197},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1668954907599},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1668955027612},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1669208876810},{\"ID\":\"SF2.1\",\"unlockedOn\":1669423716199},{\"ID\":\"CORPORATION\",\"unlockedOn\":1669431816190},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1671198038341},{\"ID\":\"SF3.1\",\"unlockedOn\":1671300458277},{\"ID\":\"CHALLENGE_BN1\",\"unlockedOn\":1671822590337},{\"ID\":\"SF4.1\",\"unlockedOn\":1674137591582},{\"ID\":\"SF5.1\",\"unlockedOn\":1675551633160},{\"ID\":\"N00DLES\",\"unlockedOn\":1677761263550},{\"ID\":\"SF10.1\",\"unlockedOn\":1680550899708},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1683499237184},{\"ID\":\"KARMA_1000000\",\"unlockedOn\":1683585524648},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1686441026190},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1686518683455},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1686519223506},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1688038167678},{\"ID\":\"ALL_HACKNET_SERVER\",\"unlockedOn\":1688038167687},{\"ID\":\"MAX_HACKNET_SERVER\",\"unlockedOn\":1688038167689},{\"ID\":\"SF9.1\",\"unlockedOn\":1688302024803},{\"ID\":\"NEUROFLUX_255\",\"unlockedOn\":1689366941906},{\"ID\":\"FAST_BN\",\"unlockedOn\":1689431425450},{\"ID\":\"SF12.1\",\"unlockedOn\":1689714316805},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1696862815306},{\"ID\":\"SF6.1\",\"unlockedOn\":1697665718942},{\"ID\":\"SF7.1\",\"unlockedOn\":1699191969386},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1701305531389}],\"terminalCommandHistory\":[\"run bootstrap.js \",\"nano spend-hashes.js \",\"home\",\"nano buy-servers.js \",\"run list-player-karma.js \",\"nano spend-hashes.js \",\"run bootstrap.js \",\"home\",\"run list-player-karma.js \",\"home\",\"run list-player-karma.js \",\"run fetch-scripts.js \",\"top\",\"run buy-servers.js \",\"top\",\"run delete-servers.js \",\"run buy-servers.js \",\"nano buy-servers.js \",\"run fetch-scripts.js \",\"nano buy-servers.js \",\"run buy-servers.js \",\"run fetch-scripts.js \",\"nano buy-servers.js \",\"run buy-servers.js \",\"run fetch-scripts.js \",\"run bootstrap.js \",\"nano buy-hacknet-server.js\",\"nano buy-hacknet-server.js fetch-scripts.js \",\"mv buy-hacknet-server.js buy-hacknet-servers.js\",\"nano buy-hacknet-servers.js buy-hacknet-nodes.js \",\"rm buy-hacknet-nodes.js \",\"nano bootstrap.js fetch-scripts.js buy-hacknet-servers.js \",\"run bootstrap.js \",\"home ; nano spend-hashes.js \",\"run spend-hashes.js \",\"nano bootstrap.js fetch-scripts.js spend-hashes.js \",\"run fetch-scripts.js \",\"connect The-Cave \",\"scan\",\"home\",\"run bootstrap.js \",\"connect The-Cave \",\"connect w0r1d_d43m0n \",\"analyze \",\"hack\",\"run bootstrap.js \",\"run fetch-scripts.js \",\"cat bootstrap.js \",\"nano spend-hashes.js buy-hacknet-servers.js buy-servers.js \",\"run bootstrap.js \"],\"lastUpdate\":1702731137766,\"lastSave\":1702731125167,\"totalPlaytime\":40687523400,\"currentWork\":{\"ctor\":\"ClassWork\",\"data\":{\"type\":\"CLASS\",\"singularity\":true,\"cyclesWorked\":217,\"earnings\":{\"money\":-41664,\"reputation\":0,\"hackExp\":577.1820159951262,\"strExp\":0,\"defExp\":0,\"dexExp\":0,\"agiExp\":0,\"chaExp\":0,\"intExp\":0.8680000000000007},\"classType\":\"Algorithms\",\"location\":\"Rothman University\"}},\"focus\":true,\"entropy\":0,\"identifier\":\"10c510f1398e51\",\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"Bladeburners\",\"Shadows of Anarchy\"]}}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"5.0.5.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\",\"fl1ght.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"launch-hacking.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork, buildPath } from \\\"./scan.js\\\";\\nimport { buildHackingProgramList, countAvailablePrograms } from \\\"./hacking-programs.js\\\";\\n\\n/** @param {NS} ns */\\nasync function openPorts(ns, hackingPrograms, target) {\\n\\tfor (const program of hackingPrograms) {\\n\\t\\tif (ns.fileExists(program.executableName, \\\"home\\\")) {\\n\\t\\t\\tconst executable = program['functionName'].bind(ns);\\n\\t\\t\\tawait executable(target);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction launchScript(ns, script, server) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\tconst scriptNumThreads = ~~(availableRam / scriptRam);\\n\\n\\tif (scriptNumThreads > 0) {\\n\\t\\tns.exec(script, server, scriptNumThreads);\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tconst replace = false;  // Replace an existing script\\n\\n\\twhile (true) {\\n\\t\\tconst fullServerList = scanAllNetwork(ns, 'home');\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tfor (const server of filteredServerList) {\\n\\t\\t\\tns.print(`Current server: ${server}`);\\n\\n\\t\\t\\tconst playerHackingLevel = ns.getHackingLevel();\\n\\t\\t\\tconst hackingPrograms = buildHackingProgramList(ns);\\n\\t\\t\\tconst numberAvailablePrograms = countAvailablePrograms(ns, hackingPrograms);\\n\\n\\t\\t\\t// Check server level vs player level\\n\\t\\t\\tconst machineHackingLevel = ns.getServerRequiredHackingLevel(server);\\n\\t\\t\\tns.print(`Level player: ${playerHackingLevel}, level machine: ${machineHackingLevel}`);\\n\\n\\t\\t\\t// Check number of ports required vs number of programs available\\n\\t\\t\\tconst requiredNumberOfPorts = ns.getServerNumPortsRequired(server);\\n\\t\\t\\tns.print(`Required num ports: ${requiredNumberOfPorts}, number available programs: ${numberAvailablePrograms}`);\\n\\n\\t\\t\\tif (playerHackingLevel < machineHackingLevel) {\\n\\t\\t\\t\\tns.print('----------\\\\n');\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (numberAvailablePrograms < requiredNumberOfPorts) {\\n\\t\\t\\t\\tns.print('----------\\\\n');\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!ns.hasRootAccess(server)) {\\n\\t\\t\\t\\tawait openPorts(ns, hackingPrograms, server);\\n\\t\\t\\t\\tns.nuke(server);\\n\\n\\t\\t\\t\\tif (server == 'w0r1d_d43m0n') {\\n\\t\\t\\t\\t\\tns.tprint('w0r1d_d43m0n is now root-accessible');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.print(`hasRootAccess: ${ns.hasRootAccess(server)}`);\\n\\n\\t\\t\\tconst isBackdoorInstalled = ns.getServer(server).backdoorInstalled;\\n\\t\\t\\tns.print(`isBackdoorInstalled: ${isBackdoorInstalled}`);\\n\\t\\t\\tif (ns.hasRootAccess(server) && !isBackdoorInstalled && server != 'w0r1d_d43m0n') {\\n\\t\\t\\t\\tconst path = await buildPath(ns, server);\\n\\t\\t\\t\\tfor (let item of path) {\\n\\t\\t\\t\\t\\t// ns.print(`Connecting to ${item} from ${ns.singularity.getCurrentServer()}`);\\n\\t\\t\\t\\t\\tif (!ns.singularity.connect(item)) {\\n\\t\\t\\t\\t\\t\\tns.print(`Error while connecting to ${item}`);\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tns.print('Installing backdoor');\\n\\t\\t\\t\\tawait ns.singularity.installBackdoor();\\n\\t\\t\\t\\tns.print('Backdoor installed');\\n\\n\\t\\t\\t\\tfor (let item of path.reverse()) {\\n\\t\\t\\t\\t\\tif (!ns.singularity.connect(item)) {\\n\\t\\t\\t\\t\\t\\tns.print(`Error while connecting to ${item}`);\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (replace) {\\n\\t\\t\\t\\tns.killall(server);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (replace || !ns.fileExists('hack-server.js', server)) {\\n\\t\\t\\t\\tconst scpStatus = ns.scp('hack-server.js', server, 'home');\\n\\t\\t\\t\\tif (!scpStatus) {\\n\\t\\t\\t\\t\\tns.print(`Failed to copy hack-server.js on ${server}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!ns.isRunning('hack-server.js', server)) {\\n\\t\\t\\t\\tlaunchScript(ns, 'hack-server.js', server);\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.print('----------\\\\n');\\n\\t\\t}\\n\\n\\t\\tif (replace) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000 * 5);\\n\\t}\\n}\\n\",\"filename\":\"launch-hacking.js\",\"server\":\"home\"}}],[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"home\"}}],[\"list-server-prices.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tfor (let i = 2; i < 21; i++) {\\n\\t\\tconst serverRam = Math.pow(2.0, i);\\n\\t\\tconst serverCost = ns.getPurchasedServerCost(serverRam);\\n\\t\\tns.tprint(`Server ram: ${serverRam}`);\\n\\t\\tns.tprint(`Server cost: ${formatNumber(serverCost)}\\\\$`);\\n\\t\\tns.tprint(\\\"\\\\n\\\");\\n\\t}\\n}\\n\",\"filename\":\"list-server-prices.js\",\"server\":\"home\"}}],[\"scan.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport function scanAllNetwork(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nexport async function buildPath(ns, server) {\\n\\tlet pathList = [['home']];\\n\\n\\twhile (true) {\\n\\t\\tconst currentPath = pathList.pop();\\n\\t\\tconst lastItem = currentPath.pop();\\n\\t\\tconst neighbors = ns.scan(lastItem);\\n\\t\\tconst neighborsWithoutServers = neighbors.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-') && !currentPath.includes(name));\\n\\n\\t\\tfor (let neighbor of neighborsWithoutServers) {\\n\\t\\t\\tlet newPath = currentPath.slice();\\n\\t\\t\\tnewPath.push(lastItem);\\n\\t\\t\\tnewPath.push(neighbor);\\n\\n\\t\\t\\tif (neighbor == server) {\\n\\t\\t\\t\\treturn newPath;\\n\\t\\t\\t}\\n\\n\\t\\t\\tpathList.unshift(newPath);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(250);  // Just so that the editor does not complain...\\n\\t}\\n}\\n\",\"filename\":\"scan.js\",\"server\":\"home\"}}],[\"buy-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan\\\";\\n\\nfunction generateUUID() {\\n\\t// https://stackoverflow.com/questions/105034/how-do-i-create-a-guid-uuid\\n\\t// crypto.randomUUID();\\n\\t// crypto.getRandomValues();\\n}\\n\\n/** @param {NS} ns */\\nfunction launchScript(ns, scriptName, server) {\\n\\tconst scpStatus = ns.scp(scriptName, server, 'home');\\n\\tif (!scpStatus) {\\n\\t\\tns.print('Failed to copy ' + scriptName + ' on ' + server);\\n\\t}\\n\\n\\tns.killall(server);\\n\\n\\tconst maxRam = ns.getServerMaxRam(server);\\n\\tconst usedRam = ns.getServerUsedRam(server);\\n\\tconst availableRam = maxRam - usedRam;\\n\\tconst scriptRam = ns.getScriptRam(scriptName, server);\\n\\tconst numThreads = Math.floor(availableRam / scriptRam);\\n\\tif (numThreads > 0) {\\n\\t\\tif (ns.exec(scriptName, server, numThreads) == 0) {\\n\\t\\t\\tns.print('Error launching script');\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst BUYING_DELAY = 250;\\n\\tconst UPGRADING_DELAY = 5 * 1000;\\n\\tconst FOLLOWING_BATCH_DELAY = 1000 * 60 * 5;\\n\\tconst HOME_SERVER = 'home';\\n\\n\\tlet targetRam = 4;\\n\\twhile (targetRam <= ns.getPurchasedServerMaxRam()) {\\n\\t\\tconst maxNumberOfServers = ns.getPurchasedServerLimit();\\n\\t\\tconst availableMoney = ns.getServerMoneyAvailable('home');\\n\\t\\tconst serverCost = ns.getPurchasedServerCost(targetRam);\\n\\n\\t\\tif (availableMoney < maxNumberOfServers * serverCost) {\\n\\t\\t\\ttargetRam /= 2;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\ttargetRam *= 2;\\n\\t}\\n\\n\\tif (targetRam < 8) {\\n\\t\\ttargetRam = 8;\\n\\t}\\n\\n\\tns.print(`Starting target ram: ${targetRam}`);\\n\\n\\t// Purchase missing servers\\n\\twhile (true) {\\n\\t\\t// List current servers\\n\\t\\tconst serverList = scanAllNetwork(ns);\\n\\t\\tlet purchasedServers = serverList.filter(name => name.startsWith('neighbor-'));\\n\\n\\t\\t// Stopping criteria\\n\\t\\tif (purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// If limit is not reached, buy server at current targetRam\\n\\t\\tif (ns.getPurchasedServerCost(targetRam) < ns.getServerMoneyAvailable(HOME_SERVER)) {\\n\\t\\t\\tconst name = `neighbor-${purchasedServers.length}`;\\n\\t\\t\\tns.print(`Purchasing server ${name}`);\\n\\t\\t\\tns.purchaseServer(name, targetRam);\\n\\t\\t\\tpurchasedServers.push(name);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(BUYING_DELAY);\\n\\t}\\n\\n\\tconst purchasedServers = scanAllNetwork(ns).filter(name => name.startsWith('neighbor-'));\\n\\tns.print(`Purchased servers: ${purchasedServers}`);\\n\\n\\ttargetRam *= 2;\\n\\twhile (true) {\\n\\t\\t// Stopping criteria\\n\\t\\tlet countServerWithTargetRam = 0;\\n\\t\\tfor (const purchasedServer of purchasedServers) {\\n\\t\\t\\tconst purchasedServerRam = ns.getServer(purchasedServer).maxRam;\\n\\t\\t\\tif (purchasedServerRam >= targetRam) {\\n\\t\\t\\t\\tcountServerWithTargetRam++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tns.print(`Number of servers at target (target: ${ns.formatRam(targetRam)} / max: ${ns.formatRam(ns.getPurchasedServerMaxRam())}): ${countServerWithTargetRam} vs ${ns.getPurchasedServerLimit()}`);\\n\\t\\tif (countServerWithTargetRam == ns.getPurchasedServerLimit()) {\\n\\t\\t\\tif (targetRam >= ns.getPurchasedServerMaxRam()) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\ttargetRam *= 2;\\n\\n\\t\\t\\tawait ns.sleep(FOLLOWING_BATCH_DELAY);\\n\\t\\t}\\n\\n\\t\\tfor (const purchasedServer of purchasedServers) {\\n\\t\\t\\tconst purchasedServerRam = ns.getServer(purchasedServer).maxRam;\\n\\t\\t\\tif (purchasedServerRam < targetRam) {\\n\\t\\t\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable('home');\\n\\t\\t\\t\\tconst upgradeCost = ns.getPurchasedServerUpgradeCost(purchasedServer, targetRam);\\n\\t\\t\\t\\tif (upgradeCost < moneyAvailable) {\\n\\t\\t\\t\\t\\tif (ns.upgradePurchasedServer(purchasedServer, targetRam)) {\\n\\t\\t\\t\\t\\t\\tns.print(`Upgraded ${purchasedServer} to ${targetRam}Gb with cost of ${ns.formatNumber(upgradeCost)}\\\\$`);\\n\\t\\t\\t\\t\\t\\tlaunchScript(ns, 'hack-remote.js', purchasedServer);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tns.print(`Error while upgrading purchased server ${purchasedServer} to ${targetRam}Gb`);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(UPGRADING_DELAY);\\n\\t}\\n}\\n\",\"filename\":\"buy-servers.js\",\"server\":\"home\"}}],[\"delete-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst fullServerList = scanAllNetwork(ns);\\n\\tconst serverList = fullServerList.filter(name => name.startsWith('neighbor-'));\\n\\n\\tfor (const server of serverList) {\\n\\t\\tns.tprint('Deleting: ' + server);\\n\\t\\tns.killall(server);\\n\\t\\tns.deleteServer(server);\\n\\t}\\n}\\n\",\"filename\":\"delete-servers.js\",\"server\":\"home\"}}],[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"home\"}}],[\"list-server-money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst fullServerList = scanAllNetwork(ns);\\n\\tconst serverList = fullServerList.filter(name => !name.startsWith('neighbor-'));\\n\\n\\tfor (let server of serverList) {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(server);\\n\\t\\tconst maxMoneyAvailable = ns.getServerMaxMoney(server);\\n\\n\\t\\tns.tprint(`Server: ${server} --> ${ns.formatNumber(moneyAvailable)}\\\\$ / ${ns.formatNumber(maxMoneyAvailable)}\\\\$`);\\n\\t}\\n}\\n\",\"filename\":\"list-server-money.js\",\"server\":\"home\"}}],[\"fetch-scripts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    if (ns.getHostname() !== \\\"home\\\") {\\n        throw new Exception(\\\"Run the script from home\\\");\\n    }\\n\\n    const scripts = [\\n        'bootstrap.js',\\n        'buy-darkweb-programs.js',\\n        'buy-hacknet-servers.js',\\n        'buy-servers.js',\\n        'delete-servers.js',\\n        'fetch-scripts.js',\\n        'hack-remote.js',\\n        'hack-server.js',\\n        'hacking-programs.js',\\n        'launch-hacking.js',\\n        'list-player-karma.js',\\n        'list-server-money.js',\\n        'list-server-prices.js',\\n        'list-server-security-level.js',\\n        'manage-bladeburner.js',\\n        'manage-corporation.js',\\n        'manage-gang.js',\\n        'manage-sleeves.js',\\n        'scan.js',\\n        'spend-hashes.js'\\n    ];\\n\\n    for (const scriptName of scripts) {\\n        ns.tprint(`Fetching: ${scriptName}`);\\n        await ns.wget(\\n            `https://raw.githubusercontent.com/antoinedube/bitburner-scripts/main/scripts/${scriptName}`,\\n            `${scriptName}`\\n        );\\n\\n        await ns.sleep(250);\\n    }\\n}\\n\",\"filename\":\"fetch-scripts.js\",\"server\":\"home\"}}],[\"list-player-karma.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst karma = ns.heart.break();\\n\\tns.tprint(`karma: ${karma.toFixed(2)}`);\\n}\\n\",\"filename\":\"list-player-karma.js\",\"server\":\"home\"}}],[\"list-server-security-level.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst fullServerList = scanAllNetwork(ns);\\n\\tconst serverList = fullServerList.filter(name => !name.startsWith('neighbor-'));\\n\\n\\tfor (let server of serverList) {\\n\\t\\tconst currentSecurityLevel = ns.getServerSecurityLevel(server);\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(server)\\n\\n\\t\\tns.tprint(`Server: ${server} --> ${ns.formatNumber(currentSecurityLevel)} / ${ns.formatNumber(minSecurityLevel)}`);\\n\\t}\\n}\\n\",\"filename\":\"list-server-security-level.js\",\"server\":\"home\"}}],[\"bootstrap.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const scripts = [\\n        'launch-hacking.js',\\n        'spend-hashes.js',\\n        'buy-hacknet-servers.js',\\n        'buy-servers.js',\\n        'manage-sleeves.js',\\n        'manage-gang.js',\\n        'buy-darkweb-programs.js',\\n        /* 'manage-bladeburner.js' */\\n    ];\\n\\n    if (ns.isRunning('hack-remote.js')) {\\n        ns.kill('hack-remote.js', 'home');\\n    }\\n\\n    for (let script of scripts) {\\n        if (!ns.isRunning(script)) {\\n            ns.tprint(`Launching script: ${script}`);\\n            ns.run(script);\\n\\n            await ns.sleep(250);\\n        }\\n    }\\n\\n    await ns.sleep(2 * 1000);\\n\\n    const hackingScript = 'hack-remote.js';\\n    const scriptRam = ns.getScriptRam(hackingScript);\\n    const serverMaxRam = ns.getServerMaxRam('home');\\n    const serverUsedRam = ns.getServerUsedRam('home');\\n    const availableRam = serverMaxRam - serverUsedRam;\\n    const scriptNumThreads = ~~(availableRam / scriptRam);\\n\\n    if (scriptNumThreads > 0) {\\n        ns.tprint(`Launching script: ${hackingScript} with ${scriptNumThreads} threads`);\\n        ns.exec(hackingScript, 'home', scriptNumThreads);\\n    }\\n\\n    if (!ns.bladeburner.inBladeburner()) {\\n        ns.singularity.universityCourse('Rothman University', 'Algorithms');\\n    }\\n}\\n\",\"filename\":\"bootstrap.js\",\"server\":\"home\"}}],[\"manage-gang.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction displayMembersInformation(ns, memberName) {\\n\\tconst memberInfo = ns.gang.getMemberInformation(memberName);\\n\\tconst hackingLevel = memberInfo['hack'];\\n\\tconst currentTask = memberInfo['task'];\\n\\tns.print(`Member: ${memberName}\\\\thacking level: ${hackingLevel}\\\\ttask: ${currentTask}`);\\n}\\n\\n/** @param {NS} ns */\\nfunction assignMember(ns, name, task = '') {\\n\\tconst memberInfo = ns.gang.getMemberInformation(name);\\n\\tconst hackingLevel = memberInfo['hack'];\\n\\tconst currentTask = memberInfo['task'];\\n\\n\\t/*\\n\\tTask names:\\n\\t\\t\\t- Unassigned\\n\\t\\t\\t- Ransomware\\n\\t\\t\\t- Phishing\\n\\t\\t\\t- Identity Theft\\n\\t\\t\\t- DDoS Attacks\\n\\t\\t\\t- Plant Virus\\n\\t\\t\\t- Fraud & Counterfeiting,\\n\\t\\t\\t- Money Laundering\\n\\t\\t\\t- Cyberterrorism\\n\\t\\t\\t- Ethical Hacking\\n\\t\\t\\t- Vigilante Justice\\n\\t\\t\\t- Train Combat\\n\\t\\t\\t- Train Hacking\\n\\t\\t\\t- Train Charisma\\n\\t\\t\\t- Territory Warfare\\n\\t*/\\n\\tif (task != '') {\\n\\t\\tif (currentTask != task) {\\n\\t\\t\\tns.gang.setMemberTask(name, task);\\n\\t\\t}\\n\\t} else if (hackingLevel < 120) {\\n\\t\\tif (currentTask != 'Cyberterrorism') {\\n\\t\\t\\tns.gang.setMemberTask(name, 'Cyberterrorism');\\n\\t\\t}\\n\\t} else {\\n\\t\\tif (currentTask != 'Money Laundering') {\\n\\t\\t\\tns.gang.setMemberTask(name, 'Money Laundering');\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction recruitIfPossible(ns) {\\n\\tif (!ns.gang.canRecruitMember()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst gangMembers = ns.gang.getMemberNames();\\n\\tconst newGangMemberName = `audrey-${gangMembers.length + 1}`;\\n\\tns.gang.recruitMember(newGangMemberName);\\n\\tassignMember(ns, newGangMemberName);\\n}\\n\\n/** @param {NS} ns */\\nfunction reassignMembersAccordingToWantedLevelPenalty(ns) {\\n\\tconst gangInformation = ns.gang.getGangInformation();\\n\\t/*\\n\\tGang information structure:\\n\\t{\\n\\t\\t\\t\\\"faction\\\":\\\"NiteSec\\\",\\n\\t\\t\\t\\\"isHacking\\\":true,\\n\\t\\t\\t\\\"moneyGainRate\\\":213.18959642323077,\\n\\t\\t\\t\\\"power\\\":1,\\n\\t\\t\\t\\\"respect\\\":846.631799960249,\\n\\t\\t\\t\\\"respectGainRate\\\":0,\\n\\t\\t\\t\\\"territory\\\":0.14285714285714293,\\n\\t\\t\\t\\\"territoryClashChance\\\":0,\\n\\t\\t\\t\\\"territoryWarfareEngaged\\\":false,\\n\\t\\t\\t\\\"wantedLevel\\\":310.2473419438491,\\n\\t\\t\\t\\\"wantedLevelGainRate\\\":-0.025302857142857158,\\n\\t\\t\\t\\\"wantedPenalty\\\":0.7318238952487159\\n\\t}\\n\\t*/\\n\\n\\tconst wantedLevelPenalty = 1.0 - gangInformation['wantedPenalty'];\\n\\tconst gangRespect = gangInformation['respect'];\\n\\tif (wantedLevelPenalty > 0.25 && gangRespect > 50) {\\n\\t\\tns.gang.getMemberNames().map(memberName => {\\n\\t\\t\\tassignMember(ns, memberName, 'Ethical Hacking');\\n\\t\\t});\\n\\t} else {\\n\\t\\tns.gang.getMemberNames().map(memberName => {\\n\\t\\t\\tassignMember(ns, memberName);\\n\\t\\t});\\n\\t}\\n}\\n\\nfunction ascendIfGainIsWorth(ns) {\\n\\tns.gang.getMemberNames().map(memberName => {\\n\\t\\tconst results = ns.gang.getAscensionResult(memberName);\\n\\n\\t\\tif (results === undefined) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst hackingMultWithAscension = results['hack'];\\n\\n\\t\\tif (hackingMultWithAscension > 2.0) {\\n\\t\\t\\tns.gang.ascendMember(memberName);\\n\\t\\t\\tassignMember(ns, memberName);\\n\\t\\t}\\n\\t});\\n}\\n\\nfunction buyEquipment(ns) {\\n\\t/*\\n\\t\\t\\t[\\n\\t\\t\\t\\t\\t\\\"Baseball Bat\\\",\\n\\t\\t\\t\\t\\t\\\"Katana\\\",\\n\\t\\t\\t\\t\\t\\\"Glock 18C\\\",\\n\\t\\t\\t\\t\\t\\\"P90C\\\",\\n\\t\\t\\t\\t\\t\\\"Steyr AUG\\\",\\n\\t\\t\\t\\t\\t\\\"AK-47\\\",\\n\\t\\t\\t\\t\\t\\\"M15A10 Assault Rifle\\\",\\n\\t\\t\\t\\t\\t\\\"AWM Sniper Rifle\\\",\\n\\t\\t\\t\\t\\t\\\"Bulletproof Vest\\\",\\n\\t\\t\\t\\t\\t\\\"Full Body Armor\\\",\\n\\t\\t\\t\\t\\t\\\"Liquid Body Armor\\\",\\n\\t\\t\\t\\t\\t\\\"Graphene Plating Armor\\\",\\n\\t\\t\\t\\t\\t\\\"Ford Flex V20\\\",\\n\\t\\t\\t\\t\\t\\\"ATX1070 Superbike\\\",\\n\\t\\t\\t\\t\\t\\\"Mercedes-Benz S9001\\\",\\n\\t\\t\\t\\t\\t\\\"White Ferrari\\\",\\n\\t\\t\\t\\t\\t\\\"NUKE Rootkit\\\",\\n\\t\\t\\t\\t\\t\\\"Soulstealer Rootkit\\\",\\n\\t\\t\\t\\t\\t\\\"Demon Rootkit\\\",\\n\\t\\t\\t\\t\\t\\\"Hmap Node\\\",\\n\\t\\t\\t\\t\\t\\\"Jack the Ripper\\\",\\n\\t\\t\\t\\t\\t\\\"Bionic Arms\\\",\\n\\t\\t\\t\\t\\t\\\"Bionic Legs\\\",\\n\\t\\t\\t\\t\\t\\\"Bionic Spine\\\",\\n\\t\\t\\t\\t\\t\\\"BrachiBlades\\\",\\n\\t\\t\\t\\t\\t\\\"Nanofiber Weave\\\",\\n\\t\\t\\t\\t\\t\\\"Synthetic Heart\\\",\\n\\t\\t\\t\\t\\t\\\"Synfibril Muscle\\\",\\n\\t\\t\\t\\t\\t\\\"BitWire\\\",\\n\\t\\t\\t\\t\\t\\\"Neuralstimulator\\\",\\n\\t\\t\\t\\t\\t\\\"DataJack\\\",\\n\\t\\t\\t\\t\\t\\\"Graphene Bone Lacings\\\"\\n\\t\\t\\t\\t\\t]\\n\\t*/\\n\\tconst hackingUpgrades = ['NUKE Rootkit', 'Soulstealer Rootkit', 'Demon Rootkit', 'Hmap Node', 'Jack the Ripper'];\\n\\tconst hackingAugmentations = ['BitWire', 'Neuralstimulator', 'DataJack'];\\n\\n\\tns.gang.getMemberNames().map(memberName => {\\n\\t\\tconst memberInfo = ns.gang.getMemberInformation(memberName);\\n\\t\\tconst memberHackingUpgrade = memberInfo['upgrades'];\\n\\t\\tconst memberHackingAugmentations = memberInfo['augmentations'];\\n\\n\\t\\thackingUpgrades.map(upgrade => {\\n\\t\\t\\tif (!memberHackingUpgrade.includes(upgrade) && ns.gang.getEquipmentCost(upgrade) < ns.getServerMoneyAvailable('home')) {\\n\\t\\t\\t\\tns.gang.purchaseEquipment(memberName, upgrade);\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\thackingAugmentations.map(augmentation => {\\n\\t\\t\\tif (!memberHackingAugmentations.includes(augmentation) && ns.gang.getEquipmentCost(augmentation) < ns.getServerMoneyAvailable('home')) {\\n\\t\\t\\t\\tns.gang.purchaseEquipment(memberName, augmentation);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t});\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tlet counter = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!ns.gang.inGang()) {\\n\\t\\t\\tns.print(`Not in gang. Waiting.`);\\n\\t\\t\\tawait ns.sleep(1000 * 60);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.gang.getMemberNames().map(memberName => displayMembersInformation(ns, memberName));\\n\\n\\t\\trecruitIfPossible(ns);\\n\\t\\tascendIfGainIsWorth(ns);\\n\\t\\treassignMembersAccordingToWantedLevelPenalty(ns);\\n\\t\\tbuyEquipment(ns);\\n\\n\\t\\tif (counter >= 25) {\\n\\t\\t\\tns.gang.getMemberNames().map(memberName => assignMember(ns, memberName));\\n\\t\\t\\tcounter = 0;\\n\\t\\t} else if (counter >= 23) {\\n\\t\\t\\tns.gang.getMemberNames().map(memberName => assignMember(ns, memberName, 'Ethical Hacking'));\\n\\t\\t}\\n\\n\\t\\tcounter++;\\n\\t\\tawait ns.sleep(1000 * 30);\\n\\t}\\n}\\n\",\"filename\":\"manage-gang.js\",\"server\":\"home\"}}],[\"manage-sleeves.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nasync function setSleevesTask(ns) {\\n\\tfor (var i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\tconst sleeve = ns.sleeve.getSleeve(i);\\n\\t\\tns.print(`Sleeve ${i} has:`);\\n\\t\\tns.print(`- sync=${sleeve.sync}`);\\n\\t\\tns.print(`- shock=${sleeve.shock}`);\\n\\t\\tns.print(`--------------------------------------------`);\\n\\n\\t\\tif (sleeve.sync < 100) {\\n\\t\\t\\tns.print('Synchronize');\\n\\t\\t\\tns.sleeve.setToSynchronize(i);\\n\\t\\t} else if (sleeve.shock > 0) {\\n\\t\\t\\tns.print('Shock recovery');\\n\\t\\t\\tns.sleeve.setToShockRecovery(i);\\n\\t\\t} else {\\n\\t\\t\\tns.print('Manual task');\\n\\t\\t\\t// Ref: https://github.com/danielyxie/bitburner/blob/dev/src/Enums.ts\\n\\t\\t\\t// ns.sleeve.setToCommitCrime(i, 'Assassination');\\n\\t\\t\\t// ns.sleeve.setToCommitCrime(i, 'Heist');\\n\\t\\t\\tns.sleeve.setToCommitCrime(i, 'Mug');\\n\\t\\t\\t// ns.sleeve.setToCommitCrime(i, 'Homicide');\\n\\t\\t\\t// ns.sleeve.setToUniversityCourse(i, 'Rothman University', 'Computer Science');\\n\\t\\t\\t// ns.sleeve.setToUniversityCourse(i, 'Rothman University', 'Algorithms');\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\n\\twhile (true) {\\n\\t\\tawait setSleevesTask(ns);\\n\\n\\t\\tawait ns.sleep(1000 * 15);\\n\\t}\\n}\\n\",\"filename\":\"manage-sleeves.js\",\"server\":\"home\"}}],[\"spend-hashes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nasync function spendHashesOnAction(ns, action, target, amount) {\\n\\twhile (ns.hacknet.numHashes() < ns.hacknet.hashCost(action, amount)) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\n\\tif (!ns.hacknet.spendHashes(action, target, amount)) {\\n\\t\\tns.print(`Error while executing ${action} on ${target} with n=${amount}`);\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction selectRandomServer(ns) {\\n\\tconst serversToAvoid = ['CSEC', 'I.I.I.I', 'run4theh111z', 'avmnite-02h', 'The-Cave', 'w0r1d_d43m0n'];\\n\\n\\tconst fullServerList = scanAllNetwork(ns, 'home');\\n\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-') && !serversToAvoid.includes(name));\\n\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\treturn filteredServerList[serverIndex];\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\t/*\\n\\t\\t\\t\\t\\tconst upgrades = ns.hacknet.getHashUpgrades();\\n\\n\\t\\t\\t\\t\\t[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Sell for Money\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Sell for Corporation Funds\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Reduce Minimum Security\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Increase Maximum Money\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Improve Studying\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Improve Gym Training\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Exchange for Corporation Research\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Exchange for Bladeburner Rank\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Exchange for Bladeburner SP\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Generate Coding Contract\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Company Favor\\\"\\n\\t\\t\\t\\t\\t]\\n\\t*/\\n\\n\\tconst ten_trillions = 10 * 1000 * 1000 * 1000 * 1000;  // k -> m -> g -> t\\n\\tconst low_high_hack_exp_limit = 1500;\\n\\n\\tfor (let i = 0; i < 5; i++) {\\n\\t\\tns.print(`--> Improve studying ${i} of 5`);\\n\\t\\tawait spendHashesOnAction(ns, 'Improve Studying', 'home', 1);\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst r = Math.random();\\n\\t\\tif (r < 0.1) {\\n\\t\\t\\tconst target = selectRandomServer(ns);\\n\\t\\t\\tconst minLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\t\\tif (minLevel > 1.0 && ns.getHackingLevel() > low_high_hack_exp_limit) {\\n\\t\\t\\t\\tawait spendHashesOnAction(ns, \\\"Reduce Minimum Security\\\", target, 1);\\n\\t\\t\\t\\tconst minLevelAfter = ns.getServerMinSecurityLevel(target);\\n\\t\\t\\t\\tns.print(`Reduced minimum security level on ${target} from ${minLevel} to ${minLevelAfter}`);\\n\\t\\t\\t}\\n\\t\\t} else if (r < 0.2) {\\n\\t\\t\\tconst target = selectRandomServer(ns);\\n\\t\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\t\\tif (maxMoney < ten_trillions && ns.getHackingLevel() > low_high_hack_exp_limit) {\\n\\t\\t\\t\\tawait spendHashesOnAction(ns, \\\"Increase Maximum Money\\\", target, 1);\\n\\t\\t\\t\\tconst maxMoneyAfter = ns.getServerMaxMoney(target);\\n\\t\\t\\t\\tns.print(`Increased maximum money on ${target} from ${ns.formatNumber(maxMoney)}\\\\$ to ${ns.formatNumber(maxMoneyAfter)}\\\\$`);\\n\\t\\t\\t}\\n\\t\\t\\t/*\\n\\t\\t\\t} else if (r < 0.3) {\\n\\t\\t\\t\\t\\t\\t\\tif (ns.bladeburner.inBladeburner()) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait spendHashesOnAction(ns, 'Exchange for Bladeburner Rank', 'home', 1);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t} else if (r < 0.4) {\\n\\t\\t\\t\\t\\t\\t\\tif (ns.bladeburner.inBladeburner()) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait spendHashesOnAction(ns, 'Exchange for Bladeburner SP', 'home', 1);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t*/\\n\\t\\t} else {\\n\\t\\t\\tawait spendHashesOnAction(ns, \\\"Sell for Money\\\", \\\"target\\\", 25);\\n\\t\\t\\tns.print(`Sold hashes for money`);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(250);\\n\\t}\\n}\\n\",\"filename\":\"spend-hashes.js\",\"server\":\"home\"}}],[\"manage-bladeburner.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction findNextAction(ns) {\\n\\tconst orderOfTypes = ['Operation', 'Contract', 'General'];\\n\\tconst targetedTasks = {\\n\\t\\t'General': ['Training'],\\n\\t\\t'Contract': ['Tracking', 'Bounty Hunter', 'Retirement'],\\n\\t\\t'Operation': ['Investigation', 'Stealth Retirement Operation', 'Assassination']\\n\\t}\\n\\n\\tconst lowStaminaTask = 'Hyperbolic Regeneration Chamber';\\n\\n\\tconst [currentStamina, maxStamina] = ns.bladeburner.getStamina();\\n\\tconst playerRank = ns.bladeburner.getRank();\\n\\n\\tif (currentStamina < 0.80 * maxStamina) {\\n\\t\\treturn {\\n\\t\\t\\t'type': 'General',\\n\\t\\t\\t'name': lowStaminaTask\\n\\t\\t};\\n\\t}\\n\\n\\t// BlackOps have a special structure\\n\\tconst nextBlackOp = ns.bladeburner.getNextBlackOp();\\n\\tif (nextBlackOp != undefined) {\\n\\n\\t\\tconst [lowerBound, _] = ns.bladeburner.getActionEstimatedSuccessChance('BlackOp', nextBlackOp['name']);\\n\\t\\tif (0.9 < lowerBound && nextBlackOp['rank'] <= playerRank) {\\n\\t\\t\\treturn {\\n\\t\\t\\t\\t'type': 'BlackOp',\\n\\t\\t\\t\\t'name': nextBlackOp['name']\\n\\t\\t\\t};\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let actionType of orderOfTypes) {\\n\\t\\tconst actionNames = targetedTasks[actionType].reverse();\\n\\t\\tfor (let actionName of actionNames) {\\n\\t\\t\\tconst [lowerBound, _] = ns.bladeburner.getActionEstimatedSuccessChance(actionType, actionName);\\n\\t\\t\\tconst countRemaining = ns.bladeburner.getActionCountRemaining(actionType, actionName);\\n\\t\\t\\tif (0.8 < lowerBound && 0 < countRemaining) {\\n\\t\\t\\t\\treturn {\\n\\t\\t\\t\\t\\t'type': actionType,\\n\\t\\t\\t\\t\\t'name': actionName\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn {\\n\\t\\t'type': 'General',\\n\\t\\t'name': 'Training'\\n\\t};\\n}\\n\\n/** @param {NS} ns */\\nfunction upgradeBladeburnerSkills(ns) {\\n\\tconst targetedSkills = [\\n\\t\\t\\\"Blade's Intuition\\\",\\n\\t\\t\\\"Cloak\\\",\\n\\t\\t\\\"Short-Circuit\\\",\\n\\t\\t\\\"Digital Observer\\\",\\n\\t\\t\\\"Tracer\\\",\\n\\t\\t\\\"Hyperdrive\\\",\\n\\t\\t\\\"Hands of Midas\\\"\\n\\t];\\n\\n\\tfor (let skill of targetedSkills) {\\n\\t\\tconst skillCost = ns.bladeburner.getSkillUpgradeCost(skill);\\n\\t\\tconst numberSkillPoints = ns.bladeburner.getSkillPoints();\\n\\t\\tif (skillCost < numberSkillPoints) {\\n\\t\\t\\tns.bladeburner.upgradeSkill(skill);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tconst ten_seconds = 10 * 1000;\\n\\n\\twhile (!ns.bladeburner.inBladeburner()) {\\n\\t\\tns.print('Not in BladeBurner');\\n\\t\\tawait ns.sleep(ten_seconds);\\n\\t}\\n\\n\\tns.print('Managing bladeburner');\\n\\n\\twhile (true) {\\n\\t\\tconst currentAction = ns.bladeburner.getCurrentAction();\\n\\n\\t\\tconst newAction = findNextAction(ns);\\n\\t\\tif (currentAction['type'] != newAction['type'] || currentAction['name'] != newAction['name']) {\\n\\t\\t\\tconst result = ns.bladeburner.startAction(newAction['type'], newAction['name']);\\n\\t\\t\\tif (!result) {\\n\\t\\t\\t\\tns.print(`Unable to start action: ${JSON.stringify(newAction)}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tupgradeBladeburnerSkills(ns);\\n\\t\\tawait ns.sleep(ten_seconds);\\n\\t}\\n}\\n\",\"filename\":\"manage-bladeburner.js\",\"server\":\"home\"}}],[\"hacking-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport function buildHackingProgramList(ns) {\\n\\treturn [\\n\\t\\t{ name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\" },\\n\\t\\t{ name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\" },\\n\\t\\t{ name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\" },\\n\\t\\t{ name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\" },\\n\\t\\t{ name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\" }\\n\\t];\\n}\\n\\n/** @param {NS} ns */\\nexport function listAvailablePrograms(ns, hackingPrograms) {\\n\\tlet availablePrograms = [];\\n\\tfor (const program of hackingPrograms) {\\n\\t\\tif (ns.fileExists(program.executableName, \\\"home\\\")) {\\n\\t\\t\\tavailablePrograms.push(program);\\n\\t\\t}\\n\\t}\\n\\treturn availablePrograms;\\n}\\n\\n/** @param {NS} ns */\\nexport function countAvailablePrograms(ns, hackingPrograms) {\\n\\tconst availablePrograms = listAvailablePrograms(ns, hackingPrograms);\\n\\treturn availablePrograms.length;\\n}\\n\",\"filename\":\"hacking-programs.js\",\"server\":\"home\"}}],[\"buy-darkweb-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const SLEEP_DELAY = 15000;  // in milliseconds\\n    const HOME_SERVER = 'home';\\n    const TOR_ROUTER_PRICE = 200000;\\n\\n    if (!ns.hasTorRouter()) {\\n        ns.print('TOR router not purchased yet');\\n    }\\n\\n    while (!ns.hasTorRouter()) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(HOME_SERVER);\\n\\n        if (TOR_ROUTER_PRICE <= moneyAvailable) {\\n            if (ns.singularity.purchaseTor()) {\\n                ns.print('TOR router purchased');\\n            }\\n        }\\n\\n        await ns.sleep(SLEEP_DELAY);\\n    }\\n\\n    while (true) {\\n        const allHackingPrograms = ns.singularity.getDarkwebPrograms();\\n        const purchasedHackingPrograms = allHackingPrograms.filter((program) => ns.fileExists(program));\\n        const hackingProgramsToPurchase = allHackingPrograms.filter((program) => !ns.fileExists(program));\\n\\n        if (purchasedHackingPrograms.length == allHackingPrograms.length) {\\n            break;\\n        }\\n\\n        for (const program of hackingProgramsToPurchase) {\\n            const programCost = ns.singularity.getDarkwebProgramCost(program);\\n            const moneyAvailable = ns.getServerMoneyAvailable(HOME_SERVER);\\n\\n            if (programCost <= moneyAvailable) {\\n                if (ns.singularity.purchaseProgram(program)) {\\n                    ns.print(`Purchased ${program}`);\\n                }\\n            }\\n        }\\n\\n        await ns.sleep(SLEEP_DELAY);\\n    }\\n}\\n\",\"filename\":\"buy-darkweb-programs.js\",\"server\":\"home\"}}],[\"manage-corporation.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Ref: https://github.com/danielyxie/bitburner/blob/dev/markdown/bitburner.corporation.md\\n    if (ns.corporation.hasCorporation()) {\\n        ns.tprint('Player has corporation');\\n    } else {\\n        ns.tprint('Player does not have corporation');\\n    }\\n\\n    const corporation = ns.corporation.getCorporation();\\n    ns.tprint(`Corporation data:\\\\n${corporation}`);\\n}\\n\",\"filename\":\"manage-corporation.js\",\"server\":\"home\"}}],[\"buy-hacknet-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tconst hacknetConstants = ns.formulas.hacknetServers.constants();\\n\\t/*\\n\\t\\t\\tns.formulas.hacknetServers.constants()\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\\"HashesPerLevel\\\":0.001,\\n\\t\\t\\t\\t\\t\\\"BaseCost\\\":50000,\\n\\t\\t\\t\\t\\t\\\"RamBaseCost\\\":200000,\\n\\t\\t\\t\\t\\t\\\"CoreBaseCost\\\":1000000,\\n\\t\\t\\t\\t\\t\\\"CacheBaseCost\\\":10000000,\\n\\t\\t\\t\\t\\t\\\"PurchaseMult\\\":3.2,\\n\\t\\t\\t\\t\\t\\\"UpgradeLevelMult\\\":1.1,\\n\\t\\t\\t\\t\\t\\\"UpgradeRamMult\\\":1.4,\\n\\t\\t\\t\\t\\t\\\"UpgradeCoreMult\\\":1.55,\\n\\t\\t\\t\\t\\t\\\"UpgradeCacheMult\\\":1.85,\\n\\t\\t\\t\\t\\t\\\"MaxServers\\\":20,\\n\\t\\t\\t\\t\\t\\\"MaxLevel\\\":300,\\n\\t\\t\\t\\t\\t\\\"MaxRam\\\":8192,\\n\\t\\t\\t\\t\\t\\\"MaxCores\\\":128,\\n\\t\\t\\t\\t\\t\\\"MaxCache\\\":15\\n\\t\\t\\t}\\n\\t*/\\n\\tconst targetCount = hacknetConstants['MaxServers'];\\n\\tconst targetLevel = hacknetConstants['MaxLevel'];\\n\\tconst targetRam = hacknetConstants['MaxRam'];\\n\\tconst targetCore = hacknetConstants['MaxCores'];\\n\\tconst targetCache = hacknetConstants['MaxCache'];\\n\\n\\twhile (true) {\\n\\t\\tif (ns.hacknet.numNodes() < targetCount) {\\n\\t\\t\\tconst cost = ns.hacknet.getPurchaseNodeCost();\\n\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n\\t\\t\\t\\tns.hacknet.purchaseNode();\\n\\t\\t\\t\\tns.print('Bought net node');\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\tif (ns.hacknet.getNodeStats(i).level < targetLevel) {\\n\\t\\t\\t\\tconst cost = ns.hacknet.getLevelUpgradeCost(i, 1);\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeLevel(i, 1);\\n\\t\\t\\t\\t\\tconst newLevel = ns.hacknet.getNodeStats(i).level;\\n\\t\\t\\t\\t\\tns.print(`Upgrading node ${i} to level ${newLevel}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\tif (ns.hacknet.getNodeStats(i).ram < targetRam) {\\n\\t\\t\\t\\tconst cost = ns.hacknet.getRamUpgradeCost(i, 1);\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeRam(i, 1);\\n\\t\\t\\t\\t\\tconst newLevel = ns.hacknet.getNodeStats(i).ram;\\n\\t\\t\\t\\t\\tns.print(`Upgrading node ${i} to ram ${newLevel}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\tif (ns.hacknet.getNodeStats(i).cores < targetCore) {\\n\\t\\t\\t\\tconst cost = ns.hacknet.getCoreUpgradeCost(i, 1);\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeCore(i, 1);\\n\\t\\t\\t\\t\\tconst newLevel = ns.hacknet.getNodeStats(i).cores;\\n\\t\\t\\t\\t\\tns.print(`Upgrading node ${i} to cores ${newLevel}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\tif (ns.hacknet.getNodeStats(i).cache < targetCache) {\\n\\t\\t\\t\\tconst cost = ns.hacknet.getCacheUpgradeCost(i, 1);\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeCache(i, 1);\\n\\t\\t\\t\\t\\tconst newLevel = ns.hacknet.getNodeStats(i).cache;\\n\\t\\t\\t\\t\\tns.print(`Upgrading node ${i} to cache ${newLevel}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tlet countCompletelyUpgraded = 0;\\n\\t\\tif (ns.hacknet.numNodes() == targetCount) {\\n\\t\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\t\\tconst nodeStats = ns.hacknet.getNodeStats(i);\\n\\t\\t\\t\\tconst allLevelUpgraded = nodeStats.level == targetLevel;\\n\\t\\t\\t\\tconst allRamUpgraded = nodeStats.ram == targetRam;\\n\\t\\t\\t\\tconst allCoreUpgraded = nodeStats.cores == targetCore;\\n\\t\\t\\t\\tconst allCacheUpgraded = nodeStats.cache == targetCache;\\n\\n\\n\\t\\t\\t\\tif (allLevelUpgraded && allRamUpgraded && allCoreUpgraded && allCacheUpgraded) {\\n\\t\\t\\t\\t\\tcountCompletelyUpgraded++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (countCompletelyUpgraded == targetCount) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500);\\n\\t}\\n}\",\"filename\":\"buy-hacknet-servers.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.032,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"launch-hacking.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.41000000000014,\"ramUsage\":11.2,\"server\":\"home\",\"scriptKey\":\"launch-hacking.js*[]\",\"title\":\"launch-hacking.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"spend-hashes.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":47.210000000000136,\"ramUsage\":6.05,\"server\":\"home\",\"scriptKey\":\"spend-hashes.js*[]\",\"title\":\"spend-hashes.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"buy-hacknet-servers.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.81000000000013,\"ramUsage\":5.7,\"server\":\"home\",\"scriptKey\":\"buy-hacknet-servers.js*[]\",\"title\":\"buy-hacknet-servers.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"buy-servers.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.61000000000013,\"ramUsage\":9.45,\"server\":\"home\",\"scriptKey\":\"buy-servers.js*[]\",\"title\":\"buy-servers.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-sleeves.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.21000000000012,\"ramUsage\":21.6,\"server\":\"home\",\"scriptKey\":\"manage-sleeves.js*[]\",\"title\":\"manage-sleeves.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-gang.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.01000000000012,\"ramUsage\":24.7,\"server\":\"home\",\"scriptKey\":\"manage-gang.js*[]\",\"title\":\"manage-gang.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"buy-darkweb-programs.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.810000000000116,\"ramUsage\":6.85,\"server\":\"home\",\"scriptKey\":\"buy-darkweb-programs.js*[]\",\"title\":\"buy-darkweb-programs.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.41000000000008,\"ramUsage\":3.1,\"server\":\"home\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":11,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"61.0.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":29734157753.417465,\"moneyMax\":586129511755.9515,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1304,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"38.6.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":34147749681.233364,\"moneyMax\":673131689628.0796,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1318,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"85.5.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":37,\"moneyAvailable\":16692789340.144978,\"moneyMax\":329053761903.1633,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":994,\"serverGrowth\":71,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"87.3.6.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":46,\"moneyAvailable\":21541182839.21031,\"moneyMax\":424626891566.8504,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1012,\"serverGrowth\":76,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"75.5.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":17725467702.122276,\"moneyMax\":349410257927.91187,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1264,\"serverGrowth\":67,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"9.2.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":19315519912.706913,\"moneyMax\":380753890849.52466,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1218,\"serverGrowth\":55,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"77.8.3.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":12277080304.210176,\"moneyMax\":242009850898.4422,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1056,\"serverGrowth\":95,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"32.9.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":18430907090.601505,\"moneyMax\":363316111517.97107,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":959,\"serverGrowth\":95,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"8.0.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":15880962073.91367,\"moneyMax\":313050755423.80084,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1128,\"serverGrowth\":97,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"16.0.6.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":43,\"moneyAvailable\":1159390665.332221,\"moneyMax\":22854290686.188305,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1070,\"serverGrowth\":81,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"17.8.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":788493.175581656,\"moneyMax\":15543037.19847111,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1430,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"89.5.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":46,\"moneyAvailable\":815744502.6930774,\"moneyMax\":16080224334.793589,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":914,\"serverGrowth\":74,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"69.2.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":45,\"moneyAvailable\":706673690.1768305,\"moneyMax\":13930184551.688414,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":992,\"serverGrowth\":55,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"34.5.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":39,\"moneyAvailable\":523944245.37097174,\"moneyMax\":10328161546.5073,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":933,\"serverGrowth\":64,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"99.9.1.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":43,\"moneyAvailable\":581608303.0558279,\"moneyMax\":11464854445.528698,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":833,\"serverGrowth\":73,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"61.6.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":45,\"moneyAvailable\":570045271.414012,\"moneyMax\":11236920157.063534,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":848,\"serverGrowth\":69,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"7.4.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":44,\"moneyAvailable\":782764087.4604858,\"moneyMax\":15430103526.324892,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":918,\"serverGrowth\":93,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"21.9.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":44,\"moneyAvailable\":929697021.5420947,\"moneyMax\":18326493921.113342,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":856,\"serverGrowth\":86,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"99.6.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":36,\"moneyAvailable\":632355147.4477519,\"moneyMax\":12465192957.662107,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":66,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"45.3.4.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":36,\"moneyAvailable\":517645017.5468677,\"moneyMax\":10203989092.738796,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":861,\"serverGrowth\":87,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"54.4.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":38,\"moneyAvailable\":635738124.5885422,\"moneyMax\":12531879317.378654,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":898,\"serverGrowth\":76,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"22.6.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88.5,\"hackDifficulty\":88.5,\"minDifficulty\":30,\"moneyAvailable\":592268767.0603778,\"moneyMax\":11674997023.431738,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":845,\"serverGrowth\":80,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"14.3.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":41,\"moneyAvailable\":900200703.7575959,\"moneyMax\":17745052789.166714,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":855,\"serverGrowth\":59,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"30.9.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":46,\"moneyAvailable\":773667677.7305263,\"moneyMax\":15250792101.465702,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":902,\"serverGrowth\":69,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"57.3.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88.5,\"hackDifficulty\":88.5,\"minDifficulty\":30,\"moneyAvailable\":842512694.0155451,\"moneyMax\":16607887739.304335,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":816,\"serverGrowth\":65,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"14.7.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":622067919.0533428,\"moneyMax\":12262407723.046074,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":75,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"92.0.7.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":38,\"moneyAvailable\":573829452.0178813,\"moneyMax\":11311515171.59652,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":816,\"serverGrowth\":71,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"63.5.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":40,\"moneyAvailable\":1268748956.1523397,\"moneyMax\":25009997336.311745,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":845,\"serverGrowth\":67,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"11.7.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":40,\"moneyAvailable\":1208594952.1390004,\"moneyMax\":23824221795.101006,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":778,\"serverGrowth\":82,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"61.5.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":34,\"moneyAvailable\":873815332.9683117,\"moneyMax\":17224935669.103157,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":824,\"serverGrowth\":78,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"16.8.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":39,\"moneyAvailable\":1175412837.1981223,\"moneyMax\":23170125015.544792,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":830,\"serverGrowth\":77,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"2.3.3.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":39,\"moneyAvailable\":833261478.6319306,\"moneyMax\":16425524734.408932,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":788,\"serverGrowth\":74,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"98.6.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":36,\"moneyAvailable\":593383030.133917,\"moneyMax\":11696961744.163944,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":651,\"serverGrowth\":65,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"71.8.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82.5,\"hackDifficulty\":82.5,\"minDifficulty\":28,\"moneyAvailable\":395231567.9463124,\"moneyMax\":7790934852.5026245,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":515,\"serverGrowth\":41,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"21.7.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82.5,\"hackDifficulty\":82.5,\"minDifficulty\":28,\"moneyAvailable\":567309073.1473423,\"moneyMax\":11182983315.555851,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":568,\"serverGrowth\":53,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"46.0.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":37,\"moneyAvailable\":303933335.62466055,\"moneyMax\":5991234024.295347,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":430,\"serverGrowth\":43,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"77.7.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70.5,\"hackDifficulty\":70.5,\"minDifficulty\":24,\"moneyAvailable\":192490046.49322852,\"moneyMax\":3794427200.6826596,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":418,\"serverGrowth\":41,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"49.5.9.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":732888335.6352446,\"moneyMax\":14446936277.794718,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":739,\"serverGrowth\":75,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"47.2.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":194219200.19988146,\"moneyMax\":3828512848.113349,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":444,\"serverGrowth\":51,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"11.0.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":37,\"moneyAvailable\":380033429.00889593,\"moneyMax\":7491344131.660256,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":563,\"serverGrowth\":69,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"78.7.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":269960803.5848523,\"moneyMax\":5321556282.529899,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":439,\"serverGrowth\":45,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"94.6.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":140258137.4960573,\"moneyMax\":2764814605.8858695,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":303,\"serverGrowth\":50,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"10.1.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88.5,\"hackDifficulty\":88.5,\"minDifficulty\":30,\"moneyAvailable\":196027644.78027087,\"moneyMax\":3864161503.3647165,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":358,\"serverGrowth\":55,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"2.1.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91.5,\"hackDifficulty\":91.5,\"minDifficulty\":31,\"moneyAvailable\":216835623.28495544,\"moneyMax\":4274335229.5795555,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":405,\"serverGrowth\":60,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"3.0.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":60921154.2556443,\"moneyMax\":1200897859.4783225,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":293,\"serverGrowth\":35,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"53.0.9.2\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1.5,\"hackDifficulty\":1.5,\"minDifficulty\":1,\"moneyAvailable\":55194.522290715926,\"moneyMax\":1088012.6038929778,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.810000000000045,\"ramUsage\":2.45,\"server\":\"n00dles\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":1,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"89.1.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1576986.351163312,\"moneyMax\":31086074.39694222,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.00999999999995,\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"72.8.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1813534.303837809,\"moneyMax\":35748985.55648355,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.20999999999994,\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"98.3.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":1971232.9389541403,\"moneyMax\":38857592.99617778,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.409999999999979,\"ramUsage\":2.45,\"server\":\"joesguns\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"99.2.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"n00dles\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":5913698.816862421,\"moneyMax\":116572778.98853333,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"47.8.2.3\",\"isConnectedTo\":true,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":2168356.232849554,\"moneyMax\":42743352.29579555,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"74.9.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nectar-net\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":3942465.8779082806,\"moneyMax\":77715185.99235556,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"99.1.0.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":35482192.90117452,\"moneyMax\":699436673.9311999,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"80.9.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":2365479.5267449683,\"moneyMax\":46629111.59541333,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"70.8.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":3153972.702326624,\"moneyMax\":62172148.79388444,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"81.5.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zer0\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":18923836.213959746,\"moneyMax\":373032892.7633066,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"9.9.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":7884931.755816561,\"moneyMax\":155430371.9847111,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"69.8.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nectar-net\",\"computek\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":48887122.52334018,\"moneyMax\":963679062.0869502,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":198,\"serverGrowth\":35,\"runningScripts\":[]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"86.7.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58.5,\"hackDifficulty\":58.5,\"minDifficulty\":20,\"moneyAvailable\":45186335.323199905,\"moneyMax\":890727925.7971864,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":253,\"serverGrowth\":33,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"10.5.4.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":15769863.511633122,\"moneyMax\":310860743.9694222,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"49.5.4.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82.5,\"hackDifficulty\":82.5,\"minDifficulty\":28,\"moneyAvailable\":197123293.89541402,\"moneyMax\":3885759299.6177773,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":485,\"serverGrowth\":32,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"0.1.6.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88.5,\"hackDifficulty\":88.5,\"minDifficulty\":30,\"moneyAvailable\":709643858.0234905,\"moneyMax\":13988733478.623999,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":986,\"serverGrowth\":51,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"61.4.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":354821929.0117453,\"moneyMax\":6994366739.311999,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":729,\"serverGrowth\":49,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"10.7.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":547,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"50.5.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"netlink\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":354,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"29.2.4.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":219,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"43.6.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":513,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"47.2.5.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":55,\"serverGrowth\":1,\"runningScripts\":[]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"15.8.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"46.1.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3804.725383687637,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"29.8.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":122.613,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":500,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false,\"EnableHistorySearch\":true}","VersionSave":"33","AllGangsSave":"","LastExportBonus":"1702730999582","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}