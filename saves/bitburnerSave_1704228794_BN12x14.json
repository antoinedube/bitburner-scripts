{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":75,\"max\":75},\"skills\":{\"hacking\":4266,\"strength\":754,\"defense\":656,\"dexterity\":666,\"agility\":337,\"charisma\":2,\"intelligence\":217},\"exp\":{\"hacking\":60292511579.654655,\"strength\":36628.09993835798,\"defense\":36628.09993835798,\"dexterity\":36628.09993835798,\"agility\":36628.09993835798,\"charisma\":0,\"intelligence\":456727.5554731685},\"mults\":{\"hacking_chance\":3.4317094830653043,\"hacking_speed\":3.357143642943502,\"hacking_money\":11.133377732665368,\"hacking_grow\":5.203170823377641,\"hacking\":9.471561438422903,\"hacking_exp\":10.451335708101823,\"strength\":7.284292693576658,\"strength_exp\":3.3098112917622804,\"defense\":6.334167559631874,\"defense_exp\":3.3098112917622804,\"dexterity\":6.427400177592561,\"dexterity_exp\":3.3098112917622804,\"agility\":3.257018433968056,\"agility_exp\":3.3098112917622804,\"charisma\":3.5464812332142,\"charisma_exp\":2.903343238387965,\"hacknet_node_money\":6.367394639689606,\"hacknet_node_purchase_cost\":0.2896495918663406,\"hacknet_node_ram_cost\":0.37862691747234056,\"hacknet_node_core_cost\":0.37862691747234056,\"hacknet_node_level_cost\":0.3218328798514895,\"company_rep\":2.6394029439890585,\"faction_rep\":2.6394029439890585,\"work_money\":2.3785923764012074,\"crime_success\":3.259088852577795,\"crime_money\":3.4072292549676937,\"bladeburner_max_stamina\":1.1400000000000001,\"bladeburner_stamina_gain\":1.1400000000000001,\"bladeburner_analysis\":1.1400000000000001,\"bladeburner_success_chance\":1.1400000000000001},\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":49},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface Optimization Submodule\"},{\"level\":1,\"name\":\"Neotra\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Photosynthetic Cells\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"Graphene BrachiBlades Upgrade\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"nextSENS Gene Modification\"},{\"level\":1,\"name\":\"Neuronal Densification\"},{\"level\":1,\"name\":\"Enhanced Social Interaction Implant\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"}],\"city\":\"Sector-12\",\"bitNodeN\":12,\"corporation\":null,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"NiteSec\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":2064895.049753405,\"hack\":45847,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":3724,\"hack_exp\":11757126.570363099,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":752937.4279951436,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":7903200.649989299,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":510953.0645720484,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-1\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":2058022.8424065597,\"hack\":45889,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":3729,\"hack_exp\":11724969.552733697,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":751088.7200892698,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":7922179.605611436,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":512483.98031608574,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-2\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":2048599.4255252194,\"hack\":45984,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":3735,\"hack_exp\":11683665.783739775,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":748267.7518541618,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":7960416.710133037,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":514741.6854479704,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-3\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":2012512.179026918,\"hack\":45737,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":3708,\"hack_exp\":11478272.707072847,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":734427.1892904664,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":7903113.268780849,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":510051.0831750211,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-4\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":1956548.2719250668,\"hack\":45848,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":3717,\"hack_exp\":11196631.364423104,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":716954.109120368,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":7981203.05673879,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":515910.85031391704,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-5\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":1880846.513009114,\"hack\":45623,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":3706,\"hack_exp\":10786261.900065443,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":692753.53913826,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":7962625.8207867695,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":517769.3262851975,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-6\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":1862066.493692637,\"hack\":45753,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":3721,\"hack_exp\":10697815.704989856,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":687911.8692959653,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":8021164.970611973,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":522901.18529684265,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-7\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":1848605.9961450016,\"hack\":45556,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":3709,\"hack_exp\":10613919.99273861,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":683351.1152159617,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":7965021.023405527,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":520529.7765798434,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-8\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":1745937.3250476995,\"hack\":45128,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":3678,\"hack_exp\":10049352.941111043,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":648742.1184676612,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":7902612.977174205,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":519243.8296521816,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-9\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":1582165.2158815556,\"hack\":44706,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":3630,\"hack_exp\":9165164.494929915,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":591692.7353421833,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":7902423.4987550145,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":519235.8877275416,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-10\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":1133742.4806709408,\"hack\":43284,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":3470,\"hack_exp\":6713937.107792469,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":433389.08807039435,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":7902431.059663471,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":519236.0708391433,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-11\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":326057.09752452344,\"hack\":37997,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":2874,\"hack_exp\":2115591.4663006687,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":136358.34018979754,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":7898579.057092187,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":519003.48757806874,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-12\"}}],\"wanted\":164.74136879505042,\"respect\":20519999.89060855,\"isHackingGang\":true,\"respectGainRate\":168.88512029869145,\"wantedGainRate\":0.04865950255840535,\"moneyGainRate\":482854.62329350674,\"storedCycles\":2,\"storedTerritoryAndPowerCycles\":20,\"territoryClashChance\":0,\"territoryWarfareEngaged\":false,\"notifyMemberDeath\":true}},\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"NiteSec\"],\"factionInvitations\":[\"Netburners\",\"Sector-12\",\"Slum Snakes\",\"The Black Hand\",\"CyberSec\",\"BitRunners\",\"The Syndicate\",\"Daedalus\"],\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"The Covenant\",\"Bladeburners\"]},\"hacknetNodes\":[\"hacknet-server-0\",\"hacknet-server-1\",\"hacknet-server-2\",\"hacknet-server-3\",\"hacknet-server-4\",\"hacknet-server-5\",\"hacknet-server-6\",\"hacknet-server-7\",\"hacknet-server-8\",\"hacknet-server-9\",\"hacknet-server-10\",\"hacknet-server-11\",\"hacknet-server-12\",\"hacknet-server-13\",\"hacknet-server-14\",\"hacknet-server-15\",\"hacknet-server-16\",\"hacknet-server-17\",\"hacknet-server-18\",\"hacknet-server-19\"],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":20971520,\"hashes\":9688.37648764925,\"upgrades\":{\"Sell for Money\":10690,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":697,\"Increase Maximum Money\":696,\"Improve Studying\":125,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":-95722.25,\"numPeopleKilled\":0,\"location\":\"Rothman University\",\"money\":72149996327.76134,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":29012143591.852047,\"hacking\":44394726550225.164,\"hacknet\":10690000000,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":439537199.2603293,\"stock\":0,\"total\":72149995214.76134,\"work\":0,\"servers\":-26565614940107.145,\"other\":-307700000,\"augmentations\":-17796795595693.004}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-525311.9999999753,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":-141089541141.4848,\"hacking\":269023089450910.9,\"hacknet\":42992433069003.3,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":10446552370.375694,\"stock\":0,\"total\":103639496115226.42,\"work\":0,\"servers\":-82302722880215.75,\"other\":-2192900000,\"augmentations\":-125940467110302.4}},\"playtimeSinceLastAug\":13428800,\"playtimeSinceLastBitnode\":351277800,\"lastAugReset\":1704215364932,\"lastNodeReset\":1703877515456,\"purchasedServers\":[\"neighbor-0\",\"neighbor-1\",\"neighbor-2\",\"neighbor-3\",\"neighbor-4\",\"neighbor-5\",\"neighbor-6\",\"neighbor-7\",\"neighbor-8\",\"neighbor-9\",\"neighbor-10\",\"neighbor-11\",\"neighbor-12\",\"neighbor-13\",\"neighbor-14\",\"neighbor-15\",\"neighbor-16\",\"neighbor-17\",\"neighbor-18\"],\"scriptProdSinceLastAug\":44394726550225.164,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":28,\"max\":28},\"skills\":{\"hacking\":1,\"strength\":180,\"defense\":180,\"dexterity\":180,\"agility\":180,\"charisma\":1,\"intelligence\":179},\"exp\":{\"hacking\":0,\"strength\":870967.2199080139,\"defense\":870967.2199080139,\"dexterity\":870967.2199080139,\"agility\":870967.2199080139,\"charisma\":0,\"intelligence\":142067.42944290765},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"tasksCompleted\":2,\"cyclesWorked\":20,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":2,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":28,\"max\":28},\"skills\":{\"hacking\":1,\"strength\":180,\"defense\":180,\"dexterity\":180,\"agility\":180,\"charisma\":1,\"intelligence\":176},\"exp\":{\"hacking\":0,\"strength\":870967.2199080139,\"defense\":870967.2199080139,\"dexterity\":870967.2199080139,\"agility\":870967.2199080139,\"charisma\":0,\"intelligence\":128719.45344066303},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"tasksCompleted\":2,\"cyclesWorked\":20,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":2,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":28,\"max\":28},\"skills\":{\"hacking\":1,\"strength\":180,\"defense\":180,\"dexterity\":180,\"agility\":180,\"charisma\":1,\"intelligence\":176},\"exp\":{\"hacking\":0,\"strength\":870967.2199080139,\"defense\":870967.2199080139,\"dexterity\":870967.2199080139,\"agility\":870967.2199080139,\"charisma\":0,\"intelligence\":128682.05988337383},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"tasksCompleted\":2,\"cyclesWorked\":20,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":2,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":28,\"max\":28},\"skills\":{\"hacking\":1,\"strength\":180,\"defense\":180,\"dexterity\":180,\"agility\":180,\"charisma\":1,\"intelligence\":176},\"exp\":{\"hacking\":0,\"strength\":870967.2199080139,\"defense\":870967.2199080139,\"dexterity\":870967.2199080139,\"agility\":870967.2199080139,\"charisma\":0,\"intelligence\":128682.83139255909},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"tasksCompleted\":2,\"cyclesWorked\":20,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":2,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":28,\"max\":28},\"skills\":{\"hacking\":1,\"strength\":180,\"defense\":180,\"dexterity\":180,\"agility\":180,\"charisma\":1,\"intelligence\":173},\"exp\":{\"hacking\":0,\"strength\":870967.2199080139,\"defense\":870967.2199080139,\"dexterity\":870967.2199080139,\"agility\":870967.2199080139,\"charisma\":0,\"intelligence\":117729.12392306191},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"tasksCompleted\":2,\"cyclesWorked\":20,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":2,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":28,\"max\":28},\"skills\":{\"hacking\":1,\"strength\":180,\"defense\":180,\"dexterity\":180,\"agility\":180,\"charisma\":1,\"intelligence\":173},\"exp\":{\"hacking\":0,\"strength\":870967.2199080139,\"defense\":870967.2199080139,\"dexterity\":870967.2199080139,\"agility\":870967.2199080139,\"charisma\":0,\"intelligence\":117862.62575957252},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"tasksCompleted\":2,\"cyclesWorked\":20,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":2,\"sync\":100}}],\"sleevesFromCovenant\":3,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,3],[2,3],[3,3],[4,3],[5,3],[10,3],[9,3],[12,13],[6,3],[7,3]]},\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1662043985194},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1662055145998},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1662059766003},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1662066426141},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1662123294982},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1662473253800},{\"ID\":\"NITESEC\",\"unlockedOn\":1662586146115},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1662599826142},{\"ID\":\"DONATION\",\"unlockedOn\":1663589558449},{\"ID\":\"NS2\",\"unlockedOn\":1664451835859},{\"ID\":\"FROZE\",\"unlockedOn\":1664473094691},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1664552329001},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1664798852132},{\"ID\":\"TOR\",\"unlockedOn\":1665066056909},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1665074458530},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1665081718922},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1665334933764},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1665766590313},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1665837400497},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1665874707261},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1665939874779},{\"ID\":\"WORKOUT\",\"unlockedOn\":1665946235177},{\"ID\":\"TRAVEL\",\"unlockedOn\":1666024890747},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1666127536448},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1666177601953},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1666201654675},{\"ID\":\"SF1.1\",\"unlockedOn\":1666396556449},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1668533490192},{\"ID\":\"GANG\",\"unlockedOn\":1668867250197},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1668954907599},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1668955027612},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1669208876810},{\"ID\":\"SF2.1\",\"unlockedOn\":1669423716199},{\"ID\":\"CORPORATION\",\"unlockedOn\":1669431816190},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1671198038341},{\"ID\":\"SF3.1\",\"unlockedOn\":1671300458277},{\"ID\":\"CHALLENGE_BN1\",\"unlockedOn\":1671822590337},{\"ID\":\"SF4.1\",\"unlockedOn\":1674137591582},{\"ID\":\"SF5.1\",\"unlockedOn\":1675551633160},{\"ID\":\"N00DLES\",\"unlockedOn\":1677761263550},{\"ID\":\"SF10.1\",\"unlockedOn\":1680550899708},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1683499237184},{\"ID\":\"KARMA_1000000\",\"unlockedOn\":1683585524648},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1686441026190},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1686518683455},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1686519223506},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1688038167678},{\"ID\":\"ALL_HACKNET_SERVER\",\"unlockedOn\":1688038167687},{\"ID\":\"MAX_HACKNET_SERVER\",\"unlockedOn\":1688038167689},{\"ID\":\"SF9.1\",\"unlockedOn\":1688302024803},{\"ID\":\"NEUROFLUX_255\",\"unlockedOn\":1689366941906},{\"ID\":\"FAST_BN\",\"unlockedOn\":1689431425450},{\"ID\":\"SF12.1\",\"unlockedOn\":1689714316805},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1696862815306},{\"ID\":\"SF6.1\",\"unlockedOn\":1697665718942},{\"ID\":\"SF7.1\",\"unlockedOn\":1699191969386},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1701305531389}],\"terminalCommandHistory\":[\"analyze \",\"hack\",\"run bootstrap.js \",\"nano spend-hashes.js \",\"run bootstrap.js \",\"connect darkweb \",\"buy -l;\",\"home ; run buy-hacknet-servers.js\",\"run bootstrap.js \",\"run list-player-karma.js \",\"nano manage-sleeves.js \",\"run list-player-karma.js \",\"run bootstrap.js \",\"run list-player-karma.js \",\"nano manage-sleeves.js \",\"top\",\"kill manage-sleeves.js \",\"run manage-sleeves.js \",\"run bootstrap.js \",\"run buy-servers.js \",\"run bootstrap.js \",\"nano buy-hacknet-servers.js \",\"run buy-hacknet-servers.js \",\"nano spend-hashes.js \",\"run bootstrap.js \",\"nano spend-hashes.js \",\"nano bootstrap.js \",\"connect The-Cave \",\"connect w0r1d_d43m0n \",\"analyze \",\"hack\",\"nano bootstrap.js \",\"run b1t_flum3.exe \",\"run bootstrap.js \",\"home ; nano spend-hashes.js\",\"run b1t_flum3.exe \",\"run bootstrap.js \",\"run delete-servers.js \",\"top\",\"nano buy-servers.js \",\"run delete-servers.js \",\"run fetch-scripts.js \",\"run bootstrap.js \",\"home ; nano spend-hashes.js\",\"run bootstrap.js \",\"home\",\"run list-player-karma.js \",\"home\",\"run list-player-karma.js \",\"run bootstrap.js \"],\"lastUpdate\":1704228793587,\"lastSave\":1704228760587,\"totalPlaytime\":42185177000,\"currentWork\":{\"ctor\":\"ClassWork\",\"data\":{\"type\":\"CLASS\",\"singularity\":true,\"cyclesWorked\":67100,\"earnings\":{\"money\":0,\"reputation\":0,\"hackExp\":3628768.556131256,\"strExp\":0,\"defExp\":0,\"dexExp\":0,\"agiExp\":0,\"chaExp\":0,\"intExp\":6944.124000004315},\"classType\":\"Computer Science\",\"location\":\"Rothman University\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"10c510f1398e51\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"5.0.5.9\",\"isConnectedTo\":true,\"maxRam\":65536,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"launch-hacking.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork, buildPath } from \\\"./scan.js\\\";\\nimport { buildHackingProgramList, countAvailablePrograms } from \\\"./hacking-programs.js\\\";\\n\\n/** @param {NS} ns */\\nasync function openPorts(ns, hackingPrograms, target) {\\n  for (const program of hackingPrograms) {\\n    if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n      const executable = program['functionName'].bind(ns);\\n      await executable(target);\\n    }\\n  }\\n}\\n\\n/** @param {NS} ns */\\nfunction launchScript(ns, script, server) {\\n  const scriptRam = ns.getScriptRam(script);\\n  const availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n  const scriptNumThreads = ~~(availableRam / scriptRam);\\n\\n  if (scriptNumThreads > 0) {\\n    ns.exec(script, server, scriptNumThreads);\\n  }\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  const replace = false;  // Replace an existing script\\n\\n  while (true) {\\n    const fullServerList = scanAllNetwork(ns, 'home');\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    for (const server of filteredServerList) {\\n      ns.print(`Current server: ${server}`);\\n\\n      const playerHackingLevel = ns.getHackingLevel();\\n      const hackingPrograms = buildHackingProgramList(ns);\\n      const numberAvailablePrograms = countAvailablePrograms(ns, hackingPrograms);\\n\\n      // Check server level vs player level\\n      const machineHackingLevel = ns.getServerRequiredHackingLevel(server);\\n      ns.print(`Level player: ${playerHackingLevel}, level machine: ${machineHackingLevel}`);\\n\\n      // Check number of ports required vs number of programs available\\n      const requiredNumberOfPorts = ns.getServerNumPortsRequired(server);\\n      ns.print(`Required num ports: ${requiredNumberOfPorts}, number available programs: ${numberAvailablePrograms}`);\\n\\n      if (playerHackingLevel < machineHackingLevel) {\\n        ns.print('----------\\\\n');\\n        continue;\\n      }\\n\\n      if (numberAvailablePrograms < requiredNumberOfPorts) {\\n        ns.print('----------\\\\n');\\n        continue;\\n      }\\n\\n      if (!ns.hasRootAccess(server)) {\\n        await openPorts(ns, hackingPrograms, server);\\n        ns.nuke(server);\\n\\n        if (server == 'w0r1d_d43m0n') {\\n          ns.tprint('w0r1d_d43m0n is now root-accessible');\\n        }\\n      }\\n\\n      ns.print(`hasRootAccess: ${ns.hasRootAccess(server)}`);\\n\\n      const isBackdoorInstalled = ns.getServer(server).backdoorInstalled;\\n      ns.print(`isBackdoorInstalled: ${isBackdoorInstalled}`);\\n      if (ns.hasRootAccess(server) && !isBackdoorInstalled && server != 'w0r1d_d43m0n') {\\n        const path = await buildPath(ns, server);\\n        for (let item of path) {\\n          // ns.print(`Connecting to ${item} from ${ns.singularity.getCurrentServer()}`);\\n          if (!ns.singularity.connect(item)) {\\n            ns.print(`Error while connecting to ${item}`);\\n          };\\n        }\\n\\n        ns.print('Installing backdoor');\\n        await ns.singularity.installBackdoor();\\n        ns.print('Backdoor installed');\\n\\n        for (let item of path.reverse()) {\\n          if (!ns.singularity.connect(item)) {\\n            ns.print(`Error while connecting to ${item}`);\\n          };\\n        }\\n      }\\n\\n      if (replace) {\\n        ns.killall(server);\\n      }\\n\\n      if (replace || !ns.fileExists('hack-server.js', server)) {\\n        const scpStatus = ns.scp('hack-server.js', server, 'home');\\n        if (!scpStatus) {\\n          ns.print(`Failed to copy hack-server.js on ${server}`);\\n        }\\n      }\\n\\n      if (!ns.isRunning('hack-server.js', server)) {\\n        launchScript(ns, 'hack-server.js', server);\\n      }\\n\\n      ns.print('----------\\\\n');\\n    }\\n\\n    if (replace) {\\n      break;\\n    }\\n\\n    await ns.sleep(1000 * 5);\\n  }\\n}\\n\",\"filename\":\"launch-hacking.js\",\"server\":\"home\"}}],[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"home\"}}],[\"list-server-prices.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  for (let i = 2; i < 21; i++) {\\n    const serverRam = Math.pow(2.0, i);\\n    const serverCost = ns.getPurchasedServerCost(serverRam);\\n    ns.tprint(`Server ram: ${serverRam}`);\\n    ns.tprint(`Server cost: ${formatNumber(serverCost)}\\\\$`);\\n    ns.tprint(\\\"\\\\n\\\");\\n  }\\n}\\n\",\"filename\":\"list-server-prices.js\",\"server\":\"home\"}}],[\"scan.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport function scanAllNetwork(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nexport async function buildPath(ns, server) {\\n  let pathList = [['home']];\\n\\n  while (true) {\\n    const currentPath = pathList.pop();\\n    const lastItem = currentPath.pop();\\n    const neighbors = ns.scan(lastItem);\\n    const neighborsWithoutServers = neighbors.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-') && !currentPath.includes(name));\\n\\n    for (let neighbor of neighborsWithoutServers) {\\n      let newPath = currentPath.slice();\\n      newPath.push(lastItem);\\n      newPath.push(neighbor);\\n\\n      if (neighbor == server) {\\n        return newPath;\\n      }\\n\\n      pathList.unshift(newPath);\\n    }\\n\\n    await ns.sleep(250);  // Just so that the editor does not complain...\\n  }\\n}\\n\",\"filename\":\"scan.js\",\"server\":\"home\"}}],[\"buy-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan\\\";\\n\\nfunction generateUUID() {\\n\\t// https://stackoverflow.com/questions/105034/how-do-i-create-a-guid-uuid\\n\\t// crypto.randomUUID();\\n\\t// crypto.getRandomValues();\\n}\\n\\n/** @param {NS} ns */\\nfunction launchScript(ns, scriptName, server) {\\n\\tconst scpStatus = ns.scp(scriptName, server, 'home');\\n\\tif (!scpStatus) {\\n\\t\\tns.print('Failed to copy ' + scriptName + ' on ' + server);\\n\\t}\\n\\n\\tns.killall(server);\\n\\n\\tconst maxRam = ns.getServerMaxRam(server);\\n\\tconst usedRam = ns.getServerUsedRam(server);\\n\\tconst availableRam = maxRam - usedRam;\\n\\tconst scriptRam = ns.getScriptRam(scriptName, server);\\n\\tconst numThreads = Math.floor(availableRam / scriptRam);\\n\\tif (numThreads > 0) {\\n\\t\\tif (ns.exec(scriptName, server, numThreads) == 0) {\\n\\t\\t\\tns.print('Error launching script');\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst BUYING_DELAY = 250;\\n\\tconst UPGRADING_DELAY = 5 * 1000;\\n\\tconst FOLLOWING_BATCH_DELAY = 1000 * 60 * 5;\\n\\tconst HOME_SERVER = 'home';\\n\\n\\tlet targetRam = 4;\\n\\twhile (targetRam <= ns.getPurchasedServerMaxRam()) {\\n\\t\\tconst maxNumberOfServers = ns.getPurchasedServerLimit();\\n\\t\\tconst availableMoney = ns.getServerMoneyAvailable('home');\\n\\t\\tconst serverCost = ns.getPurchasedServerCost(targetRam);\\n\\n\\t\\tif (availableMoney < maxNumberOfServers * serverCost) {\\n\\t\\t\\ttargetRam /= 2;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\ttargetRam *= 2;\\n\\t}\\n\\n\\tif (targetRam < 8) {\\n\\t\\ttargetRam = 8;\\n\\t}\\n\\n\\tns.print(`Starting target ram: ${targetRam}`);\\n\\n\\t// Purchase missing servers\\n\\twhile (true) {\\n\\t\\t// List current servers\\n\\t\\tconst serverList = scanAllNetwork(ns);\\n\\t\\tlet purchasedServers = serverList.filter(name => name.startsWith('neighbor-'));\\n\\n\\t\\t// Stopping criteria\\n\\t\\tif (purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// If limit is not reached, buy server at current targetRam\\n\\t\\tif (ns.getPurchasedServerCost(targetRam) < ns.getServerMoneyAvailable(HOME_SERVER)) {\\n\\t\\t\\tconst name = `neighbor-${purchasedServers.length}`;\\n\\t\\t\\tns.print(`Purchasing server ${name}`);\\n\\t\\t\\tns.purchaseServer(name, targetRam);\\n\\t\\t\\tlaunchScript(ns, 'hack-remote.js', name);\\n\\n\\t\\t\\tpurchasedServers.push(name);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(BUYING_DELAY);\\n\\t}\\n\\n\\tconst purchasedServers = scanAllNetwork(ns).filter(name => name.startsWith('neighbor-'));\\n\\tns.print(`Purchased servers: ${purchasedServers}`);\\n\\n\\ttargetRam *= 2;\\n\\twhile (true) {\\n\\t\\t// Stopping criteria\\n\\t\\tlet countServerWithTargetRam = 0;\\n\\t\\tfor (const purchasedServer of purchasedServers) {\\n\\t\\t\\tconst purchasedServerRam = ns.getServer(purchasedServer).maxRam;\\n\\t\\t\\tif (purchasedServerRam >= targetRam) {\\n\\t\\t\\t\\tcountServerWithTargetRam++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tns.print(`Number of servers at target (target: ${ns.formatRam(targetRam)} / max: ${ns.formatRam(ns.getPurchasedServerMaxRam())}): ${countServerWithTargetRam} vs ${ns.getPurchasedServerLimit()}`);\\n\\t\\tif (countServerWithTargetRam == ns.getPurchasedServerLimit()) {\\n\\t\\t\\tif (targetRam >= ns.getPurchasedServerMaxRam()) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\ttargetRam *= 2;\\n\\n\\t\\t\\tawait ns.sleep(FOLLOWING_BATCH_DELAY);\\n\\t\\t}\\n\\n\\t\\tfor (const purchasedServer of purchasedServers) {\\n\\t\\t\\tconst purchasedServerRam = ns.getServer(purchasedServer).maxRam;\\n\\t\\t\\tif (purchasedServerRam < targetRam) {\\n\\t\\t\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable('home');\\n\\t\\t\\t\\tconst upgradeCost = ns.getPurchasedServerUpgradeCost(purchasedServer, targetRam);\\n\\t\\t\\t\\tif (upgradeCost < moneyAvailable) {\\n\\t\\t\\t\\t\\tif (ns.upgradePurchasedServer(purchasedServer, targetRam)) {\\n\\t\\t\\t\\t\\t\\tns.print(`Upgraded ${purchasedServer} to ${targetRam}Gb with cost of ${ns.formatNumber(upgradeCost)}\\\\$`);\\n\\t\\t\\t\\t\\t\\tlaunchScript(ns, 'hack-remote.js', purchasedServer);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tns.print(`Error while upgrading purchased server ${purchasedServer} to ${targetRam}Gb`);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(UPGRADING_DELAY);\\n\\t}\\n}\\n\",\"filename\":\"buy-servers.js\",\"server\":\"home\"}}],[\"delete-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  const fullServerList = scanAllNetwork(ns);\\n  const serverList = fullServerList.filter(name => name.startsWith('neighbor-'));\\n\\n  for (const server of serverList) {\\n    ns.tprint('Deleting: ' + server);\\n    ns.killall(server);\\n    ns.deleteServer(server);\\n  }\\n}\\n\",\"filename\":\"delete-servers.js\",\"server\":\"home\"}}],[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n  return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n  const currentMoney = ns.getServerMoneyAvailable(server);\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const target = 0.90 * maxMoney;\\n\\n  ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n  const currentLevel = ns.getServerSecurityLevel(server);\\n  const minLevel = ns.getServerMinSecurityLevel(server);\\n  const target = 1.10 * minLevel;\\n\\n  ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('grow');\\n  ns.enableLog('hack');\\n  ns.enableLog('weaken');\\n\\n  const runningScript = ns.getRunningScript();\\n  const numThreads = runningScript.threads;\\n\\n  while (true) {\\n    await ns.sleep(500);\\n\\n    const fullServerList = buildServerList(ns);\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n    const server = filteredServerList[serverIndex];\\n\\n    if (!isAccessible(ns, server)) {\\n      continue;\\n    }\\n\\n    if (!hasSecurityLevel(ns, server)) {\\n      await ns.weaken(server, { threads: numThreads });\\n      ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    if (!hasMoney(ns, server)) {\\n      await ns.grow(server, { threads: numThreads });\\n      ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    ns.print(`[${server}] Hacking`);\\n    await ns.hack(server, { threads: numThreads });\\n  }\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"home\"}}],[\"list-server-money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  const fullServerList = scanAllNetwork(ns);\\n  const serverList = fullServerList.filter(name => !name.startsWith('neighbor-'));\\n\\n  for (let server of serverList) {\\n    const moneyAvailable = ns.getServerMoneyAvailable(server);\\n    const maxMoneyAvailable = ns.getServerMaxMoney(server);\\n\\n    ns.tprint(`Server: ${server} --> ${ns.formatNumber(moneyAvailable)}\\\\$ / ${ns.formatNumber(maxMoneyAvailable)}\\\\$`);\\n  }\\n}\\n\",\"filename\":\"list-server-money.js\",\"server\":\"home\"}}],[\"fetch-scripts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    if (ns.getHostname() !== \\\"home\\\") {\\n        throw new Exception(\\\"Run the script from home\\\");\\n    }\\n\\n    const scripts = [\\n        'bootstrap.js',\\n        'buy-darkweb-programs.js',\\n        'buy-hacknet-servers.js',\\n        'buy-servers.js',\\n        'delete-servers.js',\\n        'fetch-scripts.js',\\n        'hack-remote.js',\\n        'hack-server.js',\\n        'hacking-programs.js',\\n        'launch-hacking.js',\\n        'list-player-karma.js',\\n        'list-server-money.js',\\n        'list-server-prices.js',\\n        'list-server-security-level.js',\\n        'manage-bladeburner.js',\\n        'manage-corporation.js',\\n        'manage-gang.js',\\n        'manage-sleeves.js',\\n        'scan.js',\\n        'spend-hashes.js'\\n    ];\\n\\n    for (const scriptName of scripts) {\\n        ns.tprint(`Fetching: ${scriptName}`);\\n        await ns.wget(\\n            `https://raw.githubusercontent.com/antoinedube/bitburner-scripts/main/scripts/${scriptName}`,\\n            `${scriptName}`\\n        );\\n\\n        await ns.sleep(250);\\n    }\\n}\\n\",\"filename\":\"fetch-scripts.js\",\"server\":\"home\"}}],[\"list-player-karma.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  const karma = ns.heart.break();\\n  ns.tprint(`karma: ${karma.toFixed(2)}`);\\n}\\n\",\"filename\":\"list-player-karma.js\",\"server\":\"home\"}}],[\"list-server-security-level.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  const fullServerList = scanAllNetwork(ns);\\n  const serverList = fullServerList.filter(name => !name.startsWith('neighbor-'));\\n\\n  for (let server of serverList) {\\n    const currentSecurityLevel = ns.getServerSecurityLevel(server);\\n    const minSecurityLevel = ns.getServerMinSecurityLevel(server)\\n\\n    ns.tprint(`Server: ${server} --> ${ns.formatNumber(currentSecurityLevel)} / ${ns.formatNumber(minSecurityLevel)}`);\\n  }\\n}\\n\",\"filename\":\"list-server-security-level.js\",\"server\":\"home\"}}],[\"bootstrap.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  const scripts = [\\n    'launch-hacking.js',\\n    'spend-hashes.js',\\n    /* 'buy-hacknet-servers.js', */\\n    'buy-servers.js',\\n    'manage-sleeves.js',\\n    'manage-gang.js',\\n    'buy-darkweb-programs.js',\\n    /* 'manage-bladeburner.js' */\\n  ];\\n\\n  if (ns.isRunning('hack-remote.js')) {\\n    ns.kill('hack-remote.js', 'home');\\n  }\\n\\n  for (let script of scripts) {\\n    if (!ns.isRunning(script)) {\\n      ns.tprint(`Launching script: ${script}`);\\n      ns.run(script);\\n\\n      await ns.sleep(250);\\n    }\\n  }\\n\\n  await ns.sleep(2 * 1000);\\n\\n  const hackingScript = 'hack-remote.js';\\n  const scriptRam = ns.getScriptRam(hackingScript);\\n  const serverMaxRam = ns.getServerMaxRam('home');\\n  const serverUsedRam = ns.getServerUsedRam('home');\\n  const availableRam = serverMaxRam - serverUsedRam;\\n  const scriptNumThreads = ~~(availableRam / scriptRam);\\n\\n  if (scriptNumThreads > 0) {\\n    ns.tprint(`Launching script: ${hackingScript} with ${scriptNumThreads} threads`);\\n    ns.exec(hackingScript, 'home', scriptNumThreads);\\n  }\\n\\n  if (!ns.bladeburner.inBladeburner()) {\\n    ns.singularity.universityCourse('Rothman University', 'Computer Science');\\n  }\\n}\\n\",\"filename\":\"bootstrap.js\",\"server\":\"home\"}}],[\"manage-gang.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction displayMembersInformation(ns, memberName) {\\n  const memberInfo = ns.gang.getMemberInformation(memberName);\\n  const hackingLevel = memberInfo['hack'];\\n  const currentTask = memberInfo['task'];\\n  ns.print(`Member: ${memberName}\\\\thacking level: ${hackingLevel}\\\\ttask: ${currentTask}`);\\n}\\n\\n/** @param {NS} ns */\\nfunction assignMember(ns, name, task = '') {\\n  const memberInfo = ns.gang.getMemberInformation(name);\\n  const hackingLevel = memberInfo['hack'];\\n  const currentTask = memberInfo['task'];\\n\\n  /*\\n  Task names:\\n      - Unassigned\\n      - Ransomware\\n      - Phishing\\n      - Identity Theft\\n      - DDoS Attacks\\n      - Plant Virus\\n      - Fraud & Counterfeiting,\\n      - Money Laundering\\n      - Cyberterrorism\\n      - Ethical Hacking\\n      - Vigilante Justice\\n      - Train Combat\\n      - Train Hacking\\n      - Train Charisma\\n      - Territory Warfare\\n  */\\n  if (task != '') {\\n    if (currentTask != task) {\\n      ns.gang.setMemberTask(name, task);\\n    }\\n  } else if (hackingLevel < 120) {\\n    if (currentTask != 'Cyberterrorism') {\\n      ns.gang.setMemberTask(name, 'Cyberterrorism');\\n    }\\n  } else {\\n    if (currentTask != 'Money Laundering') {\\n      ns.gang.setMemberTask(name, 'Money Laundering');\\n    }\\n  }\\n}\\n\\n/** @param {NS} ns */\\nfunction recruitIfPossible(ns) {\\n  if (!ns.gang.canRecruitMember()) {\\n    return;\\n  }\\n\\n  const gangMembers = ns.gang.getMemberNames();\\n  const newGangMemberName = `audrey-${gangMembers.length + 1}`;\\n  ns.gang.recruitMember(newGangMemberName);\\n  assignMember(ns, newGangMemberName);\\n}\\n\\n/** @param {NS} ns */\\nfunction reassignMembersAccordingToWantedLevelPenalty(ns) {\\n  const gangInformation = ns.gang.getGangInformation();\\n  /*\\n  Gang information structure:\\n  {\\n      \\\"faction\\\":\\\"NiteSec\\\",\\n      \\\"isHacking\\\":true,\\n      \\\"moneyGainRate\\\":213.18959642323077,\\n      \\\"power\\\":1,\\n      \\\"respect\\\":846.631799960249,\\n      \\\"respectGainRate\\\":0,\\n      \\\"territory\\\":0.14285714285714293,\\n      \\\"territoryClashChance\\\":0,\\n      \\\"territoryWarfareEngaged\\\":false,\\n      \\\"wantedLevel\\\":310.2473419438491,\\n      \\\"wantedLevelGainRate\\\":-0.025302857142857158,\\n      \\\"wantedPenalty\\\":0.7318238952487159\\n  }\\n  */\\n\\n  const wantedLevelPenalty = 1.0 - gangInformation['wantedPenalty'];\\n  const gangRespect = gangInformation['respect'];\\n  if (wantedLevelPenalty > 0.25 && gangRespect > 50) {\\n    ns.gang.getMemberNames().map(memberName => {\\n      assignMember(ns, memberName, 'Ethical Hacking');\\n    });\\n  } else {\\n    ns.gang.getMemberNames().map(memberName => {\\n      assignMember(ns, memberName);\\n    });\\n  }\\n}\\n\\nfunction ascendIfGainIsWorth(ns) {\\n  ns.gang.getMemberNames().map(memberName => {\\n    const results = ns.gang.getAscensionResult(memberName);\\n\\n    if (results === undefined) {\\n      return;\\n    }\\n\\n    const hackingMultWithAscension = results['hack'];\\n\\n    if (hackingMultWithAscension > 2.0) {\\n      ns.gang.ascendMember(memberName);\\n      assignMember(ns, memberName);\\n    }\\n  });\\n}\\n\\nfunction buyEquipment(ns) {\\n  /*\\n      [\\n          \\\"Baseball Bat\\\",\\n          \\\"Katana\\\",\\n          \\\"Glock 18C\\\",\\n          \\\"P90C\\\",\\n          \\\"Steyr AUG\\\",\\n          \\\"AK-47\\\",\\n          \\\"M15A10 Assault Rifle\\\",\\n          \\\"AWM Sniper Rifle\\\",\\n          \\\"Bulletproof Vest\\\",\\n          \\\"Full Body Armor\\\",\\n          \\\"Liquid Body Armor\\\",\\n          \\\"Graphene Plating Armor\\\",\\n          \\\"Ford Flex V20\\\",\\n          \\\"ATX1070 Superbike\\\",\\n          \\\"Mercedes-Benz S9001\\\",\\n          \\\"White Ferrari\\\",\\n          \\\"NUKE Rootkit\\\",\\n          \\\"Soulstealer Rootkit\\\",\\n          \\\"Demon Rootkit\\\",\\n          \\\"Hmap Node\\\",\\n          \\\"Jack the Ripper\\\",\\n          \\\"Bionic Arms\\\",\\n          \\\"Bionic Legs\\\",\\n          \\\"Bionic Spine\\\",\\n          \\\"BrachiBlades\\\",\\n          \\\"Nanofiber Weave\\\",\\n          \\\"Synthetic Heart\\\",\\n          \\\"Synfibril Muscle\\\",\\n          \\\"BitWire\\\",\\n          \\\"Neuralstimulator\\\",\\n          \\\"DataJack\\\",\\n          \\\"Graphene Bone Lacings\\\"\\n          ]\\n  */\\n  const hackingUpgrades = ['NUKE Rootkit', 'Soulstealer Rootkit', 'Demon Rootkit', 'Hmap Node', 'Jack the Ripper'];\\n  const hackingAugmentations = ['BitWire', 'Neuralstimulator', 'DataJack'];\\n\\n  ns.gang.getMemberNames().map(memberName => {\\n    const memberInfo = ns.gang.getMemberInformation(memberName);\\n    const memberHackingUpgrade = memberInfo['upgrades'];\\n    const memberHackingAugmentations = memberInfo['augmentations'];\\n\\n    hackingUpgrades.map(upgrade => {\\n      if (!memberHackingUpgrade.includes(upgrade) && ns.gang.getEquipmentCost(upgrade) < ns.getServerMoneyAvailable('home')) {\\n        ns.gang.purchaseEquipment(memberName, upgrade);\\n      }\\n    });\\n\\n    hackingAugmentations.map(augmentation => {\\n      if (!memberHackingAugmentations.includes(augmentation) && ns.gang.getEquipmentCost(augmentation) < ns.getServerMoneyAvailable('home')) {\\n        ns.gang.purchaseEquipment(memberName, augmentation);\\n      }\\n    });\\n  });\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('sleep');\\n  ns.disableLog('getServerMoneyAvailable');\\n  let counter = 0;\\n\\n  while (true) {\\n    if (!ns.gang.inGang()) {\\n      ns.print(`Not in gang. Waiting.`);\\n      await ns.sleep(1000 * 60);\\n      continue;\\n    }\\n\\n    ns.gang.getMemberNames().map(memberName => displayMembersInformation(ns, memberName));\\n\\n    recruitIfPossible(ns);\\n    ascendIfGainIsWorth(ns);\\n    reassignMembersAccordingToWantedLevelPenalty(ns);\\n    buyEquipment(ns);\\n\\n    if (counter >= 25) {\\n      ns.gang.getMemberNames().map(memberName => assignMember(ns, memberName));\\n      counter = 0;\\n    } else if (counter >= 23) {\\n      ns.gang.getMemberNames().map(memberName => assignMember(ns, memberName, 'Ethical Hacking'));\\n    }\\n\\n    counter++;\\n    await ns.sleep(1000 * 30);\\n  }\\n}\\n\",\"filename\":\"manage-gang.js\",\"server\":\"home\"}}],[\"manage-sleeves.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nasync function setSleevesTask(ns) {\\n  for (var i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n    const sleeve = ns.sleeve.getSleeve(i);\\n    ns.print(`Sleeve ${i} has:`);\\n    ns.print(`- sync=${sleeve.sync}`);\\n    ns.print(`- shock=${sleeve.shock}`);\\n    ns.print(`--------------------------------------------`);\\n\\n    if (sleeve.sync < 100) {\\n      ns.print('Synchronize');\\n      ns.sleeve.setToSynchronize(i);\\n    } else if (sleeve.shock > 0) {\\n      ns.print('Shock recovery');\\n      ns.sleeve.setToShockRecovery(i);\\n    } else {\\n      ns.print('Manual task');\\n      // Ref: https://github.com/danielyxie/bitburner/blob/dev/src/Enums.ts\\n      // ns.sleeve.setToCommitCrime(i, 'Assassination');\\n      // ns.sleeve.setToCommitCrime(i, 'Heist');\\n      ns.sleeve.setToCommitCrime(i, 'Mug');\\n      // ns.sleeve.setToCommitCrime(i, 'Homicide');\\n      // ns.sleeve.setToUniversityCourse(i, 'Rothman University', 'Computer Science');\\n      // ns.sleeve.setToUniversityCourse(i, 'Rothman University', 'Algorithms');\\n    }\\n  }\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('sleep');\\n\\n  while (true) {\\n    await setSleevesTask(ns);\\n\\n    await ns.sleep(1000 * 15);\\n  }\\n}\\n\",\"filename\":\"manage-sleeves.js\",\"server\":\"home\"}}],[\"spend-hashes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nasync function spendHashesOnAction(ns, action, target, amount) {\\n  while (ns.hacknet.numHashes() < ns.hacknet.hashCost(action, amount)) {\\n    await ns.sleep(1000);\\n  }\\n\\n  if (!ns.hacknet.spendHashes(action, target, amount)) {\\n    ns.print(`Error while executing ${action} on ${target} with n=${amount}`);\\n  }\\n}\\n\\n/** @param {NS} ns */\\nfunction selectRandomServer(ns) {\\n  const serversToAvoid = ['CSEC', 'I.I.I.I', 'run4theh111z', 'avmnite-02h', '.', 'darkweb', 'The-Cave', 'w0r1d_d43m0n'];\\n\\n  const fullServerList = scanAllNetwork(ns, 'home');\\n  const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-') && !serversToAvoid.includes(name));\\n  const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n  return filteredServerList[serverIndex];\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  /*\\n    const upgrades = ns.hacknet.getHashUpgrades();\\n\\n    [\\n      \\\"Sell for Money\\\",\\n      \\\"Sell for Corporation Funds\\\",\\n      \\\"Reduce Minimum Security\\\",\\n      \\\"Increase Maximum Money\\\",\\n      \\\"Improve Studying\\\",\\n      \\\"Improve Gym Training\\\",\\n      \\\"Exchange for Corporation Research\\\",\\n      \\\"Exchange for Bladeburner Rank\\\",\\n      \\\"Exchange for Bladeburner SP\\\",\\n      \\\"Generate Coding Contract\\\",\\n      \\\"Company Favor\\\"\\n    ]\\n  */\\n\\n  const ten_trillions = 10 * 1000 * 1000 * 1000 * 1000;  // k -> m -> g -> t\\n\\n  for (let i = 0; i < 25; i++) {\\n    ns.print(`--> Improve studying ${i + 1} of 25`);\\n    await spendHashesOnAction(ns, 'Improve Studying', 'home', 5);\\n  }\\n\\n  while (true) {\\n    const r = Math.random();\\n    if (r < 0.2) {\\n      const target = selectRandomServer(ns);\\n      const minLevel = ns.getServerMinSecurityLevel(target);\\n      if (minLevel > 1.0) {\\n        await spendHashesOnAction(ns, \\\"Reduce Minimum Security\\\", target, 1);\\n        const minLevelAfter = ns.getServerMinSecurityLevel(target);\\n        ns.print(`Reduced minimum security level on ${target} from ${ns.formatNumber(minLevel)} to ${ns.formatNumber(minLevelAfter)}`);\\n      }\\n    } else if (r < 0.4) {\\n      const target = selectRandomServer(ns);\\n      const maxMoney = ns.getServerMaxMoney(target);\\n      if (maxMoney < ten_trillions) {\\n        await spendHashesOnAction(ns, \\\"Increase Maximum Money\\\", target, 1);\\n        const maxMoneyAfter = ns.getServerMaxMoney(target);\\n        ns.print(`Increased maximum money on ${target} from ${ns.formatNumber(maxMoney)}\\\\$ to ${ns.formatNumber(maxMoneyAfter)}\\\\$`);\\n      }\\n      /*\\n      } else if (r < 0.3) {\\n              if (ns.bladeburner.inBladeburner()) {\\n                      await spendHashesOnAction(ns, 'Exchange for Bladeburner Rank', 'home', 1);\\n              }\\n      } else if (r < 0.4) {\\n              if (ns.bladeburner.inBladeburner()) {\\n                      await spendHashesOnAction(ns, 'Exchange for Bladeburner SP', 'home', 1);\\n              }\\n      */\\n    } else {\\n      await spendHashesOnAction(ns, \\\"Sell for Money\\\", \\\"target\\\", 5);\\n      ns.print(`Sold hashes for money (x5)`);\\n    }\\n\\n    await ns.sleep(250);\\n  }\\n}\\n\",\"filename\":\"spend-hashes.js\",\"server\":\"home\"}}],[\"manage-bladeburner.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction findNextAction(ns) {\\n  const orderOfTypes = ['Operation', 'Contract', 'General'];\\n  const targetedTasks = {\\n    'General': ['Training'],\\n    'Contract': ['Tracking', 'Bounty Hunter', 'Retirement'],\\n    'Operation': ['Investigation', 'Stealth Retirement Operation', 'Assassination']\\n  }\\n\\n  const lowStaminaTask = 'Hyperbolic Regeneration Chamber';\\n\\n  const [currentStamina, maxStamina] = ns.bladeburner.getStamina();\\n  const playerRank = ns.bladeburner.getRank();\\n\\n  if (currentStamina < 0.80 * maxStamina) {\\n    return {\\n      'type': 'General',\\n      'name': lowStaminaTask\\n    };\\n  }\\n\\n  // BlackOps have a special structure\\n  const nextBlackOp = ns.bladeburner.getNextBlackOp();\\n  if (nextBlackOp != undefined) {\\n\\n    const [lowerBound, _] = ns.bladeburner.getActionEstimatedSuccessChance('BlackOp', nextBlackOp['name']);\\n    if (0.9 < lowerBound && nextBlackOp['rank'] <= playerRank) {\\n      return {\\n        'type': 'BlackOp',\\n        'name': nextBlackOp['name']\\n      };\\n    }\\n  }\\n\\n  for (let actionType of orderOfTypes) {\\n    const actionNames = targetedTasks[actionType].reverse();\\n    for (let actionName of actionNames) {\\n      const [lowerBound, _] = ns.bladeburner.getActionEstimatedSuccessChance(actionType, actionName);\\n      const countRemaining = ns.bladeburner.getActionCountRemaining(actionType, actionName);\\n      if (0.8 < lowerBound && 0 < countRemaining) {\\n        return {\\n          'type': actionType,\\n          'name': actionName\\n        };\\n      }\\n    }\\n  }\\n\\n  return {\\n    'type': 'General',\\n    'name': 'Training'\\n  };\\n}\\n\\n/** @param {NS} ns */\\nfunction upgradeBladeburnerSkills(ns) {\\n  const targetedSkills = [\\n    \\\"Blade's Intuition\\\",\\n    \\\"Cloak\\\",\\n    \\\"Short-Circuit\\\",\\n    \\\"Digital Observer\\\",\\n    \\\"Tracer\\\",\\n    \\\"Hyperdrive\\\",\\n    \\\"Hands of Midas\\\"\\n  ];\\n\\n  for (let skill of targetedSkills) {\\n    const skillCost = ns.bladeburner.getSkillUpgradeCost(skill);\\n    const numberSkillPoints = ns.bladeburner.getSkillPoints();\\n    if (skillCost < numberSkillPoints) {\\n      ns.bladeburner.upgradeSkill(skill);\\n    }\\n  }\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('sleep');\\n  const ten_seconds = 10 * 1000;\\n\\n  while (!ns.bladeburner.inBladeburner()) {\\n    ns.print('Not in BladeBurner');\\n    await ns.sleep(ten_seconds);\\n  }\\n\\n  ns.print('Managing bladeburner');\\n\\n  while (true) {\\n    const currentAction = ns.bladeburner.getCurrentAction();\\n\\n    const newAction = findNextAction(ns);\\n    if (currentAction['type'] != newAction['type'] || currentAction['name'] != newAction['name']) {\\n      const result = ns.bladeburner.startAction(newAction['type'], newAction['name']);\\n      if (!result) {\\n        ns.print(`Unable to start action: ${JSON.stringify(newAction)}`);\\n      }\\n    }\\n\\n    upgradeBladeburnerSkills(ns);\\n    await ns.sleep(ten_seconds);\\n  }\\n}\\n\",\"filename\":\"manage-bladeburner.js\",\"server\":\"home\"}}],[\"hacking-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport function buildHackingProgramList(ns) {\\n  return [\\n    { name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\" },\\n    { name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\" },\\n    { name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\" },\\n    { name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\" },\\n    { name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\" }\\n  ];\\n}\\n\\n/** @param {NS} ns */\\nexport function listAvailablePrograms(ns, hackingPrograms) {\\n  let availablePrograms = [];\\n  for (const program of hackingPrograms) {\\n    if (ns.fileExists(program.executableName, \\\"home\\\")) {\\n      availablePrograms.push(program);\\n    }\\n  }\\n  return availablePrograms;\\n}\\n\\n/** @param {NS} ns */\\nexport function countAvailablePrograms(ns, hackingPrograms) {\\n  const availablePrograms = listAvailablePrograms(ns, hackingPrograms);\\n  return availablePrograms.length;\\n}\\n\",\"filename\":\"hacking-programs.js\",\"server\":\"home\"}}],[\"buy-darkweb-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const SLEEP_DELAY = 15000;  // in milliseconds\\n    const HOME_SERVER = 'home';\\n    const TOR_ROUTER_PRICE = 200000;\\n\\n    if (!ns.hasTorRouter()) {\\n        ns.print('TOR router not purchased yet');\\n    }\\n\\n    while (!ns.hasTorRouter()) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(HOME_SERVER);\\n\\n        if (TOR_ROUTER_PRICE <= moneyAvailable) {\\n            if (ns.singularity.purchaseTor()) {\\n                ns.print('TOR router purchased');\\n            }\\n        }\\n\\n        await ns.sleep(SLEEP_DELAY);\\n    }\\n\\n    while (true) {\\n        const allHackingPrograms = ns.singularity.getDarkwebPrograms();\\n        const purchasedHackingPrograms = allHackingPrograms.filter((program) => ns.fileExists(program));\\n        const hackingProgramsToPurchase = allHackingPrograms.filter((program) => !ns.fileExists(program));\\n\\n        if (purchasedHackingPrograms.length == allHackingPrograms.length) {\\n            break;\\n        }\\n\\n        for (const program of hackingProgramsToPurchase) {\\n            const programCost = ns.singularity.getDarkwebProgramCost(program);\\n            const moneyAvailable = ns.getServerMoneyAvailable(HOME_SERVER);\\n\\n            if (programCost <= moneyAvailable) {\\n                if (ns.singularity.purchaseProgram(program)) {\\n                    ns.print(`Purchased ${program}`);\\n                }\\n            }\\n        }\\n\\n        await ns.sleep(SLEEP_DELAY);\\n    }\\n}\\n\",\"filename\":\"buy-darkweb-programs.js\",\"server\":\"home\"}}],[\"manage-corporation.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Ref: https://github.com/danielyxie/bitburner/blob/dev/markdown/bitburner.corporation.md\\n    if (ns.corporation.hasCorporation()) {\\n        ns.tprint('Player has corporation');\\n    } else {\\n        ns.tprint('Player does not have corporation');\\n    }\\n\\n    const corporation = ns.corporation.getCorporation();\\n    ns.tprint(`Corporation data:\\\\n${corporation}`);\\n}\\n\",\"filename\":\"manage-corporation.js\",\"server\":\"home\"}}],[\"buy-hacknet-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  const hacknetConstants = ns.formulas.hacknetServers.constants();\\n  /*\\n      ns.formulas.hacknetServers.constants()\\n      {\\n          \\\"HashesPerLevel\\\":0.001,\\n          \\\"BaseCost\\\":50000,\\n          \\\"RamBaseCost\\\":200000,\\n          \\\"CoreBaseCost\\\":1000000,\\n          \\\"CacheBaseCost\\\":10000000,\\n          \\\"PurchaseMult\\\":3.2,\\n          \\\"UpgradeLevelMult\\\":1.1,\\n          \\\"UpgradeRamMult\\\":1.4,\\n          \\\"UpgradeCoreMult\\\":1.55,\\n          \\\"UpgradeCacheMult\\\":1.85,\\n          \\\"MaxServers\\\":20,\\n          \\\"MaxLevel\\\":300,\\n          \\\"MaxRam\\\":8192,\\n          \\\"MaxCores\\\":128,\\n          \\\"MaxCache\\\":15\\n      }\\n  */\\n\\n  /*\\n  const targetCount = hacknetConstants['MaxServers'];\\n  const targetLevel = hacknetConstants['MaxLevel'];\\n  const targetRam = hacknetConstants['MaxRam'];\\n  const targetCore = hacknetConstants['MaxCores'];\\n  const targetCache = hacknetConstants['MaxCache'];\\n  */\\n\\n  const targetCount = 12;\\n  const targetLevel = 100;\\n  const targetRam = hacknetConstants['MaxRam'];\\n  const targetCore = 24;\\n  const targetCache = hacknetConstants['MaxCache'];\\n\\n  while (true) {\\n    if (ns.hacknet.numNodes() < targetCount) {\\n      const cost = ns.hacknet.getPurchaseNodeCost();\\n      if (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n        ns.hacknet.purchaseNode();\\n        ns.print('Bought net node');\\n      }\\n    }\\n\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n      if (ns.hacknet.getNodeStats(i).level < targetLevel) {\\n        const cost = ns.hacknet.getLevelUpgradeCost(i, 1);\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n          ns.hacknet.upgradeLevel(i, 1);\\n          const newLevel = ns.hacknet.getNodeStats(i).level;\\n          ns.print(`Upgrading node ${i} to level ${newLevel}`);\\n        }\\n      }\\n    }\\n\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n      if (ns.hacknet.getNodeStats(i).ram < targetRam) {\\n        const cost = ns.hacknet.getRamUpgradeCost(i, 1);\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n          ns.hacknet.upgradeRam(i, 1);\\n          const newLevel = ns.hacknet.getNodeStats(i).ram;\\n          ns.print(`Upgrading node ${i} to ram ${newLevel}`);\\n        }\\n      }\\n    }\\n\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n      if (ns.hacknet.getNodeStats(i).cores < targetCore) {\\n        const cost = ns.hacknet.getCoreUpgradeCost(i, 1);\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n          ns.hacknet.upgradeCore(i, 1);\\n          const newLevel = ns.hacknet.getNodeStats(i).cores;\\n          ns.print(`Upgrading node ${i} to cores ${newLevel}`);\\n        }\\n      }\\n    }\\n\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n      if (ns.hacknet.getNodeStats(i).cache < targetCache) {\\n        const cost = ns.hacknet.getCacheUpgradeCost(i, 1);\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n          ns.hacknet.upgradeCache(i, 1);\\n          const newLevel = ns.hacknet.getNodeStats(i).cache;\\n          ns.print(`Upgrading node ${i} to cache ${newLevel}`);\\n        }\\n      }\\n    }\\n\\n    let countCompletelyUpgraded = 0;\\n    if (ns.hacknet.numNodes() == targetCount) {\\n      for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n        const nodeStats = ns.hacknet.getNodeStats(i);\\n        const allLevelUpgraded = nodeStats.level == targetLevel;\\n        const allRamUpgraded = nodeStats.ram == targetRam;\\n        const allCoreUpgraded = nodeStats.cores == targetCore;\\n        const allCacheUpgraded = nodeStats.cache == targetCache;\\n\\n\\n        if (allLevelUpgraded && allRamUpgraded && allCoreUpgraded && allCacheUpgraded) {\\n          countCompletelyUpgraded++;\\n        }\\n      }\\n    }\\n\\n    if (countCompletelyUpgraded == targetCount) {\\n      break;\\n    }\\n\\n    await ns.sleep(500);\\n  }\\n}\\n\",\"filename\":\"buy-hacknet-servers.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"hacknet-server-0\",\"hacknet-server-1\",\"hacknet-server-2\",\"hacknet-server-3\",\"hacknet-server-4\",\"hacknet-server-5\",\"hacknet-server-6\",\"hacknet-server-7\",\"hacknet-server-8\",\"hacknet-server-9\",\"hacknet-server-10\",\"hacknet-server-11\",\"hacknet-server-12\",\"hacknet-server-13\",\"hacknet-server-14\",\"hacknet-server-15\",\"hacknet-server-16\",\"hacknet-server-17\",\"hacknet-server-18\",\"hacknet-server-19\",\"neighbor-0\",\"neighbor-1\",\"neighbor-2\",\"darkweb\",\"neighbor-3\",\"neighbor-4\",\"neighbor-5\",\"neighbor-6\",\"neighbor-7\",\"neighbor-8\",\"neighbor-9\",\"neighbor-10\",\"neighbor-11\",\"neighbor-12\",\"neighbor-13\",\"neighbor-14\",\"neighbor-15\",\"neighbor-16\",\"neighbor-17\",\"neighbor-18\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.032,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"launch-hacking.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13423.610000013774,\"ramUsage\":11.2,\"server\":\"home\",\"scriptKey\":\"launch-hacking.js*[]\",\"title\":\"launch-hacking.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"spend-hashes.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13423.210000013773,\"ramUsage\":6,\"server\":\"home\",\"scriptKey\":\"spend-hashes.js*[]\",\"title\":\"spend-hashes.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-sleeves.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13422.810000013771,\"ramUsage\":21.6,\"server\":\"home\",\"scriptKey\":\"manage-sleeves.js*[]\",\"title\":\"manage-sleeves.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-gang.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13422.61000001377,\"ramUsage\":24.7,\"server\":\"home\",\"scriptKey\":\"manage-gang.js*[]\",\"title\":\"manage-gang.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[3506718.090290587,63336,21112,42224],\"neo-net\":[0,0,21112,42224],\"nectar-net\":[0,0,63336,42224],\"joesguns\":[0,0,21112,42224],\"netlink\":[0,0,0,21112],\"harakiri-sushi\":[65141818.80885813,21112,63336,63336],\"rho-construction\":[0,0,21112,63336],\"stormtech\":[0,0,0,42224],\"computek\":[0,0,63336,21112],\"fulcrumassets\":[0,0,21112,21112],\"alpha-ent\":[0,0,63336,42224],\"millenium-fitness\":[0,0,21112,21112],\"syscore\":[0,0,0,42224],\"omega-net\":[0,0,21112,0],\"summit-uni\":[0,0,21112,84448],\"helios\":[0,0,63336,21112],\"catalyst\":[0,0,42224,21112],\"lexo-corp\":[0,0,21112,42224],\"kuai-gong\":[352991792775.904,21112,21112,0],\"deltaone\":[26971103827.068047,21112,21112,21112],\"zeus-med\":[24202515265.108078,21112,21112,21112],\"microdyne\":[0,0,21112,42224],\"max-hardware\":[0,0,21112,21112],\"applied-energetics\":[15515459630.546429,21112,0,21112],\"The-Cave\":[0,0,84448,0],\"fulcrumtech\":[0,0,0,21112],\"aerocorp\":[0,0,42224,21112],\"powerhouse-fitness\":[0,0,42224,21112],\"unitalife\":[0,0,42224,63336],\"zb-institute\":[0,0,21112,42224],\"omnitek\":[0,0,63336,21112],\"CSEC\":[0,0,84448,0],\"4sigma\":[0,0,21112,0],\"zb-def\":[0,0,42224,42224],\"clarkinc\":[286304478239.58905,21112,42224,42224],\"I.I.I.I\":[0,0,105560,0],\"blade\":[0,0,0,21112],\"rothman-uni\":[0,0,0,21112],\"global-pharm\":[0,0,0,21112],\"the-hub\":[2470620493.2334304,21112,21112,21112],\"univ-energy\":[0,0,42224,0],\"nwo\":[0,0,0,42224],\"crush-fitness\":[0,0,0,21112],\"nova-med\":[40959828625.831856,42224,21112,42224],\"megacorp\":[0,0,0,21112],\"titan-labs\":[0,0,21112,0],\"aevum-police\":[0,0,21112,0],\"iron-gym\":[0,0,0,63336],\"avmnite-02h\":[0,0,42224,0],\"snap-fitness\":[0,0,21112,0],\"silver-helix\":[0,0,0,42224],\"omnia\":[0,0,0,42224],\"solaris\":[0,0,21112,0],\"foodnstuff\":[0,0,0,21112],\"ecorp\":[0,0,21112,0],\"johnson-ortho\":[0,0,0,21112],\"defcomm\":[13246621872.237225,21112,0,21112],\"phantasy\":[0,0,0,42224],\"icarus\":[0,0,0,21112],\"sigma-cosmetics\":[0,0,21112,63336],\"b-and-a\":[0,0,0,21112],\".\":[0,0,42224,0],\"galactic-cyber\":[0,0,21112,0],\"infocomm\":[0,0,21112,0],\"taiyang-digital\":[0,21112,0,21112],\"run4theh111z\":[0,0,21112,0],\"darkweb\":[0,0,21112,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":659899596.4172537,\"onlineMoneyMade\":762731069266.417,\"onlineRunningTime\":13420.01000001376,\"ramUsage\":3.1,\"server\":\"home\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":21112,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"39.1.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"ecorp\"}}]]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":65.06983618673999,\"minDifficulty\":39.235836186739995,\"moneyAvailable\":1267688611855.214,\"moneyMax\":1267688611855.214,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1328,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"47.0.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"megacorp\"}}]]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":69.86215112908928,\"minDifficulty\":41.68738810650749,\"moneyAvailable\":996662871519.697,\"moneyMax\":1016596128950.091,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1300,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"32.2.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"b-and-a\"}}]]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":35.232179432991025,\"minDifficulty\":35.232179432991025,\"moneyAvailable\":478880410148.65283,\"moneyMax\":478880410148.65283,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":902,\"serverGrowth\":77,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"42.4.7.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"blade\"}}]]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":36.174813190795284,\"minDifficulty\":36.174813190795284,\"moneyAvailable\":0,\"moneyMax\":357740817815.82294,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":950,\"serverGrowth\":74,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"blade\":[3509508152404.817,1976,7800,104]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2589295.7400666187,\"onlineMoneyMade\":3509508152404.817,\"onlineRunningTime\":12599.010000010774,\"ramUsage\":2.45,\"server\":\"blade\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":104,\"temporary\":false}}]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"89.1.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"nwo\"}}]]},\"serversOnNetwork\":[\"4sigma\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":74.8205675374898,\"minDifficulty\":40.036567537489795,\"moneyAvailable\":559298376080.5159,\"moneyMax\":559298376080.5159,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1101,\"serverGrowth\":70,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"50.9.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"clarkinc\"}}]]},\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":73.5,\"hackDifficulty\":19.713918093369998,\"minDifficulty\":19.225559731502596,\"moneyAvailable\":0,\"moneyMax\":303828602743.67786,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1061,\"serverGrowth\":57,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"60.9.1.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"omnitek\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":60.0616860155356,\"minDifficulty\":36.14405229522489,\"moneyAvailable\":0,\"moneyMax\":243159733761.55362,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1020,\"serverGrowth\":95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"omnitek\":[2409910384627.871,1664,7176,104]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2371822.0821082676,\"onlineMoneyMade\":2409910384627.871,\"onlineRunningTime\":12858.610000011719,\"ramUsage\":2.45,\"server\":\"omnitek\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":104,\"temporary\":false}}]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"95.1.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"4sigma\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":85.5,\"hackDifficulty\":20.25492459485395,\"minDifficulty\":20.15892459485395,\"moneyAvailable\":0,\"moneyMax\":390622736378.1021,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1047,\"serverGrowth\":80,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"80.3.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"kuai-gong\"}}]]},\"serversOnNetwork\":[\"fulcrumtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":40.036567537489795,\"minDifficulty\":40.036567537489795,\"moneyAvailable\":374597714428.1315,\"moneyMax\":382089668716.6941,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1062,\"serverGrowth\":95,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-139522.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[155,41,76,106,112,196,119,36,164,148,172,127,170,50,30,44,67,182,159,120,69,157,146,9,8,143,6,124,161,188,134,192,19,23,125,189,57,73,147],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"69.7.3.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"fulcrumtech\"}}]]},\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":50.43247141375234,\"minDifficulty\":31.75847141375235,\"moneyAvailable\":0,\"moneyMax\":30695538899.12023,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":973,\"serverGrowth\":99,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"fulcrumtech\":[331676648416.5334,1248,9048,104]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2718420.7244793894,\"onlineMoneyMade\":331676648416.5334,\"onlineRunningTime\":11835.410000007996,\"ramUsage\":2.45,\"server\":\"fulcrumtech\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":104,\"temporary\":false}}]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"59.2.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"fulcrumassets\"}}]]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":44.292119043199996,\"moneyAvailable\":18946875.61470724,\"moneyMax\":18946875.61470724,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1315,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"20.9.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"stormtech\"}}]]},\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"4sigma\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":37.638649295856744,\"minDifficulty\":37.51864929585675,\"moneyAvailable\":0,\"moneyMax\":18840229915.64905,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1011,\"serverGrowth\":84,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-736166.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"4547\",-91],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"54.5.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"defcomm\"}}]]},\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":61.226290588439795,\"minDifficulty\":34.74229058843979,\"moneyAvailable\":13511554309.681969,\"moneyMax\":13511554309.681969,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1005,\"serverGrowth\":65,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-97113.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[118,185,47,2,127,85,96,16,60,15,97,17,157],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"89.1.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"infocomm\"}}]]},\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":32.40660348342077,\"minDifficulty\":32.40660348342077,\"moneyAvailable\":15069185637.247404,\"moneyMax\":15069185637.247404,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":922,\"serverGrowth\":64,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"54.2.2.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"helios\"}}]]},\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":38.83334911682714,\"minDifficulty\":37.585349116827146,\"moneyAvailable\":1080.529987451519,\"moneyMax\":9505675776.20522,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":854,\"serverGrowth\":71,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"helios\":[149112955651.78174,2184,8840,104]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2908710.1751929466,\"onlineMoneyMade\":149112955651.78174,\"onlineRunningTime\":11916.21000000829,\"ramUsage\":2.45,\"server\":\"helios\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":104,\"temporary\":false}}]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"38.3.2.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"vitalife\"}}]]},\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":37.41795455770942,\"minDifficulty\":30.585954557709446,\"moneyAvailable\":1155468548.2114098,\"moneyMax\":11545762505.847784,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":783,\"serverGrowth\":66,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"vitalife\":[156105133361.0197,1352,6188,52]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1984447.128869954,\"onlineMoneyMade\":156105133361.0197,\"onlineRunningTime\":11878.810000008154,\"ramUsage\":2.45,\"server\":\"vitalife\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"83.2.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"icarus\"}}]]},\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":38.402421923714705,\"minDifficulty\":38.402421923714705,\"moneyAvailable\":18796858746.16108,\"moneyMax\":18796858746.16108,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":864,\"serverGrowth\":95,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"55.5.0.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":41.89691078374081,\"minDifficulty\":36.03291078374082,\"moneyAvailable\":658090395.5934167,\"moneyMax\":21285122973.429356,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":832,\"serverGrowth\":85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"univ-energy\":[301431234655.008,1560,5252,104]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1807749.7817787938,\"onlineMoneyMade\":301431234655.008,\"onlineRunningTime\":13076.610000012512,\"ramUsage\":2.45,\"server\":\"univ-energy\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"3.3.9.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"titan-labs\"}}]]},\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":39.018414960945684,\"minDifficulty\":31.682414960945696,\"moneyAvailable\":2153254067.6937356,\"moneyMax\":18398655426.245895,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":863,\"serverGrowth\":62,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"titan-labs\":[233625616193.5049,1300,5928,52]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1902894.5071355724,\"onlineMoneyMade\":233625616193.5049,\"onlineRunningTime\":12954.810000012068,\"ramUsage\":2.45,\"server\":\"titan-labs\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"84.4.4.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"microdyne\"}}]]},\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":25.935826010146656,\"minDifficulty\":25.623826010146658,\"moneyAvailable\":136.2378024106508,\"moneyMax\":9004443890.270325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":828,\"serverGrowth\":89,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"microdyne\":[149450633087.89044,1768,3354,104]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1355812.3363340953,\"onlineMoneyMade\":149450633087.89044,\"onlineRunningTime\":11992.410000008567,\"ramUsage\":2.45,\"server\":\"microdyne\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"7.8.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"taiyang-digital\"}}]]},\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":34.7250213298688,\"minDifficulty\":34.7250213298688,\"moneyAvailable\":15396792709.90432,\"moneyMax\":15396792709.90432,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":899,\"serverGrowth\":80,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"70.7.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"galactic-cyber\"}}]]},\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":97.5,\"hackDifficulty\":43.93373884558343,\"minDifficulty\":25.377738845583426,\"moneyAvailable\":14964919544.120687,\"moneyMax\":14964919544.120687,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":828,\"serverGrowth\":70,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"99.9.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"aerocorp\"}}]]},\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":32.40494034892437,\"minDifficulty\":32.29894034892437,\"moneyAvailable\":0,\"moneyMax\":21192475663.715992,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":881,\"serverGrowth\":65,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"64.7.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":34.762007516704685,\"minDifficulty\":34.60600751670468,\"moneyAvailable\":8353157300.599214,\"moneyMax\":15580199811.36727,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":873,\"serverGrowth\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"omnia\":[101409702927.87901,715,754,195]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":429850.2770583035,\"onlineMoneyMade\":101409702927.87901,\"onlineRunningTime\":12189.410000009284,\"ramUsage\":2.45,\"server\":\"omnia\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"3.8.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"zb-def\"}}]]},\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":90,\"hackDifficulty\":45.11176599740159,\"minDifficulty\":25.52289067745356,\"moneyAvailable\":15720664799.481483,\"moneyMax\":15720664799.481483,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":784,\"serverGrowth\":70,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"43.7.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"applied-energetics\"}}]]},\"serversOnNetwork\":[\"nova-med\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":26.58848769523453,\"minDifficulty\":26.58848769523453,\"moneyAvailable\":16794432481.285175,\"moneyMax\":17130321130.91088,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":785,\"serverGrowth\":70,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"95.8.7.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":32.76954824106412,\"minDifficulty\":28.59754824106413,\"moneyAvailable\":7374587550.666096,\"moneyMax\":14603583311.391155,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":833,\"serverGrowth\":77,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"solaris\":[243748115311.72797,1586,2262,416]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1109455.4581781507,\"onlineMoneyMade\":243748115311.72797,\"onlineRunningTime\":12111.410000009,\"ramUsage\":2.45,\"server\":\"solaris\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"20.4.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"deltaone\"}}]]},\"serversOnNetwork\":[\"snap-fitness\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":53.24179132849224,\"minDifficulty\":30.427791328492244,\"moneyAvailable\":27510525903.60941,\"moneyMax\":27510525903.60941,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":821,\"serverGrowth\":70,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"8.9.6.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":28.74038836856056,\"minDifficulty\":28.065625900525344,\"moneyAvailable\":2413124639.5070405,\"moneyMax\":28754803921.02817,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":804,\"serverGrowth\":80,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"global-pharm\":[453494183591.3313,1612,2288,806]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1230085.3778269235,\"onlineMoneyMade\":453494183591.3313,\"onlineRunningTime\":12340.010000009832,\"ramUsage\":2.45,\"server\":\"global-pharm\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"93.9.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"nova-med\"}}]]},\"serversOnNetwork\":[\"defcomm\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":53.7249194366854,\"minDifficulty\":30.014919436685393,\"moneyAvailable\":20479914312.915928,\"moneyMax\":20479914312.915928,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":827,\"serverGrowth\":65,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"92.3.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"zeus-med\"}}]]},\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":29.516621047951684,\"minDifficulty\":29.414621047951684,\"moneyAvailable\":0,\"moneyMax\":24202515265.108078,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":837,\"serverGrowth\":75,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"94.2.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"global-pharm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":30.75617570231654,\"minDifficulty\":27.80541323428132,\"moneyAvailable\":4637486484.4141,\"moneyMax\":19275971535.013443,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":812,\"serverGrowth\":78,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"unitalife\":[336631334885.9565,1638,2704,338]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1218192.2871573262,\"onlineMoneyMade\":336631334885.9565,\"onlineRunningTime\":12304.410000009702,\"ramUsage\":2.45,\"server\":\"unitalife\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"98.8.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":35.58816809196799,\"minDifficulty\":32.776168091967996,\"moneyAvailable\":187.4543350372145,\"moneyMax\":12911153980.830063,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":668,\"serverGrowth\":59,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"lexo-corp\":[158242613132.00494,1222,3120,208]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1184212.0281013339,\"onlineMoneyMade\":158242613132.00494,\"onlineRunningTime\":11658.01000000735,\"ramUsage\":2.45,\"server\":\"lexo-corp\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"17.7.1.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":87,\"hackDifficulty\":25.582685101774334,\"minDifficulty\":24.178685101774345,\"moneyAvailable\":2314519404.8574777,\"moneyMax\":11127204431.832294,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":522,\"serverGrowth\":43,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"rho-construction\":[174790671408.11133,1300,7150,52]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1959672.4309036855,\"onlineMoneyMade\":174790671408.11133,\"onlineRunningTime\":13280.610000013254,\"ramUsage\":2.45,\"server\":\"rho-construction\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"68.5.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":93,\"hackDifficulty\":26.351075301080826,\"minDifficulty\":23.83969406706322,\"moneyAvailable\":9349324680.243341,\"moneyMax\":14574225389.05175,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":504,\"serverGrowth\":60,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"alpha-ent\":[241812766936.84393,1339,3107,260]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1149420.8764996883,\"onlineMoneyMade\":241812766936.84393,\"onlineRunningTime\":13187.210000012914,\"ramUsage\":2.45,\"server\":\"alpha-ent\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"46.9.9.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":39.59369523456,\"minDifficulty\":35.433695234560005,\"moneyAvailable\":1239260960.4865003,\"moneyMax\":4933514586.351961,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":418,\"serverGrowth\":46,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[66934762274.0866,1560,5356,26]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1814545.833589992,\"onlineMoneyMade\":66934762274.0866,\"onlineRunningTime\":12410.81000001009,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"61.6.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":73.5,\"hackDifficulty\":23.787075564544633,\"minDifficulty\":20.843694053253746,\"moneyAvailable\":1414441170.4438434,\"moneyMax\":3730375177.5241427,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":379,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"rothman-uni\":[65493139988.62665,1443,4719,26]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1227799.4331267865,\"onlineMoneyMade\":65493139988.62665,\"onlineRunningTime\":12459.410000010266,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"38.8.0.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":30.977677658996072,\"minDifficulty\":30.145677658996078,\"moneyAvailable\":317.89830973911097,\"moneyMax\":16540307608.78188,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":749,\"serverGrowth\":81,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"zb-institute\":[211397559848.37103,1352,5876,52]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1902894.5071355724,\"onlineMoneyMade\":211397559848.37103,\"onlineRunningTime\":12430.41000001016,\"ramUsage\":2.45,\"server\":\"zb-institute\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"8.6.3.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":94.5,\"hackDifficulty\":24.89654212719685,\"minDifficulty\":24.116542127196855,\"moneyAvailable\":1318319293.7886395,\"moneyMax\":5860117759.597221,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":426,\"serverGrowth\":43,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[113096924946.61096,1482,8034,52]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2375899.713194982,\"onlineMoneyMade\":113096924946.61096,\"onlineRunningTime\":13250.210000013143,\"ramUsage\":2.45,\"server\":\"summit-uni\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"37.5.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"syscore\"}}]]},\"serversOnNetwork\":[\"computek\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":29.275171674555235,\"minDifficulty\":29.181171674555234,\"moneyAvailable\":0,\"moneyMax\":9300741855.29453,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":588,\"serverGrowth\":69,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"85.1.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"the-hub\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":94.5,\"hackDifficulty\":27.061817112443915,\"minDifficulty\":24.116542127196855,\"moneyAvailable\":5415437011.840157,\"moneyMax\":7044270734.177238,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":443,\"serverGrowth\":41,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[76514213111.69795,762,1038,492]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":569143.2005270615,\"onlineMoneyMade\":76514213111.69795,\"onlineRunningTime\":13210.610000012999,\"ramUsage\":2.45,\"server\":\"catalyst\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"38.6.2.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":57,\"hackDifficulty\":18.975005236416045,\"minDifficulty\":16.494385131687682,\"moneyAvailable\":2098721743.6727006,\"moneyMax\":2843205728.9778666,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":310,\"serverGrowth\":50,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"the-hub\":[24693782475.290432,516,1722,138]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":377562.2623451865,\"onlineMoneyMade\":24693782475.290432,\"onlineRunningTime\":13230.410000013071,\"ramUsage\":2.45,\"server\":\"the-hub\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":3,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"83.4.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":97.5,\"hackDifficulty\":28.16317974519892,\"minDifficulty\":28.07517974519892,\"moneyAvailable\":0,\"moneyMax\":3941838385.2972693,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":399,\"serverGrowth\":53,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"23.8.3.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":35.71407520094644,\"minDifficulty\":31.86583946861431,\"moneyAvailable\":3302012805.7363186,\"moneyMax\":4813595702.888659,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":388,\"serverGrowth\":54,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[41136407123.76252,738,1356,132]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":579494.1102087364,\"onlineMoneyMade\":41136407123.76252,\"onlineRunningTime\":13345.61000001349,\"ramUsage\":2.45,\"server\":\"netlink\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"27.1.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":78,\"hackDifficulty\":21.7554418153839,\"minDifficulty\":21.6774418153839,\"moneyAvailable\":0,\"moneyMax\":1234167257.8473387,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":250,\"serverGrowth\":43,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"79.2.5.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1.5,\"hackDifficulty\":1.0243496951052353,\"minDifficulty\":1,\"moneyAvailable\":1280129.7653576138,\"moneyMax\":1326281.2930295062,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[927490754.6561295,22129,12052,2497]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1002107.245555263,\"onlineMoneyMade\":927490754.6561295,\"onlineRunningTime\":13420.610000013763,\"ramUsage\":2.45,\"server\":\"n00dles\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":1,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"80.4.3.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":4.7166053079575745,\"minDifficulty\":4.00365675374898,\"moneyAvailable\":28162091.20199626,\"moneyMax\":36422290.68571172,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[1239150609.6111276,2100,114954,10302]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7565716.560028671,\"onlineMoneyMade\":1239150609.6111276,\"onlineRunningTime\":13417.410000013751,\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"54.3.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":4.489506547207348,\"minDifficulty\":4.00365675374898,\"moneyAvailable\":28921560.678131446,\"moneyMax\":38695851.6537133,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"sigma-cosmetics\":[3055521879.340702,3564,101646,8940]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6781200.299375019,\"onlineMoneyMade\":3055521879.340702,\"onlineRunningTime\":13415.410000013744,\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"35.1.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":6.952457086276024,\"minDifficulty\":6.5365824551003735,\"moneyAvailable\":37834186.76019476,\"moneyMax\":45527863.35713965,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"joesguns\":[3719712592.4248924,3750,80856,5754]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6977962.038939159,\"onlineMoneyMade\":3719712592.4248924,\"onlineRunningTime\":13413.210000013736,\"ramUsage\":2.45,\"server\":\"joesguns\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"62.8.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"foodnstuff\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":11.085958318277628,\"minDifficulty\":10.409507559747349,\"moneyAvailable\":116877982.62578297,\"moneyMax\":173221017.3799714,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"zer0\":[9759811530.893728,4329,41392,3315]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5534766.377328993,\"onlineMoneyMade\":9759811530.893728,\"onlineRunningTime\":13279.010000013248,\"ramUsage\":2.45,\"server\":\"zer0\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"19.9.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":8.348565771046916,\"minDifficulty\":8.00731350749796,\"moneyAvailable\":37747798.82249215,\"moneyMax\":46266779.15117897,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"nectar-net\":[4435284957.92988,4248,57546,4878]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6337151.9770112205,\"onlineMoneyMade\":4435284957.92988,\"onlineRunningTime\":13391.610000013658,\"ramUsage\":2.45,\"server\":\"nectar-net\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"83.5.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"computek\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":10.515542036443067,\"minDifficulty\":9.601398334390252,\"moneyAvailable\":42778177.11178155,\"moneyMax\":89270320.30811696,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"neo-net\":[3971897242.292174,3887,60554,4173]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7744564.406029173,\"onlineMoneyMade\":3971897242.292174,\"onlineRunningTime\":13387.610000013643,\"ramUsage\":2.45,\"server\":\"neo-net\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"75.6.6.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"zer0\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":15.389861824140851,\"minDifficulty\":13.558811951999997,\"moneyAvailable\":48358817.87965038,\"moneyMax\":757092749.7465645,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"silver-helix\":[15691735196.865986,2132,34892,910]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4957719.796269314,\"onlineMoneyMade\":15691735196.865986,\"onlineRunningTime\":13273.610000013228,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"18.9.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":9.897128848527231,\"minDifficulty\":6.15217911408083,\"moneyAvailable\":2661.7860839717705,\"moneyMax\":52511953.12242174,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"hong-fang-tea\":[3260861955.1184516,3120,48900,4116]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4335263.2326521035,\"onlineMoneyMade\":3260861955.1184516,\"onlineRunningTime\":13409.410000013722,\"ramUsage\":2.45,\"server\":\"hong-fang-tea\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"54.8.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":7.9550832882772635,\"minDifficulty\":6.277733789878399,\"moneyAvailable\":747.9068751170236,\"moneyMax\":71416256.24649356,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"harakiri-sushi\":[9633040583.747759,5562,44718,4212]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4208300.628361102,\"onlineMoneyMade\":9633040583.747759,\"onlineRunningTime\":13405.81000001371,\"ramUsage\":2.45,\"server\":\"harakiri-sushi\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-789732.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[57,153,177,33,187,78,94,95,16,34,7,190,164,110,92,5,67,21,157,200,199,123,101,112,96,39,61,78,122,185,59,131,93,121,142,77,36,50,10,159,195,126,115,158],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"14.8.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":9.74949537210564,\"minDifficulty\":9.039207968000001,\"moneyAvailable\":245712436.44799238,\"moneyMax\":420095624.97937393,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"phantasy\":[24401809433.241085,4056,36998,3380]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4223437.289213688,\"onlineMoneyMade\":24401809433.241085,\"onlineRunningTime\":13245.410000013126,\"ramUsage\":2.45,\"server\":\"phantasy\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"27.7.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":6.4669415821160445,\"minDifficulty\":6.15217911408083,\"moneyAvailable\":119552557.4831429,\"moneyMax\":175039843.74140579,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"max-hardware\":[18857422306.04359,5785,57200,5382]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5279837.20654761,\"onlineMoneyMade\":18857422306.04359,\"onlineRunningTime\":13249.21000001314,\"ramUsage\":2.45,\"server\":\"max-hardware\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-145027.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[24,132,67,165,1,35,58,180,71,144,4,80,94,177,35,146,5,16,3,24,157,7,31,172,163,192,165],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"2.4.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":39,\"hackDifficulty\":13.119327723555699,\"minDifficulty\":10.62194648953811,\"moneyAvailable\":434661771.2214729,\"moneyMax\":1101655043.0590382,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":180,\"serverGrowth\":39,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"omega-net\":[34147746621.370132,2522,19630,1027]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2698866.6299498943,\"onlineMoneyMade\":34147746621.370132,\"onlineRunningTime\":13240.410000013107,\"ramUsage\":2.45,\"server\":\"omega-net\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"12.0.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":61.5,\"hackDifficulty\":36.25575213244241,\"minDifficulty\":15.199752132442413,\"moneyAvailable\":1020584785.2178228,\"moneyMax\":1020584785.2178228,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":225,\"serverGrowth\":30,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"18.6.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":16.37402014693806,\"minDifficulty\":12.76144533872678,\"moneyAvailable\":82983769.02569443,\"moneyMax\":371507364.99425954,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[6068896200.906901,1443,26559,1313]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3831274.208563014,\"onlineMoneyMade\":6068896200.906901,\"onlineRunningTime\":13393.010000013663,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-94373.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[50,12,36,45,6,37,27,40,47],[37,44,6,28,43,11,8,35,24],[5,14,30,42,29,16,17,50,24],[34,31,25,7,24,18,46,28,41],[19,44,45,21,11,29,47,13,29],[49,35,4,45,28,49,38,35,12],[24,9,15,7,42,40,41,37,25],[7,32,47,40,22,14,1,20,11],[26,46,23,21,39,13,32,38,42],[37,17,49,30,29,40,44,13,5],[37,34,7,6,39,15,48,45,14],[39,22,34,14,37,39,5,42,6],[10,22,36,4,32,38,8,7,10]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-27292.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"22110423894\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"39.4.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":75,\"hackDifficulty\":22.419745068917866,\"minDifficulty\":20.42682017218867,\"moneyAvailable\":4375996093.535144,\"moneyMax\":4375996093.535144,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":522,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"millenium-fitness\":[34781783993.14847,552,1128,486]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":436580.982217475,\"onlineMoneyMade\":34781783993.14847,\"onlineRunningTime\":11640.010000007285,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"10.1.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"powerhouse-fitness\"}}]]},\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":96,\"hackDifficulty\":26.592716456323334,\"minDifficulty\":24.60871645632332,\"moneyAvailable\":13300890805.113743,\"moneyMax\":17052188053.236513,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1049,\"serverGrowth\":57,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"powerhouse-fitness\":[98903904517.12659,480,402,114]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":246340.2444627012,\"onlineMoneyMade\":98903904517.12659,\"onlineRunningTime\":11742.210000007657,\"ramUsage\":2.45,\"server\":\"powerhouse-fitness\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"17.9.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"snap-fitness\"}}]]},\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":85.5,\"hackDifficulty\":44.71911139973886,\"minDifficulty\":23.695111399738856,\"moneyAvailable\":8526094026.618257,\"moneyMax\":8526094026.618257,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":798,\"serverGrowth\":55,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"52.1.8.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":506,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"run4theh111z\":[0,777504,0,740688]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24441320.73379485,\"onlineMoneyMade\":0,\"onlineRunningTime\":12066.410000008837,\"ramUsage\":2.45,\"server\":\"run4theh111z\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":208,\"temporary\":false}}]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"48.0.6.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.064,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":358,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"I.I.I.I\":[0,262548,0,253292]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8336376.954207153,\"onlineMoneyMade\":0,\"onlineRunningTime\":13330.610000013436,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"92.3.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.052,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":212,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"avmnite-02h\":[0,148174,0,72150]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2854171.8594081188,\"onlineMoneyMade\":0,\"onlineRunningTime\":13269.810000013214,\"ramUsage\":2.45,\"server\":\"avmnite-02h\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"11.5.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.048,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":520,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\".\":[0,62358,0,12312]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":729307.844654306,\"onlineMoneyMade\":0,\"onlineRunningTime\":12800.210000011506,\"ramUsage\":2.45,\"server\":\".\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"49.5.5.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.054,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":55,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"CSEC\":[0,114297,0,12669]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1078043.3225465706,\"onlineMoneyMade\":0,\"onlineRunningTime\":13248.810000013138,\"ramUsage\":2.45,\"server\":\"CSEC\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":3,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"66.3.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"The-Cave\"}}]]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"53.2.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3958.436289188617,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"80.3.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n  return (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n\\n  const decimalPlaces = 3;\\n  let a = 10;\\n  let b = 1;\\n\\n  const targetHost = ns.getHostname();\\n\\n  while (true) {\\n    const currentLevel = ns.getServerSecurityLevel(targetHost);\\n    const minLevel = ns.getServerMinSecurityLevel(targetHost);\\n    const targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n    const currentMoney = ns.getServerMoneyAvailable(targetHost);\\n    const maxMoney = ns.getServerMaxMoney(targetHost);\\n    const targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n    ns.print(`a: ${a}, b: ${b}`);\\n    ns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n      + ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n      + ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n    ns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n      + ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n      + ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n    for (let i = 0; i < 25; i++) {\\n      while (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n        ns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n          + ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n        await ns.weaken(targetHost);\\n      }\\n\\n      while (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n        ns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n          + ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n        await ns.grow(targetHost);\\n      }\\n\\n      await ns.hack(targetHost);\\n    }\\n\\n    if (a > 1) {\\n      a--;\\n    } else if (b < 100) {\\n      b++;\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"darkweb\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"hacknet-server-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-0\",\"httpPortOpen\":false,\"ip\":\"30.8.4.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":128,\"hashCapacity\":1048576,\"hashRate\":92.10297411714993,\"level\":300,\"onlineTimeSeconds\":13428.80000001379,\"totalHashesGenerated\":1236832.4188232138,\"runningScripts\":[]}},\"hacknet-server-1\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-1\",\"httpPortOpen\":false,\"ip\":\"20.6.1.3\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":128,\"hashCapacity\":1048576,\"hashRate\":92.10297411714993,\"level\":300,\"onlineTimeSeconds\":13428.80000001379,\"totalHashesGenerated\":1236832.4188232138,\"runningScripts\":[]}},\"hacknet-server-2\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-2\",\"httpPortOpen\":false,\"ip\":\"92.4.2.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":128,\"hashCapacity\":1048576,\"hashRate\":92.10297411714993,\"level\":300,\"onlineTimeSeconds\":13428.80000001379,\"totalHashesGenerated\":1236832.4188232138,\"runningScripts\":[]}},\"hacknet-server-3\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-3\",\"httpPortOpen\":false,\"ip\":\"38.7.6.0\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":128,\"hashCapacity\":1048576,\"hashRate\":92.10297411714993,\"level\":300,\"onlineTimeSeconds\":13428.80000001379,\"totalHashesGenerated\":1236832.4188232138,\"runningScripts\":[]}},\"hacknet-server-4\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-4\",\"httpPortOpen\":false,\"ip\":\"61.1.9.3\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":128,\"hashCapacity\":1048576,\"hashRate\":92.10297411714993,\"level\":300,\"onlineTimeSeconds\":13428.80000001379,\"totalHashesGenerated\":1236832.4188232138,\"runningScripts\":[]}},\"hacknet-server-5\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-5\",\"httpPortOpen\":false,\"ip\":\"3.3.8.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":128,\"hashCapacity\":1048576,\"hashRate\":92.10297411714993,\"level\":300,\"onlineTimeSeconds\":13428.80000001379,\"totalHashesGenerated\":1236832.4188232138,\"runningScripts\":[]}},\"hacknet-server-6\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-6\",\"httpPortOpen\":false,\"ip\":\"74.6.4.3\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":128,\"hashCapacity\":1048576,\"hashRate\":92.10297411714993,\"level\":300,\"onlineTimeSeconds\":13428.80000001379,\"totalHashesGenerated\":1236832.4188232138,\"runningScripts\":[]}},\"hacknet-server-7\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-7\",\"httpPortOpen\":false,\"ip\":\"95.1.9.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":128,\"hashCapacity\":1048576,\"hashRate\":92.10297411714993,\"level\":300,\"onlineTimeSeconds\":13428.80000001379,\"totalHashesGenerated\":1236832.4188232138,\"runningScripts\":[]}},\"hacknet-server-8\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-8\",\"httpPortOpen\":false,\"ip\":\"48.4.4.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":128,\"hashCapacity\":1048576,\"hashRate\":92.10297411714993,\"level\":300,\"onlineTimeSeconds\":13428.80000001379,\"totalHashesGenerated\":1236832.4188232138,\"runningScripts\":[]}},\"hacknet-server-9\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-9\",\"httpPortOpen\":false,\"ip\":\"31.7.9.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":128,\"hashCapacity\":1048576,\"hashRate\":92.10297411714993,\"level\":300,\"onlineTimeSeconds\":13428.80000001379,\"totalHashesGenerated\":1236832.4188232138,\"runningScripts\":[]}},\"hacknet-server-10\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-10\",\"httpPortOpen\":false,\"ip\":\"20.8.2.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":128,\"hashCapacity\":1048576,\"hashRate\":92.10297411714993,\"level\":300,\"onlineTimeSeconds\":13428.80000001379,\"totalHashesGenerated\":1236832.4188232138,\"runningScripts\":[]}},\"hacknet-server-11\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-11\",\"httpPortOpen\":false,\"ip\":\"39.2.8.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":128,\"hashCapacity\":1048576,\"hashRate\":92.10297411714993,\"level\":300,\"onlineTimeSeconds\":13428.80000001379,\"totalHashesGenerated\":1236832.4188232138,\"runningScripts\":[]}},\"hacknet-server-12\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-12\",\"httpPortOpen\":false,\"ip\":\"3.5.8.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":128,\"hashCapacity\":1048576,\"hashRate\":92.10297411714993,\"level\":300,\"onlineTimeSeconds\":13428.80000001379,\"totalHashesGenerated\":1236832.4188232138,\"runningScripts\":[]}},\"hacknet-server-13\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-13\",\"httpPortOpen\":false,\"ip\":\"54.9.6.5\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":128,\"hashCapacity\":1048576,\"hashRate\":92.10297411714993,\"level\":300,\"onlineTimeSeconds\":13428.80000001379,\"totalHashesGenerated\":1236832.4188232138,\"runningScripts\":[]}},\"hacknet-server-14\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-14\",\"httpPortOpen\":false,\"ip\":\"74.6.8.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":128,\"hashCapacity\":1048576,\"hashRate\":92.10297411714993,\"level\":300,\"onlineTimeSeconds\":13428.80000001379,\"totalHashesGenerated\":1236832.4188232138,\"runningScripts\":[]}},\"hacknet-server-15\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-15\",\"httpPortOpen\":false,\"ip\":\"85.8.0.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":128,\"hashCapacity\":1048576,\"hashRate\":92.10297411714993,\"level\":300,\"onlineTimeSeconds\":13428.80000001379,\"totalHashesGenerated\":1236832.4188232138,\"runningScripts\":[]}},\"hacknet-server-16\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-16\",\"httpPortOpen\":false,\"ip\":\"91.3.5.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":128,\"hashCapacity\":1048576,\"hashRate\":92.10297411714993,\"level\":300,\"onlineTimeSeconds\":13428.80000001379,\"totalHashesGenerated\":1236832.4188232138,\"runningScripts\":[]}},\"hacknet-server-17\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-17\",\"httpPortOpen\":false,\"ip\":\"25.1.6.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":128,\"hashCapacity\":1048576,\"hashRate\":92.10297411714993,\"level\":300,\"onlineTimeSeconds\":13428.80000001379,\"totalHashesGenerated\":1236832.4188232138,\"runningScripts\":[]}},\"hacknet-server-18\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-18\",\"httpPortOpen\":false,\"ip\":\"39.6.0.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":128,\"hashCapacity\":1048576,\"hashRate\":92.10297411714993,\"level\":300,\"onlineTimeSeconds\":13428.80000001379,\"totalHashesGenerated\":1236832.4188232138,\"runningScripts\":[]}},\"hacknet-server-19\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":128,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-19\",\"httpPortOpen\":false,\"ip\":\"46.2.9.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":128,\"hashCapacity\":1048576,\"hashRate\":92.10297411714993,\"level\":300,\"onlineTimeSeconds\":13428.80000001379,\"totalHashesGenerated\":1236832.4188232138,\"runningScripts\":[]}},\"neighbor-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-0\",\"httpPortOpen\":false,\"ip\":\"50.6.9.4\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n  return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n  const currentMoney = ns.getServerMoneyAvailable(server);\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const target = 0.90 * maxMoney;\\n\\n  ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n  const currentLevel = ns.getServerSecurityLevel(server);\\n  const minLevel = ns.getServerMinSecurityLevel(server);\\n  const target = 1.10 * minLevel;\\n\\n  ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('grow');\\n  ns.enableLog('hack');\\n  ns.enableLog('weaken');\\n\\n  const runningScript = ns.getRunningScript();\\n  const numThreads = runningScript.threads;\\n\\n  while (true) {\\n    await ns.sleep(500);\\n\\n    const fullServerList = buildServerList(ns);\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n    const server = filteredServerList[serverIndex];\\n\\n    if (!isAccessible(ns, server)) {\\n      continue;\\n    }\\n\\n    if (!hasSecurityLevel(ns, server)) {\\n      await ns.weaken(server, { threads: numThreads });\\n      ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    if (!hasMoney(ns, server)) {\\n      await ns.grow(server, { threads: numThreads });\\n      ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    ns.print(`[${server}] Hacking`);\\n    await ns.hack(server, { threads: numThreads });\\n  }\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"nectar-net\":[0,0,0,169125],\"galactic-cyber\":[28790192015.81137,338250,0,0],\"clarkinc\":[303828602743.67786,169125,338250,169125],\"catalyst\":[0,0,338250,0],\"helios\":[0,0,0,507375],\"fulcrumtech\":[0,0,169125,0],\"I.I.I.I\":[0,0,338250,0],\"lexo-corp\":[0,0,169125,0],\"defcomm\":[25973768376.935734,338250,0,0],\"fulcrumassets\":[0,0,169125,0],\"hong-fang-tea\":[0,0,169125,169125],\"alpha-ent\":[0,0,0,169125],\"crush-fitness\":[888480472.9098705,169125,169125,0],\"global-pharm\":[0,0,338250,0],\".\":[0,0,338250,0],\"deltaone\":[52386577350.70154,338250,0,0],\"rothman-uni\":[0,0,338250,169125],\"silver-helix\":[0,0,338250,169125],\"zer0\":[0,0,338250,169125],\"megacorp\":[0,0,169125,507375],\"titan-labs\":[0,0,169125,0],\"unitalife\":[0,0,169125,0],\"blade\":[0,0,0,338250],\"aevum-police\":[0,0,0,169125],\"kuai-gong\":[0,0,169125,338250],\"zb-def\":[0,0,338250,0],\"microdyne\":[0,0,169125,169125],\"vitalife\":[0,0,0,338250],\"run4theh111z\":[0,0,169125,0],\"The-Cave\":[0,0,338250,0],\"the-hub\":[0,0,338250,0],\"nova-med\":[0,0,169125,0],\"applied-energetics\":[16142284199.620506,169125,0,0],\"netlink\":[0,0,169125,169125],\"powerhouse-fitness\":[14479699532.803713,169125,169125,169125],\"aerocorp\":[0,0,169125,0],\"darkweb\":[0,0,338250,0],\"syscore\":[0,0,169125,0],\"icarus\":[0,0,0,338250],\"zb-institute\":[0,0,338250,0],\"rho-construction\":[0,0,169125,0],\"sigma-cosmetics\":[0,0,0,169125],\"computek\":[0,0,0,169125],\"n00dles\":[1280143.884622071,169125,0,0],\"omnitek\":[0,0,0,169125],\"infocomm\":[0,0,0,169125],\"CSEC\":[0,0,169125,0],\"omega-net\":[0,0,0,169125],\"4sigma\":[390622736378.1021,169125,0,0],\"millenium-fitness\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2933537001.965732,\"onlineMoneyMade\":833113621214.4473,\"onlineRunningTime\":5933.009999996795,\"ramUsage\":3.1,\"server\":\"neighbor-0\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-1\",\"httpPortOpen\":false,\"ip\":\"91.8.6.1\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n  return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n  const currentMoney = ns.getServerMoneyAvailable(server);\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const target = 0.90 * maxMoney;\\n\\n  ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n  const currentLevel = ns.getServerSecurityLevel(server);\\n  const minLevel = ns.getServerMinSecurityLevel(server);\\n  const target = 1.10 * minLevel;\\n\\n  ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('grow');\\n  ns.enableLog('hack');\\n  ns.enableLog('weaken');\\n\\n  const runningScript = ns.getRunningScript();\\n  const numThreads = runningScript.threads;\\n\\n  while (true) {\\n    await ns.sleep(500);\\n\\n    const fullServerList = buildServerList(ns);\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n    const server = filteredServerList[serverIndex];\\n\\n    if (!isAccessible(ns, server)) {\\n      continue;\\n    }\\n\\n    if (!hasSecurityLevel(ns, server)) {\\n      await ns.weaken(server, { threads: numThreads });\\n      ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    if (!hasMoney(ns, server)) {\\n      await ns.grow(server, { threads: numThreads });\\n      ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    ns.print(`[${server}] Hacking`);\\n    await ns.hack(server, { threads: numThreads });\\n  }\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"zb-institute\":[0,0,338250,0],\"fulcrumassets\":[18575368.249712978,169125,169125,169125],\"rothman-uni\":[0,0,507375,0],\"foodnstuff\":[0,0,169125,0],\"run4theh111z\":[0,0,507375,0],\"max-hardware\":[0,0,0,338250],\"b-and-a\":[0,0,0,169125],\"powerhouse-fitness\":[0,0,169125,0],\"omega-net\":[0,0,338250,338250],\"unitalife\":[0,0,169125,169125],\"rho-construction\":[0,0,169125,169125],\"galactic-cyber\":[0,169125,169125,169125],\"vitalife\":[0,0,169125,0],\"n00dles\":[1187610.555019783,169125,0,0],\"summit-uni\":[0,0,0,507375],\"megacorp\":[0,169125,0,169125],\"univ-energy\":[0,0,169125,0],\"4sigma\":[0,0,169125,0],\"johnson-ortho\":[1162983371.6362286,169125,0,0],\"icarus\":[0,0,507375,0],\"microdyne\":[0,0,338250,0],\"ecorp\":[0,169125,169125,0],\"avmnite-02h\":[0,0,169125,0],\"zb-def\":[15412416470.079885,169125,169125,169125],\"lexo-corp\":[0,0,169125,169125],\"nwo\":[537580138485.6938,169125,0,338250],\"millenium-fitness\":[0,0,169125,0],\"titan-labs\":[0,0,169125,169125],\"infocomm\":[0,0,0,169125],\"CSEC\":[0,0,338250,0],\"The-Cave\":[0,0,338250,0],\"defcomm\":[0,0,338250,0],\"deltaone\":[0,0,169125,0],\"silver-helix\":[0,0,169125,169125],\"fulcrumtech\":[0,0,169125,0],\"crush-fitness\":[0,0,0,338250],\"helios\":[0,0,0,338250],\"hong-fang-tea\":[46441595.04239915,169125,676500,0],\"zer0\":[0,0,169125,0],\"blade\":[0,0,0,338250],\"omnitek\":[0,0,169125,0],\"alpha-ent\":[0,0,169125,0],\"the-hub\":[0,0,169125,0],\"snap-fitness\":[8358915712.37084,169125,0,338250],\"nova-med\":[20479914312.915928,169125,0,0],\"solaris\":[0,0,169125,0],\"I.I.I.I\":[0,0,169125,0],\"stormtech\":[0,0,169125,0],\"omnia\":[0,0,169125,0],\"iron-gym\":[0,0,169125,0],\"computek\":[3941838385.2972693,169125,0,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2969053315.7610226,\"onlineMoneyMade\":587002411311.8411,\"onlineRunningTime\":5933.009999996795,\"ramUsage\":3.1,\"server\":\"neighbor-1\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-2\",\"httpPortOpen\":false,\"ip\":\"59.7.6.1\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n  return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n  const currentMoney = ns.getServerMoneyAvailable(server);\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const target = 0.90 * maxMoney;\\n\\n  ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n  const currentLevel = ns.getServerSecurityLevel(server);\\n  const minLevel = ns.getServerMinSecurityLevel(server);\\n  const target = 1.10 * minLevel;\\n\\n  ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('grow');\\n  ns.enableLog('hack');\\n  ns.enableLog('weaken');\\n\\n  const runningScript = ns.getRunningScript();\\n  const numThreads = runningScript.threads;\\n\\n  while (true) {\\n    await ns.sleep(500);\\n\\n    const fullServerList = buildServerList(ns);\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n    const server = filteredServerList[serverIndex];\\n\\n    if (!isAccessible(ns, server)) {\\n      continue;\\n    }\\n\\n    if (!hasSecurityLevel(ns, server)) {\\n      await ns.weaken(server, { threads: numThreads });\\n      ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    if (!hasMoney(ns, server)) {\\n      await ns.grow(server, { threads: numThreads });\\n      ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    ns.print(`[${server}] Hacking`);\\n    await ns.hack(server, { threads: numThreads });\\n  }\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,169125,169125],\"defcomm\":[0,0,0,169125],\"I.I.I.I\":[0,0,1014750,0],\"vitalife\":[0,0,169125,169125],\"CSEC\":[0,0,169125,0],\"The-Cave\":[0,0,169125,0],\"joesguns\":[0,0,338250,169125],\"nwo\":[1075160276971.3876,338250,0,0],\"phantasy\":[0,0,0,169125],\"b-and-a\":[0,0,0,169125],\"omnitek\":[0,0,0,169125],\"aerocorp\":[19970143142.26428,169125,169125,0],\"n00dles\":[2418048.0836706497,338250,0,0],\"applied-energetics\":[0,0,0,338250],\"alpha-ent\":[0,0,169125,0],\"kuai-gong\":[352991792775.904,338250,0,0],\"ecorp\":[0,0,0,169125],\"millenium-fitness\":[0,0,338250,338250],\".\":[0,0,507375,0],\"neo-net\":[0,0,169125,0],\"netlink\":[0,0,338250,0],\"silver-helix\":[0,0,338250,507375],\"microdyne\":[0,0,169125,0],\"syscore\":[0,0,0,338250],\"foodnstuff\":[0,0,0,169125],\"aevum-police\":[0,0,0,169125],\"johnson-ortho\":[2396210938.919285,338250,0,0],\"snap-fitness\":[8358915712.37084,169125,169125,169125],\"fulcrumtech\":[0,0,169125,169125],\"4sigma\":[0,0,169125,0],\"powerhouse-fitness\":[0,0,0,169125],\"crush-fitness\":[0,0,0,169125],\"unitalife\":[0,0,338250,0],\"taiyang-digital\":[43816399785.82054,507375,169125,0],\"blade\":[0,0,338250,338250],\"omnia\":[0,0,169125,169125],\"sigma-cosmetics\":[0,0,169125,0],\"hong-fang-tea\":[0,0,169125,169125],\"fulcrumassets\":[0,0,0,169125],\"zer0\":[0,0,0,338250],\"zb-def\":[0,0,0,169125],\"stormtech\":[0,0,0,338250],\"zeus-med\":[24202515265.108078,169125,169125,0],\"rothman-uni\":[0,0,169125,169125],\"icarus\":[0,0,0,338250],\"nova-med\":[0,0,0,169125],\"zb-institute\":[0,0,169125,0],\"nectar-net\":[0,0,169125,0],\"harakiri-sushi\":[0,0,169125,0],\"omega-net\":[0,0,0,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2908620323.5464053,\"onlineMoneyMade\":1526898672639.8582,\"onlineRunningTime\":5748.009999996963,\"ramUsage\":3.1,\"server\":\"neighbor-2\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-3\",\"httpPortOpen\":false,\"ip\":\"6.4.8.9\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n  return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n  const currentMoney = ns.getServerMoneyAvailable(server);\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const target = 0.90 * maxMoney;\\n\\n  ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n  const currentLevel = ns.getServerSecurityLevel(server);\\n  const minLevel = ns.getServerMinSecurityLevel(server);\\n  const target = 1.10 * minLevel;\\n\\n  ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('grow');\\n  ns.enableLog('hack');\\n  ns.enableLog('weaken');\\n\\n  const runningScript = ns.getRunningScript();\\n  const numThreads = runningScript.threads;\\n\\n  while (true) {\\n    await ns.sleep(500);\\n\\n    const fullServerList = buildServerList(ns);\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n    const server = filteredServerList[serverIndex];\\n\\n    if (!isAccessible(ns, server)) {\\n      continue;\\n    }\\n\\n    if (!hasSecurityLevel(ns, server)) {\\n      await ns.weaken(server, { threads: numThreads });\\n      ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    if (!hasMoney(ns, server)) {\\n      await ns.grow(server, { threads: numThreads });\\n      ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    ns.print(`[${server}] Hacking`);\\n    await ns.hack(server, { threads: numThreads });\\n  }\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"ecorp\":[0,0,0,169125],\"netlink\":[0,0,507375,169125],\"neo-net\":[0,0,169125,338250],\".\":[0,0,338250,0],\"microdyne\":[0,0,169125,0],\"rothman-uni\":[0,0,0,169125],\"4sigma\":[0,0,0,169125],\"hong-fang-tea\":[0,0,338250,169125],\"unitalife\":[0,0,507375,338250],\"darkweb\":[0,0,338250,0],\"snap-fitness\":[0,0,0,169125],\"run4theh111z\":[0,0,169125,0],\"icarus\":[0,0,0,507375],\"joesguns\":[0,0,0,338250],\"fulcrumtech\":[0,0,507375,169125],\"summit-uni\":[0,0,169125,0],\"I.I.I.I\":[0,0,507375,0],\"syscore\":[9118374367.935814,169125,0,0],\"CSEC\":[0,0,507375,0],\"galactic-cyber\":[0,0,0,169125],\"phantasy\":[0,0,169125,0],\"omnitek\":[0,0,507375,169125],\"megacorp\":[0,0,0,169125],\"fulcrumassets\":[18211145.34285586,169125,169125,0],\"zer0\":[0,0,0,169125],\"applied-energetics\":[16794432481.285175,169125,169125,169125],\"avmnite-02h\":[0,0,507375,0],\"n00dles\":[1211372.1530201712,169125,0,0],\"global-pharm\":[0,0,169125,169125],\"aevum-police\":[0,0,0,845625],\"iron-gym\":[0,0,169125,0],\"nwo\":[0,0,169125,169125],\"catalyst\":[6906147778.605136,169125,338250,0],\"max-hardware\":[0,0,169125,169125],\"univ-energy\":[0,0,169125,169125],\"sigma-cosmetics\":[0,0,169125,169125],\"rho-construction\":[0,0,0,169125],\"b-and-a\":[478880410148.65283,169125,0,0],\"silver-helix\":[0,0,0,338250],\"taiyang-digital\":[0,0,169125,169125],\"alpha-ent\":[0,0,169125,0],\"powerhouse-fitness\":[0,0,169125,169125],\"zb-def\":[15412416470.079885,169125,0,0],\"defcomm\":[13246621872.237225,169125,0,0],\"crush-fitness\":[0,0,169125,0],\"nectar-net\":[0,0,169125,0],\"vitalife\":[0,0,169125,0],\"zeus-med\":[0,0,0,169125],\"helios\":[0,0,0,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2986585414.084299,\"onlineMoneyMade\":540377825636.29193,\"onlineRunningTime\":5663.009999997041,\"ramUsage\":3.1,\"server\":\"neighbor-3\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-4\",\"httpPortOpen\":false,\"ip\":\"47.1.7.6\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n  return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n  const currentMoney = ns.getServerMoneyAvailable(server);\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const target = 0.90 * maxMoney;\\n\\n  ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n  const currentLevel = ns.getServerSecurityLevel(server);\\n  const minLevel = ns.getServerMinSecurityLevel(server);\\n  const target = 1.10 * minLevel;\\n\\n  ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('grow');\\n  ns.enableLog('hack');\\n  ns.enableLog('weaken');\\n\\n  const runningScript = ns.getRunningScript();\\n  const numThreads = runningScript.threads;\\n\\n  while (true) {\\n    await ns.sleep(500);\\n\\n    const fullServerList = buildServerList(ns);\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n    const server = filteredServerList[serverIndex];\\n\\n    if (!isAccessible(ns, server)) {\\n      continue;\\n    }\\n\\n    if (!hasSecurityLevel(ns, server)) {\\n      await ns.weaken(server, { threads: numThreads });\\n      ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    if (!hasMoney(ns, server)) {\\n      await ns.grow(server, { threads: numThreads });\\n      ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    ns.print(`[${server}] Hacking`);\\n    await ns.hack(server, { threads: numThreads });\\n  }\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"silver-helix\":[0,0,169125,169125],\"lexo-corp\":[0,0,338250,338250],\"omega-net\":[0,0,169125,0],\"helios\":[0,0,338250,169125],\"applied-energetics\":[15825768823.157358,169125,0,0],\"darkweb\":[0,0,169125,0],\"n00dles\":[1235591.9201855473,169125,169125,169125],\"clarkinc\":[0,0,0,169125],\"foodnstuff\":[0,0,0,169125],\"zer0\":[0,0,338250,338250],\"the-hub\":[0,0,169125,169125],\"stormtech\":[0,0,169125,169125],\"The-Cave\":[0,0,338250,0],\"omnitek\":[0,0,0,338250],\"infocomm\":[14200030189.413767,169125,0,169125],\"hong-fang-tea\":[0,0,169125,0],\"unitalife\":[0,0,338250,0],\"aevum-police\":[0,0,169125,338250],\"titan-labs\":[0,0,169125,0],\"ecorp\":[1267688611855.214,169125,169125,169125],\"deltaone\":[26971103827.068047,169125,0,338250],\"run4theh111z\":[0,0,169125,0],\"joesguns\":[33716768.9400989,169125,0,169125],\"global-pharm\":[0,0,169125,0],\"I.I.I.I\":[0,0,169125,0],\".\":[0,0,338250,0],\"neo-net\":[0,0,0,338250],\"zeus-med\":[23262702100.257668,169125,169125,169125],\"nwo\":[0,0,0,169125],\"microdyne\":[0,0,338250,169125],\"rothman-uni\":[0,0,169125,338250],\"iron-gym\":[0,0,169125,169125],\"zb-def\":[0,0,338250,169125],\"nectar-net\":[0,0,338250,0],\"galactic-cyber\":[0,0,0,169125],\"rho-construction\":[0,0,169125,0],\"sigma-cosmetics\":[0,0,169125,338250],\"4sigma\":[0,0,169125,169125],\"syscore\":[9300741855.29453,169125,0,338250],\"kuai-gong\":[0,0,169125,0],\"omnia\":[15580199811.36727,169125,0,0],\"vitalife\":[0,0,0,169125],\"phantasy\":[0,0,169125,338250],\"catalyst\":[0,0,0,169125],\"netlink\":[0,0,169125,0],\"megacorp\":[0,0,338250,0],\"CSEC\":[0,0,169125,0],\"defcomm\":[0,0,169125,0],\"blade\":[0,0,0,169125],\"alpha-ent\":[0,0,169125,0],\"avmnite-02h\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2976337425.379576,\"onlineMoneyMade\":1372864110822.6328,\"onlineRunningTime\":5617.809999997082,\"ramUsage\":3.1,\"server\":\"neighbor-4\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-5\",\"httpPortOpen\":false,\"ip\":\"55.0.7.4\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n  return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n  const currentMoney = ns.getServerMoneyAvailable(server);\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const target = 0.90 * maxMoney;\\n\\n  ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n  const currentLevel = ns.getServerSecurityLevel(server);\\n  const minLevel = ns.getServerMinSecurityLevel(server);\\n  const target = 1.10 * minLevel;\\n\\n  ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('grow');\\n  ns.enableLog('hack');\\n  ns.enableLog('weaken');\\n\\n  const runningScript = ns.getRunningScript();\\n  const numThreads = runningScript.threads;\\n\\n  while (true) {\\n    await ns.sleep(500);\\n\\n    const fullServerList = buildServerList(ns);\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n    const server = filteredServerList[serverIndex];\\n\\n    if (!isAccessible(ns, server)) {\\n      continue;\\n    }\\n\\n    if (!hasSecurityLevel(ns, server)) {\\n      await ns.weaken(server, { threads: numThreads });\\n      ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    if (!hasMoney(ns, server)) {\\n      await ns.grow(server, { threads: numThreads });\\n      ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    ns.print(`[${server}] Hacking`);\\n    await ns.hack(server, { threads: numThreads });\\n  }\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"nwo\":[0,0,169125,0],\"ecorp\":[0,0,169125,0],\"helios\":[0,0,0,338250],\"defcomm\":[12986884188.467867,169125,169125,507375],\"CSEC\":[0,0,169125,0],\"megacorp\":[0,0,169125,0],\"max-hardware\":[0,0,507375,0],\"nova-med\":[40156694731.2077,338250,169125,0],\"kuai-gong\":[0,169125,169125,0],\"crush-fitness\":[0,0,0,169125],\"darkweb\":[0,0,338250,0],\"omnitek\":[0,0,0,169125],\"clarkinc\":[0,0,0,169125],\"avmnite-02h\":[0,0,169125,0],\"galactic-cyber\":[14671489749.137928,169125,338250,169125],\"joesguns\":[0,0,169125,169125],\"millenium-fitness\":[0,0,169125,0],\"solaris\":[0,0,507375,338250],\"alpha-ent\":[9575295177.822096,169125,169125,169125],\"nectar-net\":[41680435.917439766,169125,0,0],\"netlink\":[0,0,169125,169125],\"run4theh111z\":[0,0,169125,0],\"zer0\":[0,0,169125,169125],\".\":[0,0,169125,0],\"neo-net\":[0,0,0,338250],\"stormtech\":[0,0,0,169125],\"hong-fang-tea\":[0,0,169125,0],\"titan-labs\":[0,0,0,507375],\"rho-construction\":[0,0,169125,0],\"zb-institute\":[0,0,0,169125],\"phantasy\":[0,0,0,169125],\"harakiri-sushi\":[0,0,338250,0],\"the-hub\":[0,0,0,169125],\"b-and-a\":[478880410148.65283,169125,0,0],\"aevum-police\":[0,0,169125,0],\"univ-energy\":[0,0,169125,0],\"syscore\":[0,0,169125,0],\"powerhouse-fitness\":[0,0,169125,0],\"deltaone\":[0,0,169125,0],\"catalyst\":[0,0,169125,169125],\"applied-energetics\":[16465129883.612917,169125,169125,0],\"vitalife\":[0,0,0,169125],\"silver-helix\":[0,0,169125,169125],\"rothman-uni\":[0,0,169125,0],\"lexo-corp\":[6308452938.366088,169125,0,0],\"infocomm\":[0,0,0,169125],\"zeus-med\":[0,0,0,169125],\"taiyang-digital\":[0,0,169125,0],\"fulcrumtech\":[0,0,0,169125],\"aerocorp\":[0,0,0,169125],\"icarus\":[0,0,0,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2770975769.375125,\"onlineMoneyMade\":579086037253.1849,\"onlineRunningTime\":5207.809999997455,\"ramUsage\":3.1,\"server\":\"neighbor-5\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-6\",\"httpPortOpen\":false,\"ip\":\"77.8.3.4\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n  return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n  const currentMoney = ns.getServerMoneyAvailable(server);\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const target = 0.90 * maxMoney;\\n\\n  ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n  const currentLevel = ns.getServerSecurityLevel(server);\\n  const minLevel = ns.getServerMinSecurityLevel(server);\\n  const target = 1.10 * minLevel;\\n\\n  ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('grow');\\n  ns.enableLog('hack');\\n  ns.enableLog('weaken');\\n\\n  const runningScript = ns.getRunningScript();\\n  const numThreads = runningScript.threads;\\n\\n  while (true) {\\n    await ns.sleep(500);\\n\\n    const fullServerList = buildServerList(ns);\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n    const server = filteredServerList[serverIndex];\\n\\n    if (!isAccessible(ns, server)) {\\n      continue;\\n    }\\n\\n    if (!hasSecurityLevel(ns, server)) {\\n      await ns.weaken(server, { threads: numThreads });\\n      ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    if (!hasMoney(ns, server)) {\\n      await ns.grow(server, { threads: numThreads });\\n      ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    ns.print(`[${server}] Hacking`);\\n    await ns.hack(server, { threads: numThreads });\\n  }\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"b-and-a\":[0,0,0,169125],\"lexo-corp\":[0,0,169125,169125],\"icarus\":[0,0,169125,169125],\"catalyst\":[0,0,169125,338250],\"run4theh111z\":[0,0,338250,0],\"infocomm\":[0,0,169125,0],\"joesguns\":[40277479.92915293,169125,0,169125],\"nova-med\":[0,0,169125,169125],\"univ-energy\":[0,0,0,169125],\".\":[0,0,338250,0],\"aerocorp\":[0,0,0,169125],\"powerhouse-fitness\":[0,0,338250,169125],\"microdyne\":[0,0,0,169125],\"phantasy\":[0,0,169125,0],\"helios\":[0,0,169125,169125],\"fulcrumassets\":[0,0,338250,0],\"deltaone\":[0,0,169125,169125],\"solaris\":[0,0,338250,169125],\"omega-net\":[0,0,169125,169125],\"silver-helix\":[0,0,0,169125],\"foodnstuff\":[0,0,169125,0],\"rothman-uni\":[0,0,169125,507375],\"sigma-cosmetics\":[0,0,0,338250],\"hong-fang-tea\":[0,0,169125,0],\"n00dles\":[2491562.307129158,338250,169125,0],\"iron-gym\":[0,0,0,169125],\"aevum-police\":[0,0,338250,0],\"omnia\":[0,0,169125,0],\"the-hub\":[0,0,338250,0],\"syscore\":[9118374367.935814,169125,0,338250],\"avmnite-02h\":[0,0,338250,0],\"global-pharm\":[0,0,169125,169125],\"megacorp\":[0,0,0,169125],\"taiyang-digital\":[0,0,0,169125],\"nwo\":[0,0,0,169125],\"I.I.I.I\":[0,0,338250,0],\"neo-net\":[0,0,0,507375],\"The-Cave\":[0,0,169125,0],\"4sigma\":[0,0,169125,0],\"titan-labs\":[0,0,169125,0],\"CSEC\":[0,0,169125,0],\"vitalife\":[0,0,169125,0],\"ecorp\":[1242831972407.0728,169125,0,169125],\"omnitek\":[0,0,0,169125],\"darkweb\":[0,0,169125,0],\"defcomm\":[0,0,169125,0],\"millenium-fitness\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2438820370.7691,\"onlineMoneyMade\":1251993115817.2449,\"onlineRunningTime\":5202.809999997459,\"ramUsage\":3.1,\"server\":\"neighbor-6\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-7\",\"httpPortOpen\":false,\"ip\":\"78.4.2.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n  return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n  const currentMoney = ns.getServerMoneyAvailable(server);\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const target = 0.90 * maxMoney;\\n\\n  ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n  const currentLevel = ns.getServerSecurityLevel(server);\\n  const minLevel = ns.getServerMinSecurityLevel(server);\\n  const target = 1.10 * minLevel;\\n\\n  ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('grow');\\n  ns.enableLog('hack');\\n  ns.enableLog('weaken');\\n\\n  const runningScript = ns.getRunningScript();\\n  const numThreads = runningScript.threads;\\n\\n  while (true) {\\n    await ns.sleep(500);\\n\\n    const fullServerList = buildServerList(ns);\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n    const server = filteredServerList[serverIndex];\\n\\n    if (!isAccessible(ns, server)) {\\n      continue;\\n    }\\n\\n    if (!hasSecurityLevel(ns, server)) {\\n      await ns.weaken(server, { threads: numThreads });\\n      ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    if (!hasMoney(ns, server)) {\\n      await ns.grow(server, { threads: numThreads });\\n      ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    ns.print(`[${server}] Hacking`);\\n    await ns.hack(server, { threads: numThreads });\\n  }\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"computek\":[7653319433.199235,338250,338250,338250],\"omnitek\":[0,0,169125,507375],\"global-pharm\":[0,0,338250,0],\"harakiri-sushi\":[0,0,169125,169125],\"fulcrumassets\":[17854064.06162339,169125,0,0],\"icarus\":[37225151634.55429,338250,0,0],\"nova-med\":[20078347365.60385,169125,169125,0],\"rothman-uni\":[0,0,169125,507375],\"run4theh111z\":[0,0,338250,0],\"lexo-corp\":[0,0,338250,338250],\"fulcrumtech\":[0,0,0,169125],\"4sigma\":[0,0,0,338250],\"darkweb\":[0,0,338250,0],\"CSEC\":[0,0,169125,0],\"zb-def\":[15412416470.079885,169125,169125,507375],\"iron-gym\":[0,0,0,169125],\".\":[0,0,169125,0],\"galactic-cyber\":[14383813479.546988,338250,0,0],\"zer0\":[0,0,169125,338250],\"univ-energy\":[0,0,338250,338250],\"microdyne\":[0,0,169125,507375],\"summit-uni\":[0,0,169125,169125],\"hong-fang-tea\":[0,0,169125,169125],\"omnia\":[0,0,169125,169125],\"millenium-fitness\":[0,0,338250,0],\"aevum-police\":[0,0,169125,0],\"aerocorp\":[0,0,0,169125],\"snap-fitness\":[0,0,0,169125],\"phantasy\":[0,0,169125,169125],\"megacorp\":[977120462274.2128,169125,0,0],\"silver-helix\":[0,0,338250,169125],\"infocomm\":[14484030793.202042,169125,0,0],\"n00dles\":[1326281.2930295062,169125,0,0],\"deltaone\":[26971103827.068047,169125,0,0],\"joesguns\":[0,0,169125,338250],\"zeus-med\":[0,0,169125,0],\"avmnite-02h\":[0,0,169125,0],\"catalyst\":[0,0,169125,0],\"alpha-ent\":[0,0,0,169125],\"omega-net\":[0,0,169125,169125],\"applied-energetics\":[0,0,0,169125],\"I.I.I.I\":[0,0,169125,0],\"rho-construction\":[0,0,0,338250],\"The-Cave\":[0,0,169125,0],\"the-hub\":[0,0,169125,0],\"foodnstuff\":[0,0,0,169125],\"netlink\":[0,0,169125,0],\"max-hardware\":[0,0,169125,0],\"helios\":[0,0,0,338250],\"nectar-net\":[0,0,169125,0],\"crush-fitness\":[0,0,169125,0],\"nwo\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3160750986.825843,\"onlineMoneyMade\":1113347825622.8215,\"onlineRunningTime\":5072.8099999975775,\"ramUsage\":3.1,\"server\":\"neighbor-7\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-8\",\"httpPortOpen\":false,\"ip\":\"57.9.4.7\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n  return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n  const currentMoney = ns.getServerMoneyAvailable(server);\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const target = 0.90 * maxMoney;\\n\\n  ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n  const currentLevel = ns.getServerSecurityLevel(server);\\n  const minLevel = ns.getServerMinSecurityLevel(server);\\n  const target = 1.10 * minLevel;\\n\\n  ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('grow');\\n  ns.enableLog('hack');\\n  ns.enableLog('weaken');\\n\\n  const runningScript = ns.getRunningScript();\\n  const numThreads = runningScript.threads;\\n\\n  while (true) {\\n    await ns.sleep(500);\\n\\n    const fullServerList = buildServerList(ns);\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n    const server = filteredServerList[serverIndex];\\n\\n    if (!isAccessible(ns, server)) {\\n      continue;\\n    }\\n\\n    if (!hasSecurityLevel(ns, server)) {\\n      await ns.weaken(server, { threads: numThreads });\\n      ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    if (!hasMoney(ns, server)) {\\n      await ns.grow(server, { threads: numThreads });\\n      ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    ns.print(`[${server}] Hacking`);\\n    await ns.hack(server, { threads: numThreads });\\n  }\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"megacorp\":[0,0,169125,0],\"rothman-uni\":[0,0,338250,0],\"4sigma\":[0,0,169125,0],\"blade\":[0,0,169125,169125],\"stormtech\":[18840229915.64905,169125,0,0],\"nwo\":[0,0,169125,0],\"global-pharm\":[0,0,169125,0],\"darkweb\":[0,0,169125,0],\"vitalife\":[0,0,338250,0],\"harakiri-sushi\":[53443244.07720247,169125,169125,0],\"fulcrumassets\":[0,0,0,169125],\"lexo-corp\":[0,0,169125,0],\"infocomm\":[14200030189.413767,169125,169125,0],\"helios\":[0,0,169125,169125],\"sigma-cosmetics\":[0,0,169125,0],\"crush-fitness\":[961719837.4096527,169125,169125,169125],\"aerocorp\":[19970143142.26428,169125,0,169125],\"computek\":[7577543993.266569,338250,0,169125],\"solaris\":[0,0,338250,169125],\"zer0\":[0,0,0,169125],\"applied-energetics\":[33259562364.898094,338250,169125,338250],\"ecorp\":[1242831972407.0728,169125,169125,0],\"univ-energy\":[0,0,169125,338250],\"summit-uni\":[0,0,0,169125],\"zb-def\":[30824832940.15977,338250,169125,0],\"rho-construction\":[0,0,169125,0],\"fulcrumtech\":[0,0,169125,0],\"zb-institute\":[0,0,0,169125],\"foodnstuff\":[0,0,0,169125],\"netlink\":[0,0,169125,169125],\"omega-net\":[0,0,169125,0],\"alpha-ent\":[0,0,0,169125],\"max-hardware\":[0,0,338250,0],\"joesguns\":[0,0,0,169125],\"syscore\":[9300741855.29453,169125,0,169125],\"The-Cave\":[0,0,169125,0],\"icarus\":[0,0,338250,169125],\"zeus-med\":[0,0,0,169125],\"phantasy\":[0,0,338250,0],\"omnia\":[15580199811.36727,169125,0,0],\"iron-gym\":[0,0,169125,0],\"clarkinc\":[0,0,0,169125],\"CSEC\":[0,0,169125,0],\"nectar-net\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2573852692.525452,\"onlineMoneyMade\":1393400419700.8728,\"onlineRunningTime\":4712.809999997905,\"ramUsage\":3.1,\"server\":\"neighbor-8\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-9\",\"httpPortOpen\":false,\"ip\":\"51.3.1.4\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n  return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n  const currentMoney = ns.getServerMoneyAvailable(server);\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const target = 0.90 * maxMoney;\\n\\n  ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n  const currentLevel = ns.getServerSecurityLevel(server);\\n  const minLevel = ns.getServerMinSecurityLevel(server);\\n  const target = 1.10 * minLevel;\\n\\n  ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('grow');\\n  ns.enableLog('hack');\\n  ns.enableLog('weaken');\\n\\n  const runningScript = ns.getRunningScript();\\n  const numThreads = runningScript.threads;\\n\\n  while (true) {\\n    await ns.sleep(500);\\n\\n    const fullServerList = buildServerList(ns);\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n    const server = filteredServerList[serverIndex];\\n\\n    if (!isAccessible(ns, server)) {\\n      continue;\\n    }\\n\\n    if (!hasSecurityLevel(ns, server)) {\\n      await ns.weaken(server, { threads: numThreads });\\n      ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    if (!hasMoney(ns, server)) {\\n      await ns.grow(server, { threads: numThreads });\\n      ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    ns.print(`[${server}] Hacking`);\\n    await ns.hack(server, { threads: numThreads });\\n  }\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"zb-def\":[0,0,338250,507375],\"global-pharm\":[0,0,169125,0],\"zeus-med\":[24202515265.108078,169125,169125,0],\"omega-net\":[0,0,338250,169125],\"joesguns\":[0,0,169125,338250],\"omnia\":[0,0,0,169125],\"run4theh111z\":[0,0,338250,0],\"silver-helix\":[0,0,0,338250],\"aerocorp\":[19970143142.26428,169125,338250,0],\"summit-uni\":[0,0,169125,0],\"darkweb\":[0,0,169125,0],\"zb-institute\":[0,0,338250,0],\"4sigma\":[382963467037.355,169125,0,169125],\"johnson-ortho\":[0,0,0,169125],\"CSEC\":[0,0,169125,0],\"fulcrumtech\":[0,0,169125,169125],\"computek\":[0,0,0,169125],\"I.I.I.I\":[0,0,507375,0],\"helios\":[0,0,338250,169125],\"zer0\":[0,0,169125,0],\"defcomm\":[0,0,0,507375],\"titan-labs\":[0,0,169125,0],\"iron-gym\":[0,0,169125,0],\"phantasy\":[0,0,169125,0],\"vitalife\":[0,0,169125,338250],\"blade\":[0,0,0,169125],\"millenium-fitness\":[0,0,169125,0],\"catalyst\":[0,0,338250,0],\"galactic-cyber\":[0,0,169125,0],\"snap-fitness\":[0,0,0,169125],\"megacorp\":[0,0,169125,0],\"nova-med\":[0,0,0,169125],\"taiyang-digital\":[0,0,0,169125],\"rothman-uni\":[0,0,0,169125],\"infocomm\":[14484030793.202042,169125,0,0],\"hong-fang-tea\":[0,0,169125,0],\"aevum-police\":[0,0,169125,0],\"univ-energy\":[0,0,169125,0],\"nectar-net\":[0,0,169125,0],\"foodnstuff\":[0,0,0,169125],\"syscore\":[9300741855.29453,169125,0,0],\"alpha-ent\":[0,0,0,169125],\"lexo-corp\":[0,0,169125,0],\"sigma-cosmetics\":[0,0,0,169125],\"avmnite-02h\":[0,0,169125,0],\"kuai-gong\":[0,0,0,169125],\"powerhouse-fitness\":[0,0,169125,0],\"fulcrumassets\":[0,0,169125,0],\"stormtech\":[18840229915.64905,169125,0,0],\"applied-energetics\":[0,0,0,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2502920535.4123683,\"onlineMoneyMade\":469761128008.873,\"onlineRunningTime\":4622.809999997987,\"ramUsage\":3.1,\"server\":\"neighbor-9\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-10\",\"httpPortOpen\":false,\"ip\":\"89.5.1.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n  return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n  const currentMoney = ns.getServerMoneyAvailable(server);\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const target = 0.90 * maxMoney;\\n\\n  ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n  const currentLevel = ns.getServerSecurityLevel(server);\\n  const minLevel = ns.getServerMinSecurityLevel(server);\\n  const target = 1.10 * minLevel;\\n\\n  ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('grow');\\n  ns.enableLog('hack');\\n  ns.enableLog('weaken');\\n\\n  const runningScript = ns.getRunningScript();\\n  const numThreads = runningScript.threads;\\n\\n  while (true) {\\n    await ns.sleep(500);\\n\\n    const fullServerList = buildServerList(ns);\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n    const server = filteredServerList[serverIndex];\\n\\n    if (!isAccessible(ns, server)) {\\n      continue;\\n    }\\n\\n    if (!hasSecurityLevel(ns, server)) {\\n      await ns.weaken(server, { threads: numThreads });\\n      ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    if (!hasMoney(ns, server)) {\\n      await ns.grow(server, { threads: numThreads });\\n      ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    ns.print(`[${server}] Hacking`);\\n    await ns.hack(server, { threads: numThreads });\\n  }\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[0,0,0,169125],\"The-Cave\":[0,0,169125,0],\"foodnstuff\":[0,0,0,338250],\"millenium-fitness\":[0,0,169125,169125],\"unitalife\":[18527462067.48697,169125,169125,0],\"helios\":[0,0,338250,507375],\"netlink\":[4140059076.3586717,169125,0,0],\"omega-net\":[0,0,0,338250],\"applied-energetics\":[0,0,169125,169125],\"max-hardware\":[0,0,0,169125],\"omnitek\":[0,0,169125,169125],\"run4theh111z\":[0,0,338250,0],\"rho-construction\":[0,0,0,169125],\"joesguns\":[41444397.18164427,169125,169125,169125],\"darkweb\":[0,0,169125,0],\"deltaone\":[0,0,0,169125],\"microdyne\":[0,0,169125,0],\"aerocorp\":[0,0,0,169125],\"crush-fitness\":[961719837.4096527,169125,0,169125],\"powerhouse-fitness\":[15684403848.644855,169125,169125,0],\"zb-def\":[0,0,169125,169125],\"megacorp\":[996662871519.697,169125,169125,169125],\"ecorp\":[0,0,0,169125],\"nectar-net\":[0,0,0,169125],\"kuai-gong\":[0,0,169125,0],\"zer0\":[0,0,169125,0],\"computek\":[0,0,0,169125],\"aevum-police\":[0,0,169125,0],\"syscore\":[9300741855.29453,169125,0,0],\"vitalife\":[0,0,0,169125],\"defcomm\":[0,0,169125,0],\"neo-net\":[0,0,0,169125],\"zeus-med\":[0,0,169125,169125],\"alpha-ent\":[0,0,338250,0],\"global-pharm\":[0,0,338250,169125],\"CSEC\":[0,0,338250,0],\"johnson-ortho\":[0,0,169125,0],\"silver-helix\":[0,0,0,169125],\"fulcrumassets\":[0,0,169125,0],\"zb-institute\":[0,0,169125,169125],\"lexo-corp\":[0,0,169125,0],\"galactic-cyber\":[14964919544.120687,169125,0,0],\"I.I.I.I\":[0,0,338250,0],\"snap-fitness\":[8358915712.37084,169125,0,0],\"hong-fang-tea\":[48513885.98933976,169125,0,169125],\"omnia\":[0,0,0,169125],\"phantasy\":[0,0,0,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2364070335.5111203,\"onlineMoneyMade\":1068691051744.5543,\"onlineRunningTime\":4492.809999998105,\"ramUsage\":3.1,\"server\":\"neighbor-10\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-11\",\"httpPortOpen\":false,\"ip\":\"42.5.7.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n  return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n  const currentMoney = ns.getServerMoneyAvailable(server);\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const target = 0.90 * maxMoney;\\n\\n  ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n  const currentLevel = ns.getServerSecurityLevel(server);\\n  const minLevel = ns.getServerMinSecurityLevel(server);\\n  const target = 1.10 * minLevel;\\n\\n  ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('grow');\\n  ns.enableLog('hack');\\n  ns.enableLog('weaken');\\n\\n  const runningScript = ns.getRunningScript();\\n  const numThreads = runningScript.threads;\\n\\n  while (true) {\\n    await ns.sleep(500);\\n\\n    const fullServerList = buildServerList(ns);\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n    const server = filteredServerList[serverIndex];\\n\\n    if (!isAccessible(ns, server)) {\\n      continue;\\n    }\\n\\n    if (!hasSecurityLevel(ns, server)) {\\n      await ns.weaken(server, { threads: numThreads });\\n      ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    if (!hasMoney(ns, server)) {\\n      await ns.grow(server, { threads: numThreads });\\n      ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    ns.print(`[${server}] Hacking`);\\n    await ns.hack(server, { threads: numThreads });\\n  }\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[4719211473.420254,169125,169125,0],\"ecorp\":[1218462718046.1497,169125,0,0],\"powerhouse-fitness\":[0,0,338250,0],\"darkweb\":[0,0,338250,0],\"neo-net\":[0,0,0,169125],\"the-hub\":[0,0,0,169125],\"zb-def\":[0,0,169125,169125],\"syscore\":[0,0,0,338250],\"omnitek\":[0,0,0,169125],\"fulcrumassets\":[0,0,169125,0],\"johnson-ortho\":[0,0,169125,0],\"microdyne\":[0,0,169125,507375],\"lexo-corp\":[12657994098.853003,169125,169125,0],\"joesguns\":[42264045.68100057,169125,0,169125],\"nova-med\":[0,0,169125,0],\"crush-fitness\":[0,0,169125,0],\"b-and-a\":[0,0,169125,169125],\"harakiri-sushi\":[55040831.52862129,169125,338250,0],\"I.I.I.I\":[0,0,169125,0],\"univ-energy\":[0,0,169125,0],\"catalyst\":[0,0,338250,0],\"clarkinc\":[0,0,169125,0],\"alpha-ent\":[0,0,169125,169125],\"run4theh111z\":[0,0,169125,0],\"4sigma\":[382963467037.355,169125,0,0],\"global-pharm\":[0,0,169125,0],\"unitalife\":[0,0,338250,169125],\"defcomm\":[13246621872.237225,169125,0,169125],\"deltaone\":[0,0,0,169125],\"kuai-gong\":[367252661204.0505,169125,0,169125],\"taiyang-digital\":[0,0,169125,0],\"fulcrumtech\":[0,0,169125,338250],\"zeus-med\":[24202515265.108078,169125,0,0],\"n00dles\":[2471195.3685238664,338250,0,169125],\"omnia\":[0,0,169125,169125],\"CSEC\":[0,0,338250,0],\"megacorp\":[996662871519.697,169125,0,0],\"snap-fitness\":[0,0,338250,0],\".\":[0,0,169125,0],\"titan-labs\":[0,0,0,169125],\"rho-construction\":[0,0,169125,0],\"helios\":[0,0,169125,0],\"icarus\":[0,0,0,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2375925851.8558,\"onlineMoneyMade\":3020267836589.449,\"onlineRunningTime\":4332.8099999982505,\"ramUsage\":3.1,\"server\":\"neighbor-11\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-12\",\"httpPortOpen\":false,\"ip\":\"69.6.0.7\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n  return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n  const currentMoney = ns.getServerMoneyAvailable(server);\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const target = 0.90 * maxMoney;\\n\\n  ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n  const currentLevel = ns.getServerSecurityLevel(server);\\n  const minLevel = ns.getServerMinSecurityLevel(server);\\n  const target = 1.10 * minLevel;\\n\\n  ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('grow');\\n  ns.enableLog('hack');\\n  ns.enableLog('weaken');\\n\\n  const runningScript = ns.getRunningScript();\\n  const numThreads = runningScript.threads;\\n\\n  while (true) {\\n    await ns.sleep(500);\\n\\n    const fullServerList = buildServerList(ns);\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n    const server = filteredServerList[serverIndex];\\n\\n    if (!isAccessible(ns, server)) {\\n      continue;\\n    }\\n\\n    if (!hasSecurityLevel(ns, server)) {\\n      await ns.weaken(server, { threads: numThreads });\\n      ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    if (!hasMoney(ns, server)) {\\n      await ns.grow(server, { threads: numThreads });\\n      ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    ns.print(`[${server}] Hacking`);\\n    await ns.hack(server, { threads: numThreads });\\n  }\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"max-hardware\":[0,0,338250,169125],\"icarus\":[0,0,0,169125],\"neo-net\":[0,0,169125,0],\"johnson-ortho\":[0,0,169125,0],\"hong-fang-tea\":[0,0,338250,0],\"zeus-med\":[24202515265.108078,169125,0,169125],\"millenium-fitness\":[0,0,169125,169125],\"stormtech\":[18840229915.64905,169125,169125,0],\"catalyst\":[0,0,0,169125],\"I.I.I.I\":[0,0,338250,0],\"computek\":[7577543993.266569,338250,0,0],\"omnia\":[15580199811.36727,169125,169125,169125],\"iron-gym\":[0,0,169125,169125],\"zer0\":[0,0,0,169125],\"CSEC\":[0,0,338250,0],\"rho-construction\":[0,0,169125,169125],\"global-pharm\":[0,0,169125,0],\"sigma-cosmetics\":[0,0,0,507375],\"defcomm\":[0,0,169125,169125],\"joesguns\":[0,0,0,338250],\"megacorp\":[0,0,169125,0],\"applied-energetics\":[0,169125,169125,0],\".\":[0,0,507375,0],\"4sigma\":[0,0,0,169125],\"zb-def\":[15412416470.079885,169125,169125,169125],\"n00dles\":[1211374.8002572507,169125,0,0],\"phantasy\":[0,0,0,169125],\"zb-institute\":[0,0,0,169125],\"harakiri-sushi\":[0,0,169125,0],\"nwo\":[537580138485.6938,169125,0,0],\"fulcrumtech\":[0,0,169125,0],\"omega-net\":[0,0,0,507375],\"avmnite-02h\":[0,0,169125,0],\"powerhouse-fitness\":[13772466898.80063,169125,338250,0],\"b-and-a\":[0,0,169125,0],\"silver-helix\":[0,0,169125,0],\"vitalife\":[0,0,169125,169125],\"kuai-gong\":[367252661204.0505,169125,169125,169125],\"titan-labs\":[0,0,0,169125],\"taiyang-digital\":[14508741650.933954,169125,0,0],\"helios\":[0,0,169125,169125],\"The-Cave\":[0,0,507375,0],\"aerocorp\":[0,0,169125,0],\"microdyne\":[0,0,169125,169125],\"darkweb\":[0,0,338250,0],\"aevum-police\":[0,0,169125,0],\"alpha-ent\":[0,0,0,169125],\"ecorp\":[0,0,0,169125],\"lexo-corp\":[0,0,169125,0],\"summit-uni\":[0,0,169125,169125],\"clarkinc\":[303828602743.67786,169125,0,169125],\"rothman-uni\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2624891695.0940733,\"onlineMoneyMade\":1318556727813.4277,\"onlineRunningTime\":4247.809999998328,\"ramUsage\":3.1,\"server\":\"neighbor-12\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-13\",\"httpPortOpen\":false,\"ip\":\"39.0.1.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n  return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n  const currentMoney = ns.getServerMoneyAvailable(server);\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const target = 0.90 * maxMoney;\\n\\n  ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n  const currentLevel = ns.getServerSecurityLevel(server);\\n  const minLevel = ns.getServerMinSecurityLevel(server);\\n  const target = 1.10 * minLevel;\\n\\n  ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('grow');\\n  ns.enableLog('hack');\\n  ns.enableLog('weaken');\\n\\n  const runningScript = ns.getRunningScript();\\n  const numThreads = runningScript.threads;\\n\\n  while (true) {\\n    await ns.sleep(500);\\n\\n    const fullServerList = buildServerList(ns);\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n    const server = filteredServerList[serverIndex];\\n\\n    if (!isAccessible(ns, server)) {\\n      continue;\\n    }\\n\\n    if (!hasSecurityLevel(ns, server)) {\\n      await ns.weaken(server, { threads: numThreads });\\n      ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    if (!hasMoney(ns, server)) {\\n      await ns.grow(server, { threads: numThreads });\\n      ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    ns.print(`[${server}] Hacking`);\\n    await ns.hack(server, { threads: numThreads });\\n  }\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"CSEC\":[0,0,169125,0],\"I.I.I.I\":[0,0,169125,0],\"zb-def\":[15412416470.079885,169125,0,338250],\"powerhouse-fitness\":[13353645241.145119,169125,169125,169125],\"harakiri-sushi\":[0,0,0,169125],\"defcomm\":[0,0,338250,0],\"blade\":[0,0,169125,676500],\"avmnite-02h\":[0,0,338250,0],\"b-and-a\":[0,0,0,169125],\"vitalife\":[0,0,0,338250],\"aerocorp\":[0,0,169125,0],\"snap-fitness\":[0,0,169125,0],\"univ-energy\":[0,0,169125,0],\"millenium-fitness\":[0,0,338250,169125],\"nova-med\":[0,0,0,169125],\"nwo\":[548331741255.40765,169125,169125,169125],\"zb-institute\":[0,0,169125,169125],\"icarus\":[18428292888.393215,169125,0,0],\"joesguns\":[0,0,169125,169125],\"zeus-med\":[0,0,0,169125],\"computek\":[0,0,338250,0],\"applied-energetics\":[0,0,0,169125],\"galactic-cyber\":[0,0,0,338250],\"zer0\":[0,0,0,169125],\"summit-uni\":[0,0,0,169125],\"phantasy\":[0,0,169125,0],\"sigma-cosmetics\":[0,0,0,169125],\"catalyst\":[0,0,0,169125],\"neo-net\":[0,0,169125,0],\"crush-fitness\":[980954234.1578457,169125,0,0],\"aevum-police\":[0,0,0,169125],\"darkweb\":[0,0,169125,0],\"The-Cave\":[0,0,169125,0],\"helios\":[0,0,169125,0],\"rothman-uni\":[0,0,169125,0],\"rho-construction\":[0,0,0,169125],\"solaris\":[0,0,169125,0],\"microdyne\":[9004443890.270325,169125,0,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1982483461.9764316,\"onlineMoneyMade\":605511493979.4541,\"onlineRunningTime\":4037.809999998519,\"ramUsage\":3.1,\"server\":\"neighbor-13\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-14\",\"httpPortOpen\":false,\"ip\":\"92.5.8.8\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n  return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n  const currentMoney = ns.getServerMoneyAvailable(server);\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const target = 0.90 * maxMoney;\\n\\n  ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n  const currentLevel = ns.getServerSecurityLevel(server);\\n  const minLevel = ns.getServerMinSecurityLevel(server);\\n  const target = 1.10 * minLevel;\\n\\n  ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('grow');\\n  ns.enableLog('hack');\\n  ns.enableLog('weaken');\\n\\n  const runningScript = ns.getRunningScript();\\n  const numThreads = runningScript.threads;\\n\\n  while (true) {\\n    await ns.sleep(500);\\n\\n    const fullServerList = buildServerList(ns);\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n    const server = filteredServerList[serverIndex];\\n\\n    if (!isAccessible(ns, server)) {\\n      continue;\\n    }\\n\\n    if (!hasSecurityLevel(ns, server)) {\\n      await ns.weaken(server, { threads: numThreads });\\n      ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    if (!hasMoney(ns, server)) {\\n      await ns.grow(server, { threads: numThreads });\\n      ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    ns.print(`[${server}] Hacking`);\\n    await ns.hack(server, { threads: numThreads });\\n  }\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"sigma-cosmetics\":[0,0,0,169125],\"millenium-fitness\":[0,0,169125,0],\"nectar-net\":[0,0,507375,0],\"deltaone\":[0,0,169125,0],\"CSEC\":[0,0,169125,0],\"syscore\":[9118374367.935814,169125,0,0],\"omnia\":[0,0,169125,0],\"clarkinc\":[0,0,0,169125],\"rho-construction\":[0,0,169125,169125],\"blade\":[0,0,169125,169125],\"titan-labs\":[0,0,338250,169125],\"neo-net\":[0,0,169125,0],\"nwo\":[0,0,169125,169125],\"The-Cave\":[0,0,338250,0],\"max-hardware\":[0,0,169125,0],\"aevum-police\":[0,0,169125,0],\"b-and-a\":[0,0,169125,0],\"joesguns\":[0,0,169125,169125],\"iron-gym\":[0,0,0,338250],\"phantasy\":[0,0,0,338250],\"nova-med\":[20078347365.60385,169125,169125,0],\"ecorp\":[0,0,169125,169125],\"computek\":[0,0,0,169125],\"avmnite-02h\":[0,0,169125,0],\"foodnstuff\":[0,0,0,169125],\"galactic-cyber\":[0,0,0,169125],\"kuai-gong\":[0,0,0,169125],\"icarus\":[18428292888.393215,169125,0,0],\"rothman-uni\":[0,0,0,169125],\"4sigma\":[390622736378.1021,169125,0,0],\"stormtech\":[18840229915.64905,169125,0,169125],\"fulcrumtech\":[0,0,0,169125],\"univ-energy\":[0,0,169125,0],\"alpha-ent\":[0,0,0,169125],\"I.I.I.I\":[0,0,169125,0],\"zb-def\":[0,0,0,169125],\"hong-fang-tea\":[0,0,169125,0],\"megacorp\":[0,0,0,169125],\"fulcrumassets\":[0,0,0,169125],\"zer0\":[0,0,169125,0],\"taiyang-digital\":[0,0,0,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1747985367.497768,\"onlineMoneyMade\":457087980915.684,\"onlineRunningTime\":3932.8099999986143,\"ramUsage\":3.1,\"server\":\"neighbor-14\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-15\",\"httpPortOpen\":false,\"ip\":\"93.9.6.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n  return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n  const currentMoney = ns.getServerMoneyAvailable(server);\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const target = 0.90 * maxMoney;\\n\\n  ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n  const currentLevel = ns.getServerSecurityLevel(server);\\n  const minLevel = ns.getServerMinSecurityLevel(server);\\n  const target = 1.10 * minLevel;\\n\\n  ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('grow');\\n  ns.enableLog('hack');\\n  ns.enableLog('weaken');\\n\\n  const runningScript = ns.getRunningScript();\\n  const numThreads = runningScript.threads;\\n\\n  while (true) {\\n    await ns.sleep(500);\\n\\n    const fullServerList = buildServerList(ns);\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n    const server = filteredServerList[serverIndex];\\n\\n    if (!isAccessible(ns, server)) {\\n      continue;\\n    }\\n\\n    if (!hasSecurityLevel(ns, server)) {\\n      await ns.weaken(server, { threads: numThreads });\\n      ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    if (!hasMoney(ns, server)) {\\n      await ns.grow(server, { threads: numThreads });\\n      ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    ns.print(`[${server}] Hacking`);\\n    await ns.hack(server, { threads: numThreads });\\n  }\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"the-hub\":[2565755608.3252096,169125,507375,0],\"joesguns\":[0,0,0,169125],\"solaris\":[0,0,169125,169125],\"aevum-police\":[0,0,0,169125],\"b-and-a\":[478880410148.65283,169125,0,169125],\"iron-gym\":[0,0,0,169125],\"helios\":[0,0,169125,169125],\"unitalife\":[0,0,0,169125],\"fulcrumtech\":[0,0,0,169125],\"n00dles\":[2446965.0140003697,338250,0,0],\"zeus-med\":[0,0,169125,0],\"stormtech\":[0,0,169125,0],\"zb-institute\":[0,0,0,169125],\"netlink\":[0,0,169125,169125],\"crush-fitness\":[1942674071.5674984,338250,0,0],\"rho-construction\":[0,0,0,169125],\"vitalife\":[0,0,0,169125],\"lexo-corp\":[0,0,0,169125],\"defcomm\":[0,0,0,169125],\"avmnite-02h\":[0,0,169125,0],\"applied-energetics\":[0,0,169125,0],\"blade\":[0,0,338250,0],\"clarkinc\":[303828602743.67786,169125,169125,0],\"titan-labs\":[0,0,338250,0],\"megacorp\":[0,0,169125,0],\"CSEC\":[0,0,169125,0],\"aerocorp\":[20369546005.109566,169125,0,0],\"darkweb\":[0,0,169125,0],\"icarus\":[18428292888.393215,169125,0,0],\"omega-net\":[0,0,0,169125],\"alpha-ent\":[0,0,169125,0],\"max-hardware\":[0,0,338250,0],\"galactic-cyber\":[14964919544.120687,169125,0,0],\"hong-fang-tea\":[0,0,169125,0],\"silver-helix\":[0,0,0,169125],\"phantasy\":[0,0,0,169125],\"taiyang-digital\":[0,0,0,169125],\"univ-energy\":[0,0,0,169125],\"kuai-gong\":[0,0,0,169125],\"omnitek\":[0,0,0,169125],\"run4theh111z\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1797014960.5164437,\"onlineMoneyMade\":840982647974.861,\"onlineRunningTime\":3372.8099999991236,\"ramUsage\":3.1,\"server\":\"neighbor-15\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-16\",\"httpPortOpen\":false,\"ip\":\"34.8.2.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n  return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n  const currentMoney = ns.getServerMoneyAvailable(server);\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const target = 0.90 * maxMoney;\\n\\n  ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n  const currentLevel = ns.getServerSecurityLevel(server);\\n  const minLevel = ns.getServerMinSecurityLevel(server);\\n  const target = 1.10 * minLevel;\\n\\n  ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('grow');\\n  ns.enableLog('hack');\\n  ns.enableLog('weaken');\\n\\n  const runningScript = ns.getRunningScript();\\n  const numThreads = runningScript.threads;\\n\\n  while (true) {\\n    await ns.sleep(500);\\n\\n    const fullServerList = buildServerList(ns);\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n    const server = filteredServerList[serverIndex];\\n\\n    if (!isAccessible(ns, server)) {\\n      continue;\\n    }\\n\\n    if (!hasSecurityLevel(ns, server)) {\\n      await ns.weaken(server, { threads: numThreads });\\n      ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    if (!hasMoney(ns, server)) {\\n      await ns.grow(server, { threads: numThreads });\\n      ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    ns.print(`[${server}] Hacking`);\\n    await ns.hack(server, { threads: numThreads });\\n  }\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"zb-institute\":[0,0,0,338250],\"iron-gym\":[0,0,169125,169125],\"foodnstuff\":[0,0,0,169125],\"I.I.I.I\":[0,0,169125,0],\"avmnite-02h\":[0,0,338250,0],\"The-Cave\":[0,0,169125,0],\"fulcrumassets\":[0,0,169125,0],\"joesguns\":[0,0,169125,0],\"icarus\":[0,0,0,169125],\"hong-fang-tea\":[0,0,169125,0],\"b-and-a\":[0,0,169125,169125],\"zeus-med\":[24202515265.108078,169125,169125,169125],\"crush-fitness\":[0,0,338250,0],\"unitalife\":[0,0,0,169125],\"rho-construction\":[0,0,338250,0],\"deltaone\":[0,0,0,338250],\"nova-med\":[0,0,169125,0],\"powerhouse-fitness\":[0,0,169125,169125],\"lexo-corp\":[6306556664.141901,169125,169125,0],\"nectar-net\":[0,0,169125,0],\"neo-net\":[0,0,0,338250],\"syscore\":[0,0,338250,169125],\"zer0\":[0,0,169125,169125],\"n00dles\":[2471185.226264707,338250,0,0],\"aerocorp\":[20369546005.109566,338250,0,169125],\"max-hardware\":[0,0,169125,0],\"taiyang-digital\":[0,0,0,169125],\"alpha-ent\":[0,0,0,169125],\"rothman-uni\":[0,0,0,169125],\"omnia\":[0,0,169125,169125],\"omnitek\":[0,0,169125,169125],\"zb-def\":[0,0,0,169125],\"silver-helix\":[0,0,0,169125],\"computek\":[3864547436.5659504,169125,0,0],\"darkweb\":[0,0,169125,0],\"aevum-police\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1778729333.611937,\"onlineMoneyMade\":54745636556.15176,\"onlineRunningTime\":3322.809999999169,\"ramUsage\":3.1,\"server\":\"neighbor-16\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-17\",\"httpPortOpen\":false,\"ip\":\"63.6.6.9\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n  return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n  const currentMoney = ns.getServerMoneyAvailable(server);\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const target = 0.90 * maxMoney;\\n\\n  ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n  const currentLevel = ns.getServerSecurityLevel(server);\\n  const minLevel = ns.getServerMinSecurityLevel(server);\\n  const target = 1.10 * minLevel;\\n\\n  ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('grow');\\n  ns.enableLog('hack');\\n  ns.enableLog('weaken');\\n\\n  const runningScript = ns.getRunningScript();\\n  const numThreads = runningScript.threads;\\n\\n  while (true) {\\n    await ns.sleep(500);\\n\\n    const fullServerList = buildServerList(ns);\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n    const server = filteredServerList[serverIndex];\\n\\n    if (!isAccessible(ns, server)) {\\n      continue;\\n    }\\n\\n    if (!hasSecurityLevel(ns, server)) {\\n      await ns.weaken(server, { threads: numThreads });\\n      ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    if (!hasMoney(ns, server)) {\\n      await ns.grow(server, { threads: numThreads });\\n      ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    ns.print(`[${server}] Hacking`);\\n    await ns.hack(server, { threads: numThreads });\\n  }\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"crush-fitness\":[0,0,0,169125],\"avmnite-02h\":[0,0,338250,0],\"icarus\":[0,0,0,169125],\"iron-gym\":[0,0,0,169125],\"joesguns\":[82438165.5362396,338250,0,0],\"global-pharm\":[0,0,0,169125],\"summit-uni\":[0,0,169125,0],\"megacorp\":[0,0,0,169125],\"netlink\":[0,0,169125,0],\"solaris\":[7181281578.286482,169125,169125,0],\"infocomm\":[14773711409.066082,169125,338250,169125],\"neo-net\":[0,0,0,169125],\"blade\":[0,0,0,169125],\"titan-labs\":[0,0,169125,169125],\"ecorp\":[0,0,0,169125],\"clarkinc\":[0,0,0,338250],\"run4theh111z\":[0,0,169125,0],\"taiyang-digital\":[0,169125,0,0],\"I.I.I.I\":[0,0,169125,0],\"galactic-cyber\":[0,0,169125,0],\"hong-fang-tea\":[0,0,169125,169125],\"snap-fitness\":[8358915712.37084,169125,0,0],\"univ-energy\":[0,0,169125,169125],\"catalyst\":[0,0,338250,0],\"zb-def\":[0,0,0,169125],\"the-hub\":[0,0,338250,169125],\"harakiri-sushi\":[0,0,0,169125],\"omnitek\":[0,0,0,169125],\"rho-construction\":[0,0,0,169125],\"The-Cave\":[0,0,169125,0],\"alpha-ent\":[0,0,169125,0],\"johnson-ortho\":[0,0,0,169125],\"rothman-uni\":[0,0,0,338250],\"aerocorp\":[0,0,0,169125],\"zb-institute\":[0,0,0,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1586830721.5921223,\"onlineMoneyMade\":30396346865.259644,\"onlineRunningTime\":3232.809999999251,\"ramUsage\":3.1,\"server\":\"neighbor-17\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-18\",\"httpPortOpen\":false,\"ip\":\"36.4.2.6\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n  let serversToScan = ['home'];\\n  let serverList = [];\\n\\n  while (serversToScan.length > 0) {\\n    const server = serversToScan.pop();\\n    const neighbors = ns.scan(server);\\n\\n    for (const neighbor of neighbors) {\\n      if (neighbor != 'home' && !serverList.includes(neighbor)) {\\n        serversToScan.push(neighbor);\\n        serverList.push(neighbor);\\n      }\\n    }\\n  }\\n\\n  return serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n  return ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n  const currentMoney = ns.getServerMoneyAvailable(server);\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const target = 0.90 * maxMoney;\\n\\n  ns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n  const currentLevel = ns.getServerSecurityLevel(server);\\n  const minLevel = ns.getServerMinSecurityLevel(server);\\n  const target = 1.10 * minLevel;\\n\\n  ns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n  return currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.enableLog('grow');\\n  ns.enableLog('hack');\\n  ns.enableLog('weaken');\\n\\n  const runningScript = ns.getRunningScript();\\n  const numThreads = runningScript.threads;\\n\\n  while (true) {\\n    await ns.sleep(500);\\n\\n    const fullServerList = buildServerList(ns);\\n    const filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n    const serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n    const server = filteredServerList[serverIndex];\\n\\n    if (!isAccessible(ns, server)) {\\n      continue;\\n    }\\n\\n    if (!hasSecurityLevel(ns, server)) {\\n      await ns.weaken(server, { threads: numThreads });\\n      ns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    if (!hasMoney(ns, server)) {\\n      await ns.grow(server, { threads: numThreads });\\n      ns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n      continue;\\n    }\\n\\n    ns.print(`[${server}] Hacking`);\\n    await ns.hack(server, { threads: numThreads });\\n  }\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"titan-labs\":[0,0,0,169125],\"neo-net\":[0,0,169125,507375],\"darkweb\":[0,0,338250,0],\".\":[0,0,676500,0],\"microdyne\":[0,0,338250,0],\"nectar-net\":[0,0,0,169125],\"univ-energy\":[0,0,0,338250],\"The-Cave\":[0,0,169125,0],\"alpha-ent\":[0,0,338250,169125],\"solaris\":[0,0,169125,0],\"silver-helix\":[0,0,169125,169125],\"rho-construction\":[0,0,0,169125],\"unitalife\":[0,0,0,169125],\"nova-med\":[20479914312.915928,169125,169125,338250],\"vitalife\":[0,0,0,169125],\"fulcrumassets\":[0,0,169125,169125],\"summit-uni\":[0,0,507375,169125],\"omnitek\":[0,0,338250,0],\"infocomm\":[0,0,0,169125],\"computek\":[0,0,169125,0],\"powerhouse-fitness\":[0,0,0,169125],\"foodnstuff\":[0,0,0,169125],\"rothman-uni\":[0,0,169125,0],\"millenium-fitness\":[0,0,338250,0],\"global-pharm\":[0,0,169125,0],\"max-hardware\":[0,0,0,169125],\"clarkinc\":[303828602743.67786,169125,0,0],\"fulcrumtech\":[0,0,0,169125],\"applied-energetics\":[0,0,169125,0],\"lexo-corp\":[12911153980.830063,169125,0,0],\"n00dles\":[2471176.239808185,338250,0,0],\"zb-def\":[15412416470.079885,169125,0,0],\"johnson-ortho\":[1234167257.8473387,169125,0,0],\"zer0\":[0,0,169125,0],\"galactic-cyber\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1818515642.7008622,\"onlineMoneyMade\":353868725941.59094,\"onlineRunningTime\":3052.8099999994147,\"ramUsage\":3.1,\"server\":\"neighbor-18\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":210.8102,\"discovery\":\"known\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"favor\":165.4871,\"discovery\":\"known\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":214.74970000000002,\"discovery\":\"known\",\"playerReputation\":1118482.604650325}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"favor\":3.4106,\"discovery\":\"known\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"favor\":86.8405,\"discovery\":\"known\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"favor\":3.4106,\"discovery\":\"known\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":28.1875,\"discovery\":\"known\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":40.3495,\"discovery\":\"known\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"EnableHistorySearch\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":500,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"36","AllGangsSave":"{\"Slum Snakes\":{\"power\":1130.2763679189263,\"territory\":0},\"Tetrads\":{\"power\":1026.044959917403,\"territory\":0},\"The Syndicate\":{\"power\":1096.7036699311848,\"territory\":0},\"The Dark Army\":{\"power\":1042.1133762881934,\"territory\":0},\"Speakers for the Dead\":{\"power\":10.875133740506506,\"territory\":0},\"NiteSec\":{\"power\":1,\"territory\":0.14285714285714485},\"The Black Hand\":{\"power\":2687.157143265337,\"territory\":0.8571428571428552}}","LastExportBonus":"1704228793659","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}