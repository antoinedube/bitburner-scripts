{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":5306,\"max\":5306},\"skills\":{\"hacking\":8179,\"strength\":75512,\"defense\":52968,\"dexterity\":4007,\"agility\":11616,\"charisma\":514,\"intelligence\":213},\"exp\":{\"hacking\":210924423294.5038,\"strength\":35570.580459128585,\"defense\":35570.580459128585,\"dexterity\":35762.66884504178,\"agility\":35570.580459128585,\"charisma\":2062.514199904354,\"intelligence\":414059.8052824482},\"mults\":{\"hacking_chance\":3.4282491349938367,\"hacking_speed\":3.268914681662859,\"hacking_money\":18.166180691441365,\"hacking_grow\":11.813464160497341,\"hacking\":16.352653989991065,\"strength\":705.1438079759698,\"defense\":494.6226131309705,\"dexterity\":37.377454491589084,\"agility\":108.47819789427164,\"charisma\":12.645841591025254,\"hacking_exp\":19.18496476870118,\"strength_exp\":5.113010940387442,\"defense_exp\":5.113010940387442,\"dexterity_exp\":5.8799625814455565,\"agility_exp\":5.113010940387442,\"charisma_exp\":8.235004124787364,\"company_rep\":24.533449788429017,\"faction_rep\":3.7134758859971875,\"crime_money\":6.830239251907509,\"crime_success\":3.654977526104353,\"hacknet_node_money\":5.782703733942473,\"hacknet_node_purchase_cost\":0.3253148717906453,\"hacknet_node_ram_cost\":0.42524819841914413,\"hacknet_node_core_cost\":0.42524819841914413,\"hacknet_node_level_cost\":0.3614609686562726,\"work_money\":4.222496620712988,\"bladeburner_max_stamina\":1.1400000000000001,\"bladeburner_stamina_gain\":1.1400000000000001,\"bladeburner_analysis\":1.1400000000000001,\"bladeburner_success_chance\":1.1400000000000001},\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":21},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"nextSENS Gene Modification\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"TITN-41 Gene-Modification Injection\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Hydroflame Left Arm\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface NeuroNet Injector\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"Graphene Bionic Spine Upgrade\"},{\"level\":1,\"name\":\"ECorp HVMind Implant\"},{\"level\":1,\"name\":\"Unstable Circadian Modulator\"},{\"level\":1,\"name\":\"CordiARC Fusion Reactor\"},{\"level\":1,\"name\":\"SPTN-97 Gene Modification\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface Optimization Submodule\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Graphene Bionic Legs Upgrade\"},{\"level\":1,\"name\":\"Graphene Bone Lacings\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Neotra\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Photosynthetic Cells\"},{\"level\":1,\"name\":\"SmartJaw\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"Graphene BrachiBlades Upgrade\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Neuronal Densification\"},{\"level\":1,\"name\":\"Enhanced Social Interaction Implant\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"QLink\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":21,\"name\":\"NeuroFlux Governor\"},{\"level\":22,\"name\":\"NeuroFlux Governor\"},{\"level\":23,\"name\":\"NeuroFlux Governor\"},{\"level\":24,\"name\":\"NeuroFlux Governor\"},{\"level\":25,\"name\":\"NeuroFlux Governor\"},{\"level\":26,\"name\":\"NeuroFlux Governor\"},{\"level\":27,\"name\":\"NeuroFlux Governor\"},{\"level\":28,\"name\":\"NeuroFlux Governor\"},{\"level\":29,\"name\":\"NeuroFlux Governor\"},{\"level\":30,\"name\":\"NeuroFlux Governor\"},{\"level\":31,\"name\":\"NeuroFlux Governor\"},{\"level\":32,\"name\":\"NeuroFlux Governor\"},{\"level\":33,\"name\":\"NeuroFlux Governor\"},{\"level\":34,\"name\":\"NeuroFlux Governor\"},{\"level\":35,\"name\":\"NeuroFlux Governor\"},{\"level\":36,\"name\":\"NeuroFlux Governor\"}],\"city\":\"Ishima\",\"bitNodeN\":12,\"corporation\":null,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"NiteSec\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":1518265.3285994409,\"hack\":171532,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":14125,\"hack_exp\":13250049.187734514,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":855475.9523111909,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":108038015.81059091,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":7096903.0818644995,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-1\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":1874034.1393029115,\"hack\":168903,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":14057,\"hack_exp\":15955678.92384862,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":1033823.4736387316,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":101019562.93992186,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":6683734.750157571,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-2\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":2180656.793115241,\"hack\":169683,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":14227,\"hack_exp\":18347344.503076747,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":1191729.0648394574,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":99254529.03023997,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":6597528.2013049815,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-3\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":12914827.624818362,\"hack\":115775,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":10385,\"hack_exp\":83718215.97068088,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":5562692.757478468,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":35250160.93744983,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":2445225.973226971,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-4\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":13228536.617970925,\"hack\":110837,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":9908,\"hack_exp\":84496398.5573294,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":5596507.363978627,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":32257254.656291366,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":2222814.782549171,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-5\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":11255703.460297264,\"hack\":130427,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":11689,\"hack_exp\":76357866.48561995,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":5078960.0057286965,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":45431406.984411806,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":3159267.952036823,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-6\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":11273743.095316617,\"hack\":129844,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":11652,\"hack_exp\":76367469.65319516,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":5085742.813803588,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":45024706.49162861,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":3138700.9755684445,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-7\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":13173233.412552254,\"hack\":110143,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":9852,\"hack_exp\":84007704.25092974,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":5567932.38856661,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":31885206.836073603,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":2200173.974792472,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-8\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":12043167.326705985,\"hack\":117774,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":10538,\"hack_exp\":78855961.77378787,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":5233727.791666771,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":36844581.45067608,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":2551137.0102984244,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-9\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":11442783.910434533,\"hack\":123716,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":11184,\"hack_exp\":76300031.73230791,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":5115017.657829006,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":40881719.87847251,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":2888118.3381143403,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-10\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":11291635.490852349,\"hack\":113858,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":10650,\"hack_exp\":73465930.73402552,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":5085090.236896091,\"hack_mult\":2.2723515045000005,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":34847210.45577279,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":2622126.956462653,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-11\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":9031590.041164057,\"hack\":113992,\"str\":1,\"def\":1,\"dex\":1,\"agi\":1,\"cha\":10208,\"hack_exp\":59780899.73099268,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":3996176.9406872643,\"hack_mult\":2.2723515045,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":36175939.531376235,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":2540702.6682693628,\"upgrades\":[\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"Neuralstimulator\",\"DataJack\"],\"name\":\"audrey-12\"}}],\"wanted\":8.514316906103538,\"respect\":111228178.24112998,\"isHackingGang\":true,\"respectGainRate\":344.632093419829,\"wantedGainRate\":0.020871686449701766,\"moneyGainRate\":985077.8803165571,\"storedCycles\":2,\"storedTerritoryAndPowerCycles\":73,\"territoryClashChance\":0,\"territoryWarfareEngaged\":false,\"notifyMemberDeath\":true}},\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Illuminati\",\"Daedalus\",\"NiteSec\",\"Tetrads\",\"Tian Di Hui\"],\"factionInvitations\":[\"Slum Snakes\",\"Netburners\",\"The Black Hand\",\"The Syndicate\",\"CyberSec\",\"Sector-12\",\"BitRunners\",\"The Covenant\",\"Aevum\",\"Volhaven\",\"Chongqing\",\"New Tokyo\",\"Ishima\"],\"hacknetNodes\":[\"hacknet-server-0\",\"hacknet-server-1\",\"hacknet-server-2\",\"hacknet-server-3\",\"hacknet-server-4\",\"hacknet-server-5\",\"hacknet-server-6\",\"hacknet-server-7\",\"hacknet-server-8\",\"hacknet-server-9\",\"hacknet-server-10\",\"hacknet-server-11\"],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":12582912,\"hashes\":841.7805675749746,\"upgrades\":{\"Sell for Money\":4505,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":107,\"Increase Maximum Money\":109,\"Improve Studying\":5,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":-161609,\"numPeopleKilled\":0,\"location\":\"Travel Agency\",\"money\":4662075616950.308,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":53738831041.095436,\"hacking\":74462518170801.36,\"hacknet\":4505000000,\"hacknet_expenses\":-1511873648690.0908,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":411479894.6362749,\"stock\":0,\"total\":4662074616950.308,\"work\":0,\"servers\":-16061698109049.31,\"other\":-306700000,\"augmentations\":-52285220407045.625}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-58943731.19998985,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":460570972139.1728,\"hacking\":127275981553834.67,\"hacknet\":2052570098717.2183,\"hacknet_expenses\":-7844773149827.21,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":18349573480.049793,\"stock\":0,\"total\":5470317780191.55,\"work\":211549.1547309876,\"servers\":-31612775105328.99,\"other\":-3108000000,\"augmentations\":-84876439430638.48}},\"playtimeSinceLastAug\":12076600,\"playtimeSinceLastBitnode\":512916200,\"lastAugReset\":1703101719551,\"lastNodeReset\":1702600878706,\"purchasedServers\":[\"neighbor-0\",\"neighbor-1\",\"neighbor-2\",\"neighbor-3\",\"neighbor-4\",\"neighbor-5\",\"neighbor-6\",\"neighbor-7\",\"neighbor-8\",\"neighbor-9\",\"neighbor-10\",\"neighbor-11\",\"neighbor-12\",\"neighbor-13\",\"neighbor-14\",\"neighbor-15\",\"neighbor-16\",\"neighbor-17\",\"neighbor-18\",\"neighbor-19\"],\"scriptProdSinceLastAug\":74462518170801.36,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":30,\"max\":30},\"skills\":{\"hacking\":1,\"strength\":201,\"defense\":201,\"dexterity\":201,\"agility\":201,\"charisma\":1,\"intelligence\":179},\"exp\":{\"hacking\":0,\"strength\":1529527.341173843,\"defense\":1529527.341173843,\"dexterity\":1529527.341173843,\"agility\":1529527.341173843,\"charisma\":0,\"intelligence\":142067.42944290765},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":15,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":0,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":30,\"max\":30},\"skills\":{\"hacking\":1,\"strength\":201,\"defense\":201,\"dexterity\":201,\"agility\":201,\"charisma\":1,\"intelligence\":176},\"exp\":{\"hacking\":0,\"strength\":1529527.341173843,\"defense\":1529527.341173843,\"dexterity\":1529527.341173843,\"agility\":1529527.341173843,\"charisma\":0,\"intelligence\":128719.45344066303},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":15,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":0,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":30,\"max\":30},\"skills\":{\"hacking\":1,\"strength\":201,\"defense\":201,\"dexterity\":201,\"agility\":201,\"charisma\":1,\"intelligence\":176},\"exp\":{\"hacking\":0,\"strength\":1529527.341173843,\"defense\":1529527.341173843,\"dexterity\":1529527.341173843,\"agility\":1529527.341173843,\"charisma\":0,\"intelligence\":128682.05988337383},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":15,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":0,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":30,\"max\":30},\"skills\":{\"hacking\":1,\"strength\":201,\"defense\":201,\"dexterity\":201,\"agility\":201,\"charisma\":1,\"intelligence\":176},\"exp\":{\"hacking\":0,\"strength\":1529527.341173843,\"defense\":1529527.341173843,\"dexterity\":1529527.341173843,\"agility\":1529527.341173843,\"charisma\":0,\"intelligence\":128682.83139255909},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":15,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":0,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":30,\"max\":30},\"skills\":{\"hacking\":1,\"strength\":201,\"defense\":201,\"dexterity\":201,\"agility\":201,\"charisma\":1,\"intelligence\":173},\"exp\":{\"hacking\":0,\"strength\":1529527.332429498,\"defense\":1529527.332429498,\"dexterity\":1529527.332429498,\"agility\":1529527.332429498,\"charisma\":0,\"intelligence\":117729.12392306191},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":15,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":0,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":30,\"max\":30},\"skills\":{\"hacking\":1,\"strength\":201,\"defense\":201,\"dexterity\":201,\"agility\":201,\"charisma\":1,\"intelligence\":173},\"exp\":{\"hacking\":0,\"strength\":1529527.332429498,\"defense\":1529527.332429498,\"dexterity\":1529527.332429498,\"agility\":1529527.332429498,\"charisma\":0,\"intelligence\":117862.62575957252},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":15,\"crimeType\":\"Mug\"}},\"memory\":100,\"shock\":0,\"storedCycles\":0,\"sync\":100}}],\"sleevesFromCovenant\":3,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,3],[2,3],[3,3],[4,3],[5,3],[10,3],[9,3],[12,11],[6,3],[7,3]]},\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1662043985194},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1662055145998},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1662059766003},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1662066426141},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1662123294982},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1662473253800},{\"ID\":\"NITESEC\",\"unlockedOn\":1662586146115},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1662599826142},{\"ID\":\"DONATION\",\"unlockedOn\":1663589558449},{\"ID\":\"NS2\",\"unlockedOn\":1664451835859},{\"ID\":\"FROZE\",\"unlockedOn\":1664473094691},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1664552329001},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1664798852132},{\"ID\":\"TOR\",\"unlockedOn\":1665066056909},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1665074458530},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1665081718922},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1665334933764},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1665766590313},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1665837400497},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1665874707261},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1665939874779},{\"ID\":\"WORKOUT\",\"unlockedOn\":1665946235177},{\"ID\":\"TRAVEL\",\"unlockedOn\":1666024890747},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1666127536448},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1666177601953},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1666201654675},{\"ID\":\"SF1.1\",\"unlockedOn\":1666396556449},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1668533490192},{\"ID\":\"GANG\",\"unlockedOn\":1668867250197},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1668954907599},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1668955027612},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1669208876810},{\"ID\":\"SF2.1\",\"unlockedOn\":1669423716199},{\"ID\":\"CORPORATION\",\"unlockedOn\":1669431816190},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1671198038341},{\"ID\":\"SF3.1\",\"unlockedOn\":1671300458277},{\"ID\":\"CHALLENGE_BN1\",\"unlockedOn\":1671822590337},{\"ID\":\"SF4.1\",\"unlockedOn\":1674137591582},{\"ID\":\"SF5.1\",\"unlockedOn\":1675551633160},{\"ID\":\"N00DLES\",\"unlockedOn\":1677761263550},{\"ID\":\"SF10.1\",\"unlockedOn\":1680550899708},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1683499237184},{\"ID\":\"KARMA_1000000\",\"unlockedOn\":1683585524648},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1686441026190},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1686518683455},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1686519223506},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1688038167678},{\"ID\":\"ALL_HACKNET_SERVER\",\"unlockedOn\":1688038167687},{\"ID\":\"MAX_HACKNET_SERVER\",\"unlockedOn\":1688038167689},{\"ID\":\"SF9.1\",\"unlockedOn\":1688302024803},{\"ID\":\"NEUROFLUX_255\",\"unlockedOn\":1689366941906},{\"ID\":\"FAST_BN\",\"unlockedOn\":1689431425450},{\"ID\":\"SF12.1\",\"unlockedOn\":1689714316805},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1696862815306},{\"ID\":\"SF6.1\",\"unlockedOn\":1697665718942},{\"ID\":\"SF7.1\",\"unlockedOn\":1699191969386},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1701305531389}],\"terminalCommandHistory\":[\"run fetch-scripts.js \",\"nano buy-servers.js \",\"run buy-servers.js \",\"run fetch-scripts.js \",\"run bootstrap.js \",\"nano buy-hacknet-server.js\",\"nano buy-hacknet-server.js fetch-scripts.js \",\"mv buy-hacknet-server.js buy-hacknet-servers.js\",\"nano buy-hacknet-servers.js buy-hacknet-nodes.js \",\"rm buy-hacknet-nodes.js \",\"nano bootstrap.js fetch-scripts.js buy-hacknet-servers.js \",\"run bootstrap.js \",\"home ; nano spend-hashes.js \",\"run spend-hashes.js \",\"nano bootstrap.js fetch-scripts.js spend-hashes.js \",\"run fetch-scripts.js \",\"connect The-Cave \",\"scan\",\"home\",\"run bootstrap.js \",\"connect The-Cave \",\"connect w0r1d_d43m0n \",\"analyze \",\"hack\",\"run bootstrap.js \",\"run fetch-scripts.js \",\"cat bootstrap.js \",\"nano spend-hashes.js buy-hacknet-servers.js buy-servers.js \",\"run bootstrap.js \",\"run fetch-scripts.js \",\"nano bootstrap.js \",\"run bootstrap.js \",\"nano spend-hashes.js \",\"run bootstrap.js \",\"nano spend-hashes.js \",\"run bootstrap.js \",\"home ; nano buy-hacknet-servers.js\",\"top\",\"run bootstrap.js \",\"home ; nano spend-hashes.js\",\"nano *.js\",\"run bootstrap.js \",\"run list-server-security-level.js \",\"nano buy-hacknet-servers.js \",\"run bootstrap.js \",\"nano spend-hashes.js \",\"home\",\"nano buy-hacknet-servers.js \",\"run bootstrap.js \",\"top\"],\"lastUpdate\":1703113795847,\"lastSave\":1703113748447,\"totalPlaytime\":41070180600,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":4757,\"factionWorkType\":\"hacking\",\"factionName\":\"Tian Di Hui\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"10c510f1398e51\",\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"Bladeburners\",\"Shadows of Anarchy\"]}}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"5.0.5.9\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"ServerProfiler.exe\",\"DeepscanV2.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"launch-hacking.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork, buildPath } from \\\"./scan.js\\\";\\nimport { buildHackingProgramList, countAvailablePrograms } from \\\"./hacking-programs.js\\\";\\n\\n/** @param {NS} ns */\\nasync function openPorts(ns, hackingPrograms, target) {\\n\\tfor (const program of hackingPrograms) {\\n\\t\\tif (ns.fileExists(program.executableName, \\\"home\\\")) {\\n\\t\\t\\tconst executable = program['functionName'].bind(ns);\\n\\t\\t\\tawait executable(target);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction launchScript(ns, script, server) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tconst availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\tconst scriptNumThreads = ~~(availableRam / scriptRam);\\n\\n\\tif (scriptNumThreads > 0) {\\n\\t\\tns.exec(script, server, scriptNumThreads);\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tconst replace = false;  // Replace an existing script\\n\\n\\twhile (true) {\\n\\t\\tconst fullServerList = scanAllNetwork(ns, 'home');\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tfor (const server of filteredServerList) {\\n\\t\\t\\tns.print(`Current server: ${server}`);\\n\\n\\t\\t\\tconst playerHackingLevel = ns.getHackingLevel();\\n\\t\\t\\tconst hackingPrograms = buildHackingProgramList(ns);\\n\\t\\t\\tconst numberAvailablePrograms = countAvailablePrograms(ns, hackingPrograms);\\n\\n\\t\\t\\t// Check server level vs player level\\n\\t\\t\\tconst machineHackingLevel = ns.getServerRequiredHackingLevel(server);\\n\\t\\t\\tns.print(`Level player: ${playerHackingLevel}, level machine: ${machineHackingLevel}`);\\n\\n\\t\\t\\t// Check number of ports required vs number of programs available\\n\\t\\t\\tconst requiredNumberOfPorts = ns.getServerNumPortsRequired(server);\\n\\t\\t\\tns.print(`Required num ports: ${requiredNumberOfPorts}, number available programs: ${numberAvailablePrograms}`);\\n\\n\\t\\t\\tif (playerHackingLevel < machineHackingLevel) {\\n\\t\\t\\t\\tns.print('----------\\\\n');\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (numberAvailablePrograms < requiredNumberOfPorts) {\\n\\t\\t\\t\\tns.print('----------\\\\n');\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!ns.hasRootAccess(server)) {\\n\\t\\t\\t\\tawait openPorts(ns, hackingPrograms, server);\\n\\t\\t\\t\\tns.nuke(server);\\n\\n\\t\\t\\t\\tif (server == 'w0r1d_d43m0n') {\\n\\t\\t\\t\\t\\tns.tprint('w0r1d_d43m0n is now root-accessible');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.print(`hasRootAccess: ${ns.hasRootAccess(server)}`);\\n\\n\\t\\t\\tconst isBackdoorInstalled = ns.getServer(server).backdoorInstalled;\\n\\t\\t\\tns.print(`isBackdoorInstalled: ${isBackdoorInstalled}`);\\n\\t\\t\\tif (ns.hasRootAccess(server) && !isBackdoorInstalled && server != 'w0r1d_d43m0n') {\\n\\t\\t\\t\\tconst path = await buildPath(ns, server);\\n\\t\\t\\t\\tfor (let item of path) {\\n\\t\\t\\t\\t\\t// ns.print(`Connecting to ${item} from ${ns.singularity.getCurrentServer()}`);\\n\\t\\t\\t\\t\\tif (!ns.singularity.connect(item)) {\\n\\t\\t\\t\\t\\t\\tns.print(`Error while connecting to ${item}`);\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tns.print('Installing backdoor');\\n\\t\\t\\t\\tawait ns.singularity.installBackdoor();\\n\\t\\t\\t\\tns.print('Backdoor installed');\\n\\n\\t\\t\\t\\tfor (let item of path.reverse()) {\\n\\t\\t\\t\\t\\tif (!ns.singularity.connect(item)) {\\n\\t\\t\\t\\t\\t\\tns.print(`Error while connecting to ${item}`);\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (replace) {\\n\\t\\t\\t\\tns.killall(server);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (replace || !ns.fileExists('hack-server.js', server)) {\\n\\t\\t\\t\\tconst scpStatus = ns.scp('hack-server.js', server, 'home');\\n\\t\\t\\t\\tif (!scpStatus) {\\n\\t\\t\\t\\t\\tns.print(`Failed to copy hack-server.js on ${server}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!ns.isRunning('hack-server.js', server)) {\\n\\t\\t\\t\\tlaunchScript(ns, 'hack-server.js', server);\\n\\t\\t\\t}\\n\\n\\t\\t\\tns.print('----------\\\\n');\\n\\t\\t}\\n\\n\\t\\tif (replace) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000 * 5);\\n\\t}\\n}\\n\",\"filename\":\"launch-hacking.js\",\"server\":\"home\"}}],[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"home\"}}],[\"list-server-prices.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tfor (let i = 2; i < 21; i++) {\\n\\t\\tconst serverRam = Math.pow(2.0, i);\\n\\t\\tconst serverCost = ns.getPurchasedServerCost(serverRam);\\n\\t\\tns.tprint(`Server ram: ${serverRam}`);\\n\\t\\tns.tprint(`Server cost: ${formatNumber(serverCost)}\\\\$`);\\n\\t\\tns.tprint(\\\"\\\\n\\\");\\n\\t}\\n}\\n\",\"filename\":\"list-server-prices.js\",\"server\":\"home\"}}],[\"scan.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport function scanAllNetwork(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nexport async function buildPath(ns, server) {\\n\\tlet pathList = [['home']];\\n\\n\\twhile (true) {\\n\\t\\tconst currentPath = pathList.pop();\\n\\t\\tconst lastItem = currentPath.pop();\\n\\t\\tconst neighbors = ns.scan(lastItem);\\n\\t\\tconst neighborsWithoutServers = neighbors.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-') && !currentPath.includes(name));\\n\\n\\t\\tfor (let neighbor of neighborsWithoutServers) {\\n\\t\\t\\tlet newPath = currentPath.slice();\\n\\t\\t\\tnewPath.push(lastItem);\\n\\t\\t\\tnewPath.push(neighbor);\\n\\n\\t\\t\\tif (neighbor == server) {\\n\\t\\t\\t\\treturn newPath;\\n\\t\\t\\t}\\n\\n\\t\\t\\tpathList.unshift(newPath);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(250);  // Just so that the editor does not complain...\\n\\t}\\n}\\n\",\"filename\":\"scan.js\",\"server\":\"home\"}}],[\"buy-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan\\\";\\n\\nfunction generateUUID() {\\n\\t// https://stackoverflow.com/questions/105034/how-do-i-create-a-guid-uuid\\n\\t// crypto.randomUUID();\\n\\t// crypto.getRandomValues();\\n}\\n\\n/** @param {NS} ns */\\nfunction launchScript(ns, scriptName, server) {\\n\\tconst scpStatus = ns.scp(scriptName, server, 'home');\\n\\tif (!scpStatus) {\\n\\t\\tns.print('Failed to copy ' + scriptName + ' on ' + server);\\n\\t}\\n\\n\\tns.killall(server);\\n\\n\\tconst maxRam = ns.getServerMaxRam(server);\\n\\tconst usedRam = ns.getServerUsedRam(server);\\n\\tconst availableRam = maxRam - usedRam;\\n\\tconst scriptRam = ns.getScriptRam(scriptName, server);\\n\\tconst numThreads = Math.floor(availableRam / scriptRam);\\n\\tif (numThreads > 0) {\\n\\t\\tif (ns.exec(scriptName, server, numThreads) == 0) {\\n\\t\\t\\tns.print('Error launching script');\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst BUYING_DELAY = 250;\\n\\tconst UPGRADING_DELAY = 5 * 1000;\\n\\tconst FOLLOWING_BATCH_DELAY = 1000 * 60 * 5;\\n\\tconst HOME_SERVER = 'home';\\n\\n\\tlet targetRam = 4;\\n\\twhile (targetRam <= ns.getPurchasedServerMaxRam()) {\\n\\t\\tconst maxNumberOfServers = ns.getPurchasedServerLimit();\\n\\t\\tconst availableMoney = ns.getServerMoneyAvailable('home');\\n\\t\\tconst serverCost = ns.getPurchasedServerCost(targetRam);\\n\\n\\t\\tif (availableMoney < maxNumberOfServers * serverCost) {\\n\\t\\t\\ttargetRam /= 2;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\ttargetRam *= 2;\\n\\t}\\n\\n\\tif (targetRam < 8) {\\n\\t\\ttargetRam = 8;\\n\\t}\\n\\n\\tns.print(`Starting target ram: ${targetRam}`);\\n\\n\\t// Purchase missing servers\\n\\twhile (true) {\\n\\t\\t// List current servers\\n\\t\\tconst serverList = scanAllNetwork(ns);\\n\\t\\tlet purchasedServers = serverList.filter(name => name.startsWith('neighbor-'));\\n\\n\\t\\t// Stopping criteria\\n\\t\\tif (purchasedServers.length == ns.getPurchasedServerLimit()) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// If limit is not reached, buy server at current targetRam\\n\\t\\tif (ns.getPurchasedServerCost(targetRam) < ns.getServerMoneyAvailable(HOME_SERVER)) {\\n\\t\\t\\tconst name = `neighbor-${purchasedServers.length}`;\\n\\t\\t\\tns.print(`Purchasing server ${name}`);\\n\\t\\t\\tns.purchaseServer(name, targetRam);\\n\\t\\t\\tpurchasedServers.push(name);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(BUYING_DELAY);\\n\\t}\\n\\n\\tconst purchasedServers = scanAllNetwork(ns).filter(name => name.startsWith('neighbor-'));\\n\\tns.print(`Purchased servers: ${purchasedServers}`);\\n\\n\\ttargetRam *= 2;\\n\\twhile (true) {\\n\\t\\t// Stopping criteria\\n\\t\\tlet countServerWithTargetRam = 0;\\n\\t\\tfor (const purchasedServer of purchasedServers) {\\n\\t\\t\\tconst purchasedServerRam = ns.getServer(purchasedServer).maxRam;\\n\\t\\t\\tif (purchasedServerRam >= targetRam) {\\n\\t\\t\\t\\tcountServerWithTargetRam++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tns.print(`Number of servers at target (target: ${ns.formatRam(targetRam)} / max: ${ns.formatRam(ns.getPurchasedServerMaxRam())}): ${countServerWithTargetRam} vs ${ns.getPurchasedServerLimit()}`);\\n\\t\\tif (countServerWithTargetRam == ns.getPurchasedServerLimit()) {\\n\\t\\t\\tif (targetRam >= ns.getPurchasedServerMaxRam()) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\ttargetRam *= 2;\\n\\n\\t\\t\\tawait ns.sleep(FOLLOWING_BATCH_DELAY);\\n\\t\\t}\\n\\n\\t\\tfor (const purchasedServer of purchasedServers) {\\n\\t\\t\\tconst purchasedServerRam = ns.getServer(purchasedServer).maxRam;\\n\\t\\t\\tif (purchasedServerRam < targetRam) {\\n\\t\\t\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable('home');\\n\\t\\t\\t\\tconst upgradeCost = ns.getPurchasedServerUpgradeCost(purchasedServer, targetRam);\\n\\t\\t\\t\\tif (upgradeCost < moneyAvailable) {\\n\\t\\t\\t\\t\\tif (ns.upgradePurchasedServer(purchasedServer, targetRam)) {\\n\\t\\t\\t\\t\\t\\tns.print(`Upgraded ${purchasedServer} to ${targetRam}Gb with cost of ${ns.formatNumber(upgradeCost)}\\\\$`);\\n\\t\\t\\t\\t\\t\\tlaunchScript(ns, 'hack-remote.js', purchasedServer);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tns.print(`Error while upgrading purchased server ${purchasedServer} to ${targetRam}Gb`);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(UPGRADING_DELAY);\\n\\t}\\n}\\n\",\"filename\":\"buy-servers.js\",\"server\":\"home\"}}],[\"delete-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst fullServerList = scanAllNetwork(ns);\\n\\tconst serverList = fullServerList.filter(name => name.startsWith('neighbor-'));\\n\\n\\tfor (const server of serverList) {\\n\\t\\tns.tprint('Deleting: ' + server);\\n\\t\\tns.killall(server);\\n\\t\\tns.deleteServer(server);\\n\\t}\\n}\\n\",\"filename\":\"delete-servers.js\",\"server\":\"home\"}}],[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"home\"}}],[\"list-server-money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst fullServerList = scanAllNetwork(ns);\\n\\tconst serverList = fullServerList.filter(name => !name.startsWith('neighbor-'));\\n\\n\\tfor (let server of serverList) {\\n\\t\\tconst moneyAvailable = ns.getServerMoneyAvailable(server);\\n\\t\\tconst maxMoneyAvailable = ns.getServerMaxMoney(server);\\n\\n\\t\\tns.tprint(`Server: ${server} --> ${ns.formatNumber(moneyAvailable)}\\\\$ / ${ns.formatNumber(maxMoneyAvailable)}\\\\$`);\\n\\t}\\n}\\n\",\"filename\":\"list-server-money.js\",\"server\":\"home\"}}],[\"fetch-scripts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    if (ns.getHostname() !== \\\"home\\\") {\\n        throw new Exception(\\\"Run the script from home\\\");\\n    }\\n\\n    const scripts = [\\n        'bootstrap.js',\\n        'buy-darkweb-programs.js',\\n        'buy-hacknet-servers.js',\\n        'buy-servers.js',\\n        'delete-servers.js',\\n        'fetch-scripts.js',\\n        'hack-remote.js',\\n        'hack-server.js',\\n        'hacking-programs.js',\\n        'launch-hacking.js',\\n        'list-player-karma.js',\\n        'list-server-money.js',\\n        'list-server-prices.js',\\n        'list-server-security-level.js',\\n        'manage-bladeburner.js',\\n        'manage-corporation.js',\\n        'manage-gang.js',\\n        'manage-sleeves.js',\\n        'scan.js',\\n        'spend-hashes.js'\\n    ];\\n\\n    for (const scriptName of scripts) {\\n        ns.tprint(`Fetching: ${scriptName}`);\\n        await ns.wget(\\n            `https://raw.githubusercontent.com/antoinedube/bitburner-scripts/main/scripts/${scriptName}`,\\n            `${scriptName}`\\n        );\\n\\n        await ns.sleep(250);\\n    }\\n}\\n\",\"filename\":\"fetch-scripts.js\",\"server\":\"home\"}}],[\"list-player-karma.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst karma = ns.heart.break();\\n\\tns.tprint(`karma: ${karma.toFixed(2)}`);\\n}\\n\",\"filename\":\"list-player-karma.js\",\"server\":\"home\"}}],[\"list-server-security-level.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst fullServerList = scanAllNetwork(ns);\\n\\tconst serverList = fullServerList.filter(name => !name.startsWith('neighbor-'));\\n\\n\\tfor (let server of serverList) {\\n\\t\\tconst currentSecurityLevel = ns.getServerSecurityLevel(server);\\n\\t\\tconst minSecurityLevel = ns.getServerMinSecurityLevel(server)\\n\\n\\t\\tns.tprint(`Server: ${server} --> ${ns.formatNumber(currentSecurityLevel)} / ${ns.formatNumber(minSecurityLevel)}`);\\n\\t}\\n}\\n\",\"filename\":\"list-server-security-level.js\",\"server\":\"home\"}}],[\"bootstrap.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const scripts = [\\n        'launch-hacking.js',\\n        'spend-hashes.js',\\n        'buy-hacknet-servers.js',\\n        'buy-servers.js',\\n        'manage-sleeves.js',\\n        'manage-gang.js',\\n        'buy-darkweb-programs.js',\\n        /* 'manage-bladeburner.js' */\\n    ];\\n\\n    if (ns.isRunning('hack-remote.js')) {\\n        ns.kill('hack-remote.js', 'home');\\n    }\\n\\n    for (let script of scripts) {\\n        if (!ns.isRunning(script)) {\\n            ns.tprint(`Launching script: ${script}`);\\n            ns.run(script);\\n\\n            await ns.sleep(250);\\n        }\\n    }\\n\\n    await ns.sleep(2 * 1000);\\n\\n    const hackingScript = 'hack-remote.js';\\n    const scriptRam = ns.getScriptRam(hackingScript);\\n    const serverMaxRam = ns.getServerMaxRam('home');\\n    const serverUsedRam = ns.getServerUsedRam('home');\\n    const availableRam = serverMaxRam - serverUsedRam;\\n    const scriptNumThreads = ~~(availableRam / scriptRam);\\n\\n    if (scriptNumThreads > 0) {\\n        ns.tprint(`Launching script: ${hackingScript} with ${scriptNumThreads} threads`);\\n        ns.exec(hackingScript, 'home', scriptNumThreads);\\n    }\\n\\n    if (!ns.bladeburner.inBladeburner()) {\\n        ns.singularity.universityCourse('Rothman University', 'Computer Science');\\n    }\\n}\\n\",\"filename\":\"bootstrap.js\",\"server\":\"home\"}}],[\"manage-gang.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction displayMembersInformation(ns, memberName) {\\n\\tconst memberInfo = ns.gang.getMemberInformation(memberName);\\n\\tconst hackingLevel = memberInfo['hack'];\\n\\tconst currentTask = memberInfo['task'];\\n\\tns.print(`Member: ${memberName}\\\\thacking level: ${hackingLevel}\\\\ttask: ${currentTask}`);\\n}\\n\\n/** @param {NS} ns */\\nfunction assignMember(ns, name, task = '') {\\n\\tconst memberInfo = ns.gang.getMemberInformation(name);\\n\\tconst hackingLevel = memberInfo['hack'];\\n\\tconst currentTask = memberInfo['task'];\\n\\n\\t/*\\n\\tTask names:\\n\\t\\t\\t- Unassigned\\n\\t\\t\\t- Ransomware\\n\\t\\t\\t- Phishing\\n\\t\\t\\t- Identity Theft\\n\\t\\t\\t- DDoS Attacks\\n\\t\\t\\t- Plant Virus\\n\\t\\t\\t- Fraud & Counterfeiting,\\n\\t\\t\\t- Money Laundering\\n\\t\\t\\t- Cyberterrorism\\n\\t\\t\\t- Ethical Hacking\\n\\t\\t\\t- Vigilante Justice\\n\\t\\t\\t- Train Combat\\n\\t\\t\\t- Train Hacking\\n\\t\\t\\t- Train Charisma\\n\\t\\t\\t- Territory Warfare\\n\\t*/\\n\\tif (task != '') {\\n\\t\\tif (currentTask != task) {\\n\\t\\t\\tns.gang.setMemberTask(name, task);\\n\\t\\t}\\n\\t} else if (hackingLevel < 120) {\\n\\t\\tif (currentTask != 'Cyberterrorism') {\\n\\t\\t\\tns.gang.setMemberTask(name, 'Cyberterrorism');\\n\\t\\t}\\n\\t} else {\\n\\t\\tif (currentTask != 'Money Laundering') {\\n\\t\\t\\tns.gang.setMemberTask(name, 'Money Laundering');\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction recruitIfPossible(ns) {\\n\\tif (!ns.gang.canRecruitMember()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst gangMembers = ns.gang.getMemberNames();\\n\\tconst newGangMemberName = `audrey-${gangMembers.length + 1}`;\\n\\tns.gang.recruitMember(newGangMemberName);\\n\\tassignMember(ns, newGangMemberName);\\n}\\n\\n/** @param {NS} ns */\\nfunction reassignMembersAccordingToWantedLevelPenalty(ns) {\\n\\tconst gangInformation = ns.gang.getGangInformation();\\n\\t/*\\n\\tGang information structure:\\n\\t{\\n\\t\\t\\t\\\"faction\\\":\\\"NiteSec\\\",\\n\\t\\t\\t\\\"isHacking\\\":true,\\n\\t\\t\\t\\\"moneyGainRate\\\":213.18959642323077,\\n\\t\\t\\t\\\"power\\\":1,\\n\\t\\t\\t\\\"respect\\\":846.631799960249,\\n\\t\\t\\t\\\"respectGainRate\\\":0,\\n\\t\\t\\t\\\"territory\\\":0.14285714285714293,\\n\\t\\t\\t\\\"territoryClashChance\\\":0,\\n\\t\\t\\t\\\"territoryWarfareEngaged\\\":false,\\n\\t\\t\\t\\\"wantedLevel\\\":310.2473419438491,\\n\\t\\t\\t\\\"wantedLevelGainRate\\\":-0.025302857142857158,\\n\\t\\t\\t\\\"wantedPenalty\\\":0.7318238952487159\\n\\t}\\n\\t*/\\n\\n\\tconst wantedLevelPenalty = 1.0 - gangInformation['wantedPenalty'];\\n\\tconst gangRespect = gangInformation['respect'];\\n\\tif (wantedLevelPenalty > 0.25 && gangRespect > 50) {\\n\\t\\tns.gang.getMemberNames().map(memberName => {\\n\\t\\t\\tassignMember(ns, memberName, 'Ethical Hacking');\\n\\t\\t});\\n\\t} else {\\n\\t\\tns.gang.getMemberNames().map(memberName => {\\n\\t\\t\\tassignMember(ns, memberName);\\n\\t\\t});\\n\\t}\\n}\\n\\nfunction ascendIfGainIsWorth(ns) {\\n\\tns.gang.getMemberNames().map(memberName => {\\n\\t\\tconst results = ns.gang.getAscensionResult(memberName);\\n\\n\\t\\tif (results === undefined) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst hackingMultWithAscension = results['hack'];\\n\\n\\t\\tif (hackingMultWithAscension > 2.0) {\\n\\t\\t\\tns.gang.ascendMember(memberName);\\n\\t\\t\\tassignMember(ns, memberName);\\n\\t\\t}\\n\\t});\\n}\\n\\nfunction buyEquipment(ns) {\\n\\t/*\\n\\t\\t\\t[\\n\\t\\t\\t\\t\\t\\\"Baseball Bat\\\",\\n\\t\\t\\t\\t\\t\\\"Katana\\\",\\n\\t\\t\\t\\t\\t\\\"Glock 18C\\\",\\n\\t\\t\\t\\t\\t\\\"P90C\\\",\\n\\t\\t\\t\\t\\t\\\"Steyr AUG\\\",\\n\\t\\t\\t\\t\\t\\\"AK-47\\\",\\n\\t\\t\\t\\t\\t\\\"M15A10 Assault Rifle\\\",\\n\\t\\t\\t\\t\\t\\\"AWM Sniper Rifle\\\",\\n\\t\\t\\t\\t\\t\\\"Bulletproof Vest\\\",\\n\\t\\t\\t\\t\\t\\\"Full Body Armor\\\",\\n\\t\\t\\t\\t\\t\\\"Liquid Body Armor\\\",\\n\\t\\t\\t\\t\\t\\\"Graphene Plating Armor\\\",\\n\\t\\t\\t\\t\\t\\\"Ford Flex V20\\\",\\n\\t\\t\\t\\t\\t\\\"ATX1070 Superbike\\\",\\n\\t\\t\\t\\t\\t\\\"Mercedes-Benz S9001\\\",\\n\\t\\t\\t\\t\\t\\\"White Ferrari\\\",\\n\\t\\t\\t\\t\\t\\\"NUKE Rootkit\\\",\\n\\t\\t\\t\\t\\t\\\"Soulstealer Rootkit\\\",\\n\\t\\t\\t\\t\\t\\\"Demon Rootkit\\\",\\n\\t\\t\\t\\t\\t\\\"Hmap Node\\\",\\n\\t\\t\\t\\t\\t\\\"Jack the Ripper\\\",\\n\\t\\t\\t\\t\\t\\\"Bionic Arms\\\",\\n\\t\\t\\t\\t\\t\\\"Bionic Legs\\\",\\n\\t\\t\\t\\t\\t\\\"Bionic Spine\\\",\\n\\t\\t\\t\\t\\t\\\"BrachiBlades\\\",\\n\\t\\t\\t\\t\\t\\\"Nanofiber Weave\\\",\\n\\t\\t\\t\\t\\t\\\"Synthetic Heart\\\",\\n\\t\\t\\t\\t\\t\\\"Synfibril Muscle\\\",\\n\\t\\t\\t\\t\\t\\\"BitWire\\\",\\n\\t\\t\\t\\t\\t\\\"Neuralstimulator\\\",\\n\\t\\t\\t\\t\\t\\\"DataJack\\\",\\n\\t\\t\\t\\t\\t\\\"Graphene Bone Lacings\\\"\\n\\t\\t\\t\\t\\t]\\n\\t*/\\n\\tconst hackingUpgrades = ['NUKE Rootkit', 'Soulstealer Rootkit', 'Demon Rootkit', 'Hmap Node', 'Jack the Ripper'];\\n\\tconst hackingAugmentations = ['BitWire', 'Neuralstimulator', 'DataJack'];\\n\\n\\tns.gang.getMemberNames().map(memberName => {\\n\\t\\tconst memberInfo = ns.gang.getMemberInformation(memberName);\\n\\t\\tconst memberHackingUpgrade = memberInfo['upgrades'];\\n\\t\\tconst memberHackingAugmentations = memberInfo['augmentations'];\\n\\n\\t\\thackingUpgrades.map(upgrade => {\\n\\t\\t\\tif (!memberHackingUpgrade.includes(upgrade) && ns.gang.getEquipmentCost(upgrade) < ns.getServerMoneyAvailable('home')) {\\n\\t\\t\\t\\tns.gang.purchaseEquipment(memberName, upgrade);\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\thackingAugmentations.map(augmentation => {\\n\\t\\t\\tif (!memberHackingAugmentations.includes(augmentation) && ns.gang.getEquipmentCost(augmentation) < ns.getServerMoneyAvailable('home')) {\\n\\t\\t\\t\\tns.gang.purchaseEquipment(memberName, augmentation);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t});\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tlet counter = 0;\\n\\n\\twhile (true) {\\n\\t\\tif (!ns.gang.inGang()) {\\n\\t\\t\\tns.print(`Not in gang. Waiting.`);\\n\\t\\t\\tawait ns.sleep(1000 * 60);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.gang.getMemberNames().map(memberName => displayMembersInformation(ns, memberName));\\n\\n\\t\\trecruitIfPossible(ns);\\n\\t\\tascendIfGainIsWorth(ns);\\n\\t\\treassignMembersAccordingToWantedLevelPenalty(ns);\\n\\t\\tbuyEquipment(ns);\\n\\n\\t\\tif (counter >= 25) {\\n\\t\\t\\tns.gang.getMemberNames().map(memberName => assignMember(ns, memberName));\\n\\t\\t\\tcounter = 0;\\n\\t\\t} else if (counter >= 23) {\\n\\t\\t\\tns.gang.getMemberNames().map(memberName => assignMember(ns, memberName, 'Ethical Hacking'));\\n\\t\\t}\\n\\n\\t\\tcounter++;\\n\\t\\tawait ns.sleep(1000 * 30);\\n\\t}\\n}\\n\",\"filename\":\"manage-gang.js\",\"server\":\"home\"}}],[\"manage-sleeves.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nasync function setSleevesTask(ns) {\\n\\tfor (var i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\tconst sleeve = ns.sleeve.getSleeve(i);\\n\\t\\tns.print(`Sleeve ${i} has:`);\\n\\t\\tns.print(`- sync=${sleeve.sync}`);\\n\\t\\tns.print(`- shock=${sleeve.shock}`);\\n\\t\\tns.print(`--------------------------------------------`);\\n\\n\\t\\tif (sleeve.sync < 100) {\\n\\t\\t\\tns.print('Synchronize');\\n\\t\\t\\tns.sleeve.setToSynchronize(i);\\n\\t\\t} else if (sleeve.shock > 0) {\\n\\t\\t\\tns.print('Shock recovery');\\n\\t\\t\\tns.sleeve.setToShockRecovery(i);\\n\\t\\t} else {\\n\\t\\t\\tns.print('Manual task');\\n\\t\\t\\t// Ref: https://github.com/danielyxie/bitburner/blob/dev/src/Enums.ts\\n\\t\\t\\t// ns.sleeve.setToCommitCrime(i, 'Assassination');\\n\\t\\t\\t// ns.sleeve.setToCommitCrime(i, 'Heist');\\n\\t\\t\\tns.sleeve.setToCommitCrime(i, 'Mug');\\n\\t\\t\\t// ns.sleeve.setToCommitCrime(i, 'Homicide');\\n\\t\\t\\t// ns.sleeve.setToUniversityCourse(i, 'Rothman University', 'Computer Science');\\n\\t\\t\\t// ns.sleeve.setToUniversityCourse(i, 'Rothman University', 'Algorithms');\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\n\\twhile (true) {\\n\\t\\tawait setSleevesTask(ns);\\n\\n\\t\\tawait ns.sleep(1000 * 15);\\n\\t}\\n}\\n\",\"filename\":\"manage-sleeves.js\",\"server\":\"home\"}}],[\"spend-hashes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllNetwork } from \\\"./scan.js\\\";\\n\\n/** @param {NS} ns */\\nasync function spendHashesOnAction(ns, action, target, amount) {\\n\\twhile (ns.hacknet.numHashes() < ns.hacknet.hashCost(action, amount)) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\n\\tif (!ns.hacknet.spendHashes(action, target, amount)) {\\n\\t\\tns.print(`Error while executing ${action} on ${target} with n=${amount}`);\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction selectRandomServer(ns) {\\n\\tconst serversToAvoid = ['CSEC', 'I.I.I.I', 'run4theh111z', 'avmnite-02h', 'The-Cave', 'w0r1d_d43m0n'];\\n\\n\\tconst fullServerList = scanAllNetwork(ns, 'home');\\n\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-') && !serversToAvoid.includes(name));\\n\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\treturn filteredServerList[serverIndex];\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\t/*\\n\\t\\t\\t\\t\\tconst upgrades = ns.hacknet.getHashUpgrades();\\n\\n\\t\\t\\t\\t\\t[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Sell for Money\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Sell for Corporation Funds\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Reduce Minimum Security\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Increase Maximum Money\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Improve Studying\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Improve Gym Training\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Exchange for Corporation Research\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Exchange for Bladeburner Rank\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Exchange for Bladeburner SP\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Generate Coding Contract\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"Company Favor\\\"\\n\\t\\t\\t\\t\\t]\\n\\t*/\\n\\n\\tconst ten_trillions = 10 * 1000 * 1000 * 1000 * 1000;  // k -> m -> g -> t\\n\\tconst low_high_hack_exp_limit = 1500;\\n\\n\\tfor (let i = 0; i < 5; i++) {\\n\\t\\tns.print(`--> Improve studying ${i + 1} of 5`);\\n\\t\\tawait spendHashesOnAction(ns, 'Improve Studying', 'home', 1);\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tconst r = Math.random();\\n\\t\\tif (r < 0.1) {\\n\\t\\t\\tconst target = selectRandomServer(ns);\\n\\t\\t\\tconst minLevel = ns.getServerMinSecurityLevel(target);\\n\\t\\t\\tif (minLevel > 1.0 && ns.getHackingLevel() > low_high_hack_exp_limit) {\\n\\t\\t\\t\\tawait spendHashesOnAction(ns, \\\"Reduce Minimum Security\\\", target, 1);\\n\\t\\t\\t\\tconst minLevelAfter = ns.getServerMinSecurityLevel(target);\\n\\t\\t\\t\\tns.print(`Reduced minimum security level on ${target} from ${minLevel} to ${minLevelAfter}`);\\n\\t\\t\\t}\\n\\t\\t} else if (r < 0.2) {\\n\\t\\t\\tconst target = selectRandomServer(ns);\\n\\t\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\t\\tif (maxMoney < ten_trillions && ns.getHackingLevel() > low_high_hack_exp_limit) {\\n\\t\\t\\t\\tawait spendHashesOnAction(ns, \\\"Increase Maximum Money\\\", target, 1);\\n\\t\\t\\t\\tconst maxMoneyAfter = ns.getServerMaxMoney(target);\\n\\t\\t\\t\\tns.print(`Increased maximum money on ${target} from ${ns.formatNumber(maxMoney)}\\\\$ to ${ns.formatNumber(maxMoneyAfter)}\\\\$`);\\n\\t\\t\\t}\\n\\t\\t\\t/*\\n\\t\\t\\t} else if (r < 0.3) {\\n\\t\\t\\t\\t\\t\\t\\tif (ns.bladeburner.inBladeburner()) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait spendHashesOnAction(ns, 'Exchange for Bladeburner Rank', 'home', 1);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t} else if (r < 0.4) {\\n\\t\\t\\t\\t\\t\\t\\tif (ns.bladeburner.inBladeburner()) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tawait spendHashesOnAction(ns, 'Exchange for Bladeburner SP', 'home', 1);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t*/\\n\\t\\t} else {\\n\\t\\t\\tawait spendHashesOnAction(ns, \\\"Sell for Money\\\", \\\"target\\\", 5);\\n\\t\\t\\tns.print(`Sold hashes for money`);\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(250);\\n\\t}\\n}\\n\",\"filename\":\"spend-hashes.js\",\"server\":\"home\"}}],[\"manage-bladeburner.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction findNextAction(ns) {\\n\\tconst orderOfTypes = ['Operation', 'Contract', 'General'];\\n\\tconst targetedTasks = {\\n\\t\\t'General': ['Training'],\\n\\t\\t'Contract': ['Tracking', 'Bounty Hunter', 'Retirement'],\\n\\t\\t'Operation': ['Investigation', 'Stealth Retirement Operation', 'Assassination']\\n\\t}\\n\\n\\tconst lowStaminaTask = 'Hyperbolic Regeneration Chamber';\\n\\n\\tconst [currentStamina, maxStamina] = ns.bladeburner.getStamina();\\n\\tconst playerRank = ns.bladeburner.getRank();\\n\\n\\tif (currentStamina < 0.80 * maxStamina) {\\n\\t\\treturn {\\n\\t\\t\\t'type': 'General',\\n\\t\\t\\t'name': lowStaminaTask\\n\\t\\t};\\n\\t}\\n\\n\\t// BlackOps have a special structure\\n\\tconst nextBlackOp = ns.bladeburner.getNextBlackOp();\\n\\tif (nextBlackOp != undefined) {\\n\\n\\t\\tconst [lowerBound, _] = ns.bladeburner.getActionEstimatedSuccessChance('BlackOp', nextBlackOp['name']);\\n\\t\\tif (0.9 < lowerBound && nextBlackOp['rank'] <= playerRank) {\\n\\t\\t\\treturn {\\n\\t\\t\\t\\t'type': 'BlackOp',\\n\\t\\t\\t\\t'name': nextBlackOp['name']\\n\\t\\t\\t};\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let actionType of orderOfTypes) {\\n\\t\\tconst actionNames = targetedTasks[actionType].reverse();\\n\\t\\tfor (let actionName of actionNames) {\\n\\t\\t\\tconst [lowerBound, _] = ns.bladeburner.getActionEstimatedSuccessChance(actionType, actionName);\\n\\t\\t\\tconst countRemaining = ns.bladeburner.getActionCountRemaining(actionType, actionName);\\n\\t\\t\\tif (0.8 < lowerBound && 0 < countRemaining) {\\n\\t\\t\\t\\treturn {\\n\\t\\t\\t\\t\\t'type': actionType,\\n\\t\\t\\t\\t\\t'name': actionName\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn {\\n\\t\\t'type': 'General',\\n\\t\\t'name': 'Training'\\n\\t};\\n}\\n\\n/** @param {NS} ns */\\nfunction upgradeBladeburnerSkills(ns) {\\n\\tconst targetedSkills = [\\n\\t\\t\\\"Blade's Intuition\\\",\\n\\t\\t\\\"Cloak\\\",\\n\\t\\t\\\"Short-Circuit\\\",\\n\\t\\t\\\"Digital Observer\\\",\\n\\t\\t\\\"Tracer\\\",\\n\\t\\t\\\"Hyperdrive\\\",\\n\\t\\t\\\"Hands of Midas\\\"\\n\\t];\\n\\n\\tfor (let skill of targetedSkills) {\\n\\t\\tconst skillCost = ns.bladeburner.getSkillUpgradeCost(skill);\\n\\t\\tconst numberSkillPoints = ns.bladeburner.getSkillPoints();\\n\\t\\tif (skillCost < numberSkillPoints) {\\n\\t\\t\\tns.bladeburner.upgradeSkill(skill);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tconst ten_seconds = 10 * 1000;\\n\\n\\twhile (!ns.bladeburner.inBladeburner()) {\\n\\t\\tns.print('Not in BladeBurner');\\n\\t\\tawait ns.sleep(ten_seconds);\\n\\t}\\n\\n\\tns.print('Managing bladeburner');\\n\\n\\twhile (true) {\\n\\t\\tconst currentAction = ns.bladeburner.getCurrentAction();\\n\\n\\t\\tconst newAction = findNextAction(ns);\\n\\t\\tif (currentAction['type'] != newAction['type'] || currentAction['name'] != newAction['name']) {\\n\\t\\t\\tconst result = ns.bladeburner.startAction(newAction['type'], newAction['name']);\\n\\t\\t\\tif (!result) {\\n\\t\\t\\t\\tns.print(`Unable to start action: ${JSON.stringify(newAction)}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tupgradeBladeburnerSkills(ns);\\n\\t\\tawait ns.sleep(ten_seconds);\\n\\t}\\n}\\n\",\"filename\":\"manage-bladeburner.js\",\"server\":\"home\"}}],[\"hacking-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport function buildHackingProgramList(ns) {\\n\\treturn [\\n\\t\\t{ name: 'brute-ssh', functionName: ns.brutessh, executableName: \\\"BruteSSH.exe\\\" },\\n\\t\\t{ name: 'ftp-crack', functionName: ns.ftpcrack, executableName: \\\"FTPCrack.exe\\\" },\\n\\t\\t{ name: 'relay-smtp', functionName: ns.relaysmtp, executableName: \\\"relaySMTP.exe\\\" },\\n\\t\\t{ name: 'http-worm', functionName: ns.httpworm, executableName: \\\"HTTPWorm.exe\\\" },\\n\\t\\t{ name: 'sql-inject', functionName: ns.sqlinject, executableName: \\\"SQLInject.exe\\\" }\\n\\t];\\n}\\n\\n/** @param {NS} ns */\\nexport function listAvailablePrograms(ns, hackingPrograms) {\\n\\tlet availablePrograms = [];\\n\\tfor (const program of hackingPrograms) {\\n\\t\\tif (ns.fileExists(program.executableName, \\\"home\\\")) {\\n\\t\\t\\tavailablePrograms.push(program);\\n\\t\\t}\\n\\t}\\n\\treturn availablePrograms;\\n}\\n\\n/** @param {NS} ns */\\nexport function countAvailablePrograms(ns, hackingPrograms) {\\n\\tconst availablePrograms = listAvailablePrograms(ns, hackingPrograms);\\n\\treturn availablePrograms.length;\\n}\\n\",\"filename\":\"hacking-programs.js\",\"server\":\"home\"}}],[\"buy-darkweb-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const SLEEP_DELAY = 15000;  // in milliseconds\\n    const HOME_SERVER = 'home';\\n    const TOR_ROUTER_PRICE = 200000;\\n\\n    if (!ns.hasTorRouter()) {\\n        ns.print('TOR router not purchased yet');\\n    }\\n\\n    while (!ns.hasTorRouter()) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(HOME_SERVER);\\n\\n        if (TOR_ROUTER_PRICE <= moneyAvailable) {\\n            if (ns.singularity.purchaseTor()) {\\n                ns.print('TOR router purchased');\\n            }\\n        }\\n\\n        await ns.sleep(SLEEP_DELAY);\\n    }\\n\\n    while (true) {\\n        const allHackingPrograms = ns.singularity.getDarkwebPrograms();\\n        const purchasedHackingPrograms = allHackingPrograms.filter((program) => ns.fileExists(program));\\n        const hackingProgramsToPurchase = allHackingPrograms.filter((program) => !ns.fileExists(program));\\n\\n        if (purchasedHackingPrograms.length == allHackingPrograms.length) {\\n            break;\\n        }\\n\\n        for (const program of hackingProgramsToPurchase) {\\n            const programCost = ns.singularity.getDarkwebProgramCost(program);\\n            const moneyAvailable = ns.getServerMoneyAvailable(HOME_SERVER);\\n\\n            if (programCost <= moneyAvailable) {\\n                if (ns.singularity.purchaseProgram(program)) {\\n                    ns.print(`Purchased ${program}`);\\n                }\\n            }\\n        }\\n\\n        await ns.sleep(SLEEP_DELAY);\\n    }\\n}\\n\",\"filename\":\"buy-darkweb-programs.js\",\"server\":\"home\"}}],[\"manage-corporation.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // Ref: https://github.com/danielyxie/bitburner/blob/dev/markdown/bitburner.corporation.md\\n    if (ns.corporation.hasCorporation()) {\\n        ns.tprint('Player has corporation');\\n    } else {\\n        ns.tprint('Player does not have corporation');\\n    }\\n\\n    const corporation = ns.corporation.getCorporation();\\n    ns.tprint(`Corporation data:\\\\n${corporation}`);\\n}\\n\",\"filename\":\"manage-corporation.js\",\"server\":\"home\"}}],[\"buy-hacknet-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tconst hacknetConstants = ns.formulas.hacknetServers.constants();\\n\\t/*\\n\\t\\t\\tns.formulas.hacknetServers.constants()\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\\"HashesPerLevel\\\":0.001,\\n\\t\\t\\t\\t\\t\\\"BaseCost\\\":50000,\\n\\t\\t\\t\\t\\t\\\"RamBaseCost\\\":200000,\\n\\t\\t\\t\\t\\t\\\"CoreBaseCost\\\":1000000,\\n\\t\\t\\t\\t\\t\\\"CacheBaseCost\\\":10000000,\\n\\t\\t\\t\\t\\t\\\"PurchaseMult\\\":3.2,\\n\\t\\t\\t\\t\\t\\\"UpgradeLevelMult\\\":1.1,\\n\\t\\t\\t\\t\\t\\\"UpgradeRamMult\\\":1.4,\\n\\t\\t\\t\\t\\t\\\"UpgradeCoreMult\\\":1.55,\\n\\t\\t\\t\\t\\t\\\"UpgradeCacheMult\\\":1.85,\\n\\t\\t\\t\\t\\t\\\"MaxServers\\\":20,\\n\\t\\t\\t\\t\\t\\\"MaxLevel\\\":300,\\n\\t\\t\\t\\t\\t\\\"MaxRam\\\":8192,\\n\\t\\t\\t\\t\\t\\\"MaxCores\\\":128,\\n\\t\\t\\t\\t\\t\\\"MaxCache\\\":15\\n\\t\\t\\t}\\n\\t*/\\n\\n\\t/*\\n\\tconst targetCount = hacknetConstants['MaxServers'];\\n\\tconst targetLevel = hacknetConstants['MaxLevel'];\\n\\tconst targetRam = hacknetConstants['MaxRam'];\\n\\tconst targetCore = hacknetConstants['MaxCores'];\\n\\tconst targetCache = hacknetConstants['MaxCache'];\\n\\t*/\\n\\n\\tconst targetCount = 12;\\n\\tconst targetLevel = 100;\\n\\tconst targetRam = hacknetConstants['MaxRam'];\\n\\tconst targetCore = 21;\\n\\tconst targetCache = hacknetConstants['MaxCache'];\\n\\n\\twhile (true) {\\n\\t\\tif (ns.hacknet.numNodes() < targetCount) {\\n\\t\\t\\tconst cost = ns.hacknet.getPurchaseNodeCost();\\n\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n\\t\\t\\t\\tns.hacknet.purchaseNode();\\n\\t\\t\\t\\tns.print('Bought net node');\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\tif (ns.hacknet.getNodeStats(i).level < targetLevel) {\\n\\t\\t\\t\\tconst cost = ns.hacknet.getLevelUpgradeCost(i, 1);\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeLevel(i, 1);\\n\\t\\t\\t\\t\\tconst newLevel = ns.hacknet.getNodeStats(i).level;\\n\\t\\t\\t\\t\\tns.print(`Upgrading node ${i} to level ${newLevel}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\tif (ns.hacknet.getNodeStats(i).ram < targetRam) {\\n\\t\\t\\t\\tconst cost = ns.hacknet.getRamUpgradeCost(i, 1);\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeRam(i, 1);\\n\\t\\t\\t\\t\\tconst newLevel = ns.hacknet.getNodeStats(i).ram;\\n\\t\\t\\t\\t\\tns.print(`Upgrading node ${i} to ram ${newLevel}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\tif (ns.hacknet.getNodeStats(i).cores < targetCore) {\\n\\t\\t\\t\\tconst cost = ns.hacknet.getCoreUpgradeCost(i, 1);\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeCore(i, 1);\\n\\t\\t\\t\\t\\tconst newLevel = ns.hacknet.getNodeStats(i).cores;\\n\\t\\t\\t\\t\\tns.print(`Upgrading node ${i} to cores ${newLevel}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\tif (ns.hacknet.getNodeStats(i).cache < targetCache) {\\n\\t\\t\\t\\tconst cost = ns.hacknet.getCacheUpgradeCost(i, 1);\\n\\t\\t\\t\\tif (ns.getServerMoneyAvailable(\\\"home\\\") >= cost) {\\n\\t\\t\\t\\t\\tns.hacknet.upgradeCache(i, 1);\\n\\t\\t\\t\\t\\tconst newLevel = ns.hacknet.getNodeStats(i).cache;\\n\\t\\t\\t\\t\\tns.print(`Upgrading node ${i} to cache ${newLevel}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tlet countCompletelyUpgraded = 0;\\n\\t\\tif (ns.hacknet.numNodes() == targetCount) {\\n\\t\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\t\\tconst nodeStats = ns.hacknet.getNodeStats(i);\\n\\t\\t\\t\\tconst allLevelUpgraded = nodeStats.level == targetLevel;\\n\\t\\t\\t\\tconst allRamUpgraded = nodeStats.ram == targetRam;\\n\\t\\t\\t\\tconst allCoreUpgraded = nodeStats.cores == targetCore;\\n\\t\\t\\t\\tconst allCacheUpgraded = nodeStats.cache == targetCache;\\n\\n\\n\\t\\t\\t\\tif (allLevelUpgraded && allRamUpgraded && allCoreUpgraded && allCacheUpgraded) {\\n\\t\\t\\t\\t\\tcountCompletelyUpgraded++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (countCompletelyUpgraded == targetCount) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(500);\\n\\t}\\n}\",\"filename\":\"buy-hacknet-servers.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"hacknet-server-0\",\"neighbor-0\",\"hacknet-server-1\",\"hacknet-server-2\",\"darkweb\",\"neighbor-1\",\"neighbor-2\",\"hacknet-server-3\",\"neighbor-3\",\"neighbor-4\",\"hacknet-server-4\",\"neighbor-5\",\"neighbor-6\",\"hacknet-server-5\",\"neighbor-7\",\"neighbor-8\",\"neighbor-9\",\"neighbor-10\",\"neighbor-11\",\"neighbor-12\",\"neighbor-13\",\"neighbor-14\",\"neighbor-15\",\"neighbor-16\",\"neighbor-17\",\"neighbor-18\",\"neighbor-19\",\"hacknet-server-6\",\"hacknet-server-7\",\"hacknet-server-8\",\"hacknet-server-9\",\"hacknet-server-10\",\"hacknet-server-11\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.032,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"launch-hacking.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12072.410000008858,\"ramUsage\":11.2,\"server\":\"home\",\"scriptKey\":\"launch-hacking.js*[]\",\"title\":\"launch-hacking.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"spend-hashes.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12072.210000008858,\"ramUsage\":6.05,\"server\":\"home\",\"scriptKey\":\"spend-hashes.js*[]\",\"title\":\"spend-hashes.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-sleeves.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12071.410000008855,\"ramUsage\":21.6,\"server\":\"home\",\"scriptKey\":\"manage-sleeves.js*[]\",\"title\":\"manage-sleeves.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-gang.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12071.210000008854,\"ramUsage\":24.7,\"server\":\"home\",\"scriptKey\":\"manage-gang.js*[]\",\"title\":\"manage-gang.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"hong-fang-tea\":[0,0,22,22],\"omega-net\":[0,0,22,22],\"avmnite-02h\":[0,0,44,0],\"crush-fitness\":[0,0,0,44],\"max-hardware\":[0,0,55,22],\"iron-gym\":[0,0,11,11],\"rothman-uni\":[0,0,22,11],\"I.I.I.I\":[0,0,33,0],\"computek\":[3315758217.590657,22,33,55],\"netlink\":[0,0,22,55],\"harakiri-sushi\":[0,0,66,11],\"foodnstuff\":[0,0,0,66],\"the-hub\":[1454691435.17415,11,33,11],\"phantasy\":[0,0,11,33],\"syscore\":[0,11,11,44],\"summit-uni\":[0,0,22,11],\"catalyst\":[0,0,11,55],\"neo-net\":[0,0,11,44],\"run4theh111z\":[0,0,66,0],\"n00dles\":[2148887.255014131,33,0,0],\".\":[0,0,44,0],\"applied-energetics\":[9299756780.778343,22,11,33],\"global-pharm\":[0,0,33,33],\"snap-fitness\":[3103911010.2608857,11,33,44],\"silver-helix\":[0,0,0,33],\"univ-energy\":[0,0,22,22],\"aevum-police\":[0,0,55,22],\"zb-def\":[0,0,33,22],\"nectar-net\":[0,0,33,22],\"zer0\":[0,0,66,33],\"lexo-corp\":[0,0,33,11],\"CSEC\":[0,0,55,0],\"millenium-fitness\":[0,0,55,22],\"zb-institute\":[5241796658.841715,11,55,11],\"icarus\":[4863812464.449137,11,0,11],\"joesguns\":[0,0,33,11],\"darkweb\":[0,0,66,0],\"alpha-ent\":[0,0,55,11],\"clarkinc\":[0,0,22,11],\"nova-med\":[7803995552.37416,11,11,11],\"vitalife\":[0,0,22,11],\"powerhouse-fitness\":[0,0,44,33],\"helios\":[0,0,55,0],\"4sigma\":[156971871571.92902,11,22,11],\"titan-labs\":[0,0,55,11],\"aerocorp\":[12690774730.37076,22,33,11],\"fulcrumtech\":[0,0,11,22],\"deltaone\":[16234418427.753616,22,11,11],\"sigma-cosmetics\":[0,0,33,0],\"omnia\":[0,0,55,33],\"omnitek\":[0,0,22,22],\"kuai-gong\":[125103811948.99986,11,0,11],\"galactic-cyber\":[9676709108.408403,22,11,0],\"johnson-ortho\":[0,0,0,22],\"fulcrumassets\":[0,0,11,11],\"infocomm\":[0,0,11,11],\"stormtech\":[12167161197.811758,22,0,11],\"nwo\":[0,0,11,11],\"microdyne\":[3359626383.541232,11,11,0],\"taiyang-digital\":[4568293480.560795,11,0,22],\"b-and-a\":[159581582670.6746,11,22,11],\"defcomm\":[0,11,0,0],\"ecorp\":[0,0,11,0],\"blade\":[0,0,0,22],\"megacorp\":[0,0,11,11],\"zeus-med\":[8924172188.166325,11,0,0],\"rho-construction\":[0,0,33,0],\"solaris\":[0,0,11,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1142514.588932913,\"onlineMoneyMade\":544364292714.9405,\"onlineRunningTime\":12068.610000008845,\"ramUsage\":3.1,\"server\":\"home\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":11,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"64.0.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"ecorp\"}}]]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":48.019999999999996,\"minDifficulty\":48.019999999999996,\"moneyAvailable\":1032773671379.7648,\"moneyMax\":1032773671379.7648,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1224,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"53.6.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"megacorp\"}}]]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":48.019999999999996,\"minDifficulty\":48.019999999999996,\"moneyAvailable\":755461046256.095,\"moneyMax\":755461046256.095,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1288,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"51.6.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"b-and-a\"}}]]},\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":37.24,\"minDifficulty\":37.24,\"moneyAvailable\":448535171815.6114,\"moneyMax\":448535171815.6114,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":977,\"serverGrowth\":75,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"61.6.1.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"blade\"}}]]},\"serversOnNetwork\":[\"omnitek\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":48.308,\"minDifficulty\":45,\"moneyAvailable\":162641380644.04193,\"moneyMax\":547891664178.7046,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1017,\"serverGrowth\":67,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"blade\":[10030005508748.03,1326,2262,104]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1833304.8577166693,\"onlineMoneyMade\":10030005508748.03,\"onlineRunningTime\":8655.809999996429,\"ramUsage\":2.45,\"server\":\"blade\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"93.0.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"nwo\"}}]]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":63.754000000000005,\"minDifficulty\":49,\"moneyAvailable\":533045576571.1272,\"moneyMax\":533045576571.1272,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1116,\"serverGrowth\":90,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-176828.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"3340073\",82],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"63.9.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"clarkinc\"}}]]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":94.5,\"hackDifficulty\":44.635999999999996,\"minDifficulty\":32,\"moneyAvailable\":388715510793.46594,\"moneyMax\":388715510793.46594,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":968,\"serverGrowth\":68,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"20.4.0.4\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"omnitek\"}}]]},\"serversOnNetwork\":[\"helios\",\"blade\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":44.236024,\"minDifficulty\":44.236024,\"moneyAvailable\":8064.430770336741,\"moneyMax\":214972474873.864,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":996,\"serverGrowth\":95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"omnitek\":[3406766905273.0703,3536,20800,208]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12252317.066793164,\"onlineMoneyMade\":3406766905273.0703,\"onlineRunningTime\":8751.609999996777,\"ramUsage\":2.45,\"server\":\"omnitek\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":208,\"temporary\":false}}]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"48.8.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"4sigma\"}}]]},\"serversOnNetwork\":[\"helios\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":87,\"hackDifficulty\":27.348567999999997,\"minDifficulty\":27.294567999999998,\"moneyAvailable\":0,\"moneyMax\":378648171231.2648,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1022,\"serverGrowth\":90,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-387542-Daedalus.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[46,157,64,97,1,161,115,108,86,80,32,121,181,107,78,66,33,84,118,49,86,1,131,42,109,166,79,94,15,173,139,156,196,62,61,166,6,156,110,88],\"reward\":{\"type\":0,\"name\":\"Daedalus\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"69.3.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"kuai-gong\"}}]]},\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":58.118039839999994,\"minDifficulty\":44.292119043199996,\"moneyAvailable\":397403470757.2593,\"moneyMax\":397403470757.2593,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":966,\"serverGrowth\":94,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"61.3.4.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"fulcrumtech\"}}]]},\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":45.177215999999994,\"minDifficulty\":45.177215999999994,\"moneyAvailable\":26536150191.07862,\"moneyMax\":26536150191.07862,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1119,\"serverGrowth\":89,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"fulcrumtech\":[454772473231.11005,936,4316,52]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2647746.484773097,\"onlineMoneyMade\":454772473231.11005,\"onlineRunningTime\":8315.40999999519,\"ramUsage\":2.45,\"server\":\"fulcrumtech\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"99.2.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"fulcrumassets\"}}]]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":15543037.19847111,\"moneyMax\":15543037.19847111,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1378,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"17.5.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"stormtech\"}}]]},\"serversOnNetwork\":[\"run4theh111z\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":54.45883199999999,\"minDifficulty\":43.29483199999999,\"moneyAvailable\":18722134900.69624,\"moneyMax\":18722134900.69624,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":940,\"serverGrowth\":88,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-310969-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[130,140,32,195,37,71,195,77,85,80,117,191,120,89,39],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"71.4.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"defcomm\"}}]]},\"serversOnNetwork\":[\"omnia\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":46.06,\"minDifficulty\":46.06,\"moneyAvailable\":13203433418.859713,\"moneyMax\":13203433418.859713,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1028,\"serverGrowth\":53,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"12.2.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"infocomm\"}}]]},\"serversOnNetwork\":[\"icarus\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":39.262,\"minDifficulty\":39.2,\"moneyAvailable\":0,\"moneyMax\":11856928070.536917,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":883,\"serverGrowth\":44,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"2.6.7.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"helios\"}}]]},\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":57.66,\"minDifficulty\":45.08,\"moneyAvailable\":0,\"moneyMax\":9037536130.95112,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":832,\"serverGrowth\":80,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"helios\":[182644805796.68542,1248,5720,52]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3484901.6233410663,\"onlineMoneyMade\":182644805796.68542,\"onlineRunningTime\":8782.80999999689,\"ramUsage\":2.45,\"server\":\"helios\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"99.4.0.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"vitalife\"}}]]},\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":42.790872000000014,\"minDifficulty\":38.588871999999995,\"moneyAvailable\":6927092618.575614,\"moneyMax\":11569946580.801708,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":789,\"serverGrowth\":76,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"vitalife\":[227396525399.5258,910,1703,91]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1344964.3602186856,\"onlineMoneyMade\":227396525399.5258,\"onlineRunningTime\":8372.8099999954,\"ramUsage\":2.45,\"server\":\"vitalife\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"77.8.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"icarus\"}}]]},\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":55.794,\"minDifficulty\":45,\"moneyAvailable\":16278762324.13174,\"moneyMax\":16278762324.13174,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":912,\"serverGrowth\":94,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"50.7.3.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":39.3764,\"minDifficulty\":39.3764,\"moneyAvailable\":6139335639.401226,\"moneyMax\":19028141840.789165,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":893,\"serverGrowth\":89,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"univ-energy\":[458510928578.7769,1456,3562,52]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2491996.69155115,\"onlineMoneyMade\":458510928578.7769,\"onlineRunningTime\":11056.410000005173,\"ramUsage\":2.45,\"server\":\"univ-energy\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"13.0.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"titan-labs\"}}]]},\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":33.994,\"minDifficulty\":33.614,\"moneyAvailable\":8060129992.083866,\"moneyMax\":13003321670.97212,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":822,\"serverGrowth\":70,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"titan-labs\":[182032852736.56854,594,636,168]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":688893.3161739992,\"onlineMoneyMade\":182032852736.56854,\"onlineRunningTime\":8399.209999995495,\"ramUsage\":2.45,\"server\":\"titan-labs\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"45.9.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"microdyne\"}}]]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":35.786,\"minDifficulty\":34.3,\"moneyAvailable\":7635621190.032732,\"moneyMax\":11155999251.907078,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":867,\"serverGrowth\":87,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"microdyne\":[107999704980.04807,426,774,24]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":608772.0283146315,\"onlineMoneyMade\":107999704980.04807,\"onlineRunningTime\":8346.609999995304,\"ramUsage\":2.45,\"server\":\"microdyne\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"22.9.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"taiyang-digital\"}}]]},\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":49.086,\"minDifficulty\":38.416000000000004,\"moneyAvailable\":12952887964.263035,\"moneyMax\":12952887964.263035,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":896,\"serverGrowth\":80,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-980516.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"ggg77hhqqqqqqAA777v2O33ddS22IIIIIIIIMM6668LwwwwwwUUUUUUUl0OOeeZZZZZZZZZZZZZZzzz\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"39.5.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"galactic-cyber\"}}]]},\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":94.5,\"hackDifficulty\":30.172143999999996,\"minDifficulty\":30.118143999999997,\"moneyAvailable\":0,\"moneyMax\":12175002050.523962,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":867,\"serverGrowth\":75,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"73.5.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"aerocorp\"}}]]},\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":55.49679999999999,\"minDifficulty\":40.3368,\"moneyAvailable\":18259139626.223602,\"moneyMax\":18259139626.223602,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":876,\"serverGrowth\":59,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"75.6.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":41.672448,\"minDifficulty\":41.412448,\"moneyAvailable\":4471713887.169326,\"moneyMax\":14359510965.090801,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":863,\"serverGrowth\":65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"omnia\":[198300810302.34827,819,1235,208]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1109717.2767063729,\"onlineMoneyMade\":198300810302.34827,\"onlineRunningTime\":8477.209999995779,\"ramUsage\":2.45,\"server\":\"omnia\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"95.5.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"zb-def\"}}]]},\"serversOnNetwork\":[\"defcomm\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":87,\"hackDifficulty\":26.74867664,\"minDifficulty\":26.74867664,\"moneyAvailable\":18369874666.409534,\"moneyMax\":18369874666.409534,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":786,\"serverGrowth\":70,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"95.4.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"applied-energetics\"}}]]},\"serversOnNetwork\":[\"infocomm\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":49.837999999999994,\"minDifficulty\":38,\"moneyAvailable\":13454900140.550623,\"moneyMax\":13454900140.550623,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":848,\"serverGrowth\":71,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-690798-NiteSec.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"LL7333GGGGGGGGRRrrrrrrrrrruaa77HHllhssssppvvBBBBMM77777777777778888888rH0xxIIjHHHHHHHHHH\",\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"41.7.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":39.320000000000014,\"minDifficulty\":36.26,\"moneyAvailable\":8951654675.520767,\"moneyMax\":13871549511.63577,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":779,\"serverGrowth\":72,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"solaris\":[208025536657.65353,618,828,60]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":742806.7061354428,\"onlineMoneyMade\":208025536657.65353,\"onlineRunningTime\":8859.809999997171,\"ramUsage\":2.45,\"server\":\"solaris\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"72.1.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"deltaone\"}}]]},\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":46.65999008000001,\"minDifficulty\":35.04999008000001,\"moneyAvailable\":22169243763.59963,\"moneyMax\":22169243763.59963,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":844,\"serverGrowth\":69,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"47.3.1.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"rho-construction\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":41.312,\"minDifficulty\":40.18,\"moneyAvailable\":2428245674.7747626,\"moneyMax\":25895143448.455383,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":845,\"serverGrowth\":81,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"global-pharm\":[572305860523.3407,1222,3640,234]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2524444.565139055,\"onlineMoneyMade\":572305860523.3407,\"onlineRunningTime\":11141.610000005483,\"ramUsage\":2.45,\"server\":\"global-pharm\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"54.9.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"nova-med\"}}]]},\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":93,\"hackDifficulty\":29.772399999999998,\"minDifficulty\":29.772399999999998,\"moneyAvailable\":18792146218.238617,\"moneyMax\":18792146218.238617,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":787,\"serverGrowth\":76,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"97.6.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"zeus-med\"}}]]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":32.997719999999994,\"minDifficulty\":32.94172,\"moneyAvailable\":0,\"moneyMax\":22738434052.63869,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":803,\"serverGrowth\":79,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"99.9.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":36.4228,\"minDifficulty\":35.5348,\"moneyAvailable\":6.219406646595715,\"moneyMax\":17012745078.446697,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":800,\"serverGrowth\":78,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"unitalife\":[245979027550.63644,708,834,108]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":812444.8348356407,\"onlineMoneyMade\":245979027550.63644,\"onlineRunningTime\":11115.610000005388,\"ramUsage\":2.45,\"server\":\"unitalife\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"40.3.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":97.5,\"hackDifficulty\":35.036356141976526,\"minDifficulty\":33,\"moneyAvailable\":19.10688466235855,\"moneyMax\":12675040539.288385,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":683,\"serverGrowth\":62,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"lexo-corp\":[130510743954.82867,426,1188,126]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":842277.5913389189,\"onlineMoneyMade\":130510743954.82867,\"onlineRunningTime\":11235.610000005821,\"ramUsage\":2.45,\"server\":\"lexo-corp\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"88.3.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":78,\"hackDifficulty\":24.994400000000002,\"minDifficulty\":24.9704,\"moneyAvailable\":4813762950.678651,\"moneyMax\":8605234855.289762,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":506,\"serverGrowth\":50,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"rho-construction\":[181302224027.88412,786,2172,258]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1278945.4174186874,\"onlineMoneyMade\":181302224027.88412,\"onlineRunningTime\":11870.010000008122,\"ramUsage\":2.45,\"server\":\"rho-construction\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"38.5.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":75,\"hackDifficulty\":25.70000000000001,\"minDifficulty\":24.5,\"moneyAvailable\":4811525443.292929,\"moneyMax\":10118562821.06168,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":533,\"serverGrowth\":59,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"alpha-ent\":[243978753412.99448,864,2106,198]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1220300.9913432032,\"onlineMoneyMade\":243978753412.99448,\"onlineRunningTime\":11167.210000005574,\"ramUsage\":2.45,\"server\":\"alpha-ent\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-693892-NiteSec.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"5QQQQQQQQQ65555555555555511uSSSSSS3KK60jcyyyyWWQQfftccnnnnnnnnnnnnnqqR0G\",\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"33.1.0.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"syscore\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":35.396103999999994,\"minDifficulty\":34.824104,\"moneyAvailable\":52296852.723516285,\"moneyMax\":5115791768.180346,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":443,\"serverGrowth\":50,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[175377127613.44653,1612,8736,208]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5269534.670675873,\"onlineMoneyMade\":175377127613.44653,\"onlineRunningTime\":11202.2100000057,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"65.5.9.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"computek\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":81,\"hackDifficulty\":34.63847097395076,\"minDifficulty\":25.9308,\"moneyAvailable\":749.4354162552638,\"moneyMax\":3534913581.0893645,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":382,\"serverGrowth\":39,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"rothman-uni\":[84457672290.6881,1508,25896,676]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11596280.058979426,\"onlineMoneyMade\":84457672290.6881,\"onlineRunningTime\":11905.01000000825,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"12.8.6.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"crush-fitness\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":35.59091199999998,\"minDifficulty\":33.882912,\"moneyAvailable\":292699999.1715038,\"moneyMax\":13877195757.73465,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":726,\"serverGrowth\":84,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"zb-institute\":[375900189538.93024,1430,4004,676]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3030631.393110376,\"onlineMoneyMade\":375900189538.93024,\"onlineRunningTime\":8953.20999999751,\"ramUsage\":2.45,\"server\":\"zb-institute\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"60.1.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":73.5,\"hackDifficulty\":26.684000000000033,\"minDifficulty\":24.5,\"moneyAvailable\":3048058397.9963994,\"moneyMax\":4054873221.8977714,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":446,\"serverGrowth\":57,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[120023014344.18758,1026,2628,210]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1460800.999845428,\"onlineMoneyMade\":120023014344.18758,\"onlineRunningTime\":11839.21000000801,\"ramUsage\":2.45,\"server\":\"summit-uni\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-668572.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,13],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"24.2.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"syscore\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":38.28,\"minDifficulty\":38.22,\"moneyAvailable\":0,\"moneyMax\":6873195311.596316,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":555,\"serverGrowth\":65,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-156020.cct\",\"type\":\"Array Jumping Game\",\"data\":[5,3,6,2,0,0,3,8,1,9,8,1,0,6,0,2,0],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"76.3.2.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"computek\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":90,\"hackDifficulty\":48.18799999999999,\"minDifficulty\":29.4,\"moneyAvailable\":57.988148615642146,\"moneyMax\":8267948813.258834,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":441,\"serverGrowth\":36,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[217816038822.46182,1508,18928,416]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9468879.474288715,\"onlineMoneyMade\":217816038822.46182,\"onlineRunningTime\":11888.010000008187,\"ramUsage\":2.45,\"server\":\"catalyst\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"81.6.3.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":52.5,\"hackDifficulty\":18.195200000000032,\"minDifficulty\":17.2872,\"moneyAvailable\":1218.7476117011963,\"moneyMax\":2818606856.4621534,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":313,\"serverGrowth\":55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"the-hub\":[121768446840.00894,1404,5544,270]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2044726.5795036282,\"onlineMoneyMade\":121768446840.00894,\"onlineRunningTime\":11853.01000000806,\"ramUsage\":2.45,\"server\":\"the-hub\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"20.2.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":88.5,\"hackDifficulty\":30.05,\"minDifficulty\":30,\"moneyAvailable\":0,\"moneyMax\":3919078337.336262,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":304,\"serverGrowth\":56,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"70.6.5.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":38.098076717438474,\"minDifficulty\":36.70648799999999,\"moneyAvailable\":66.97093941706905,\"moneyMax\":4447018372.854569,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":418,\"serverGrowth\":66,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[114068968197.6764,1560,15080,2340]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9526695.685409067,\"onlineMoneyMade\":114068968197.6764,\"onlineRunningTime\":11971.610000008492,\"ramUsage\":2.45,\"server\":\"netlink\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":52,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"56.4.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":76.5,\"hackDifficulty\":24.9704,\"minDifficulty\":24.9704,\"moneyAvailable\":1238427063.3808649,\"moneyMax\":1238427063.3808649,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":268,\"serverGrowth\":49,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"5.7.0.0\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1.5,\"hackDifficulty\":1.0450101956612567,\"minDifficulty\":1,\"moneyAvailable\":1109772.8559708374,\"moneyMax\":1109772.8559708374,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[1419010519.0065088,21816,22703,3488]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2504609.9515033644,\"onlineMoneyMade\":1419010519.0065088,\"onlineRunningTime\":12069.610000008848,\"ramUsage\":2.45,\"server\":\"n00dles\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":1,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-404477.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[56,100,190,188,43,173,127,70,46,195,189,63,80,155,18,179,197,111,72],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"97.6.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5.682794176973168,\"minDifficulty\":4.9,\"moneyAvailable\":20393098.494510595,\"moneyMax\":32988790.838630263,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[4980017053.724193,3978,178416,14958]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22390394.22490897,\"onlineMoneyMade\":4980017053.724193,\"onlineRunningTime\":12066.810000008838,\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"96.4.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5.655341584409418,\"minDifficulty\":5,\"moneyAvailable\":22630342.754652012,\"moneyMax\":35748985.55648355,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"sigma-cosmetics\":[11836272710.080036,7290,155208,14856]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20121539.064029347,\"onlineMoneyMade\":11836272710.080036,\"onlineRunningTime\":12064.010000008828,\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"31.9.2.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":15.53730619188136,\"minDifficulty\":7.529535999999999,\"moneyAvailable\":3248533.9758635317,\"moneyMax\":39634744.856101334,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"joesguns\":[17978721614.39212,9726,121686,11454]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21070690.4208146,\"onlineMoneyMade\":17978721614.39212,\"onlineRunningTime\":12061.210000008818,\"ramUsage\":2.45,\"server\":\"joesguns\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"90.2.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":13.044461788620538,\"minDifficulty\":12.4852,\"moneyAvailable\":45277537.09912614,\"moneyMax\":118904234.568304,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"zer0\":[20982449612.175297,6045,58279,5278]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15001500.029113015,\"onlineMoneyMade\":20982449612.175297,\"onlineRunningTime\":12028.210000008698,\"ramUsage\":2.45,\"server\":\"zer0\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"54.3.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10.231013467090346,\"minDifficulty\":9.8,\"moneyAvailable\":34938396.223964155,\"moneyMax\":43598219.34171146,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"nectar-net\":[13341565807.067122,7044,82572,6606]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17465215.44901994,\"onlineMoneyMade\":13341565807.067122,\"onlineRunningTime\":11838.210000008006,\"ramUsage\":2.45,\"server\":\"nectar-net\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"97.7.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":14.20347943587191,\"minDifficulty\":13,\"moneyAvailable\":46826816.8480571,\"moneyMax\":79269489.71220267,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"neo-net\":[9658343573.774504,4849,79508,5330]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19333180.53534673,\"onlineMoneyMade\":9658343573.774504,\"onlineRunningTime\":11864.810000008103,\"ramUsage\":2.45,\"server\":\"neo-net\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"87.7.3.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":18.131999999999973,\"minDifficulty\":14.7,\"moneyAvailable\":462785.29699201137,\"moneyMax\":713425407.4098239,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"silver-helix\":[10927756451.344488,832,56732,104]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14393876.7235952,\"onlineMoneyMade\":10927756451.344488,\"onlineRunningTime\":12019.610000008666,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"86.8.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8.24895578205726,\"minDifficulty\":7.84,\"moneyAvailable\":35398473.64506681,\"moneyMax\":49483186.257945396,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"hong-fang-tea\":[15409906471.25149,7134,75072,7350]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13207980.689128442,\"onlineMoneyMade\":15409906471.25149,\"onlineRunningTime\":12056.4100000088,\"ramUsage\":2.45,\"server\":\"hong-fang-tea\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"2.3.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8.270246224298297,\"minDifficulty\":7.84,\"moneyAvailable\":49343585.61698476,\"moneyMax\":63415591.76976213,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"harakiri-sushi\":[32698625180.2921,10788,62574,6216]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11734331.012065366,\"onlineMoneyMade\":32698625180.2921,\"onlineRunningTime\":12052.010000008784,\"ramUsage\":2.45,\"server\":\"harakiri-sushi\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"13.2.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10.2407943587192,\"minDifficulty\":9.604000000000001,\"moneyAvailable\":169000903.4619048,\"moneyMax\":388103421.63094425,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"phantasy\":[76311566953.36398,6318,57395,5161]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12502460.674087968,\"onlineMoneyMade\":76311566953.36398,\"onlineRunningTime\":11861.01000000809,\"ramUsage\":2.45,\"server\":\"phantasy\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"40.5.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":8.394273794591117,\"minDifficulty\":8,\"moneyAvailable\":67272969.65761307,\"moneyMax\":158538979.42440534,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"max-hardware\":[45637160989.56006,8008,79950,7345]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14056271.347944874,\"onlineMoneyMade\":45637160989.56006,\"onlineRunningTime\":11868.210000008115,\"ramUsage\":2.45,\"server\":\"max-hardware\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"1.4.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"zer0\",\"computek\",\"netlink\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":40.5,\"hackDifficulty\":13.228687999999998,\"minDifficulty\":13.176687999999999,\"moneyAvailable\":549963502.526035,\"moneyMax\":1053527149.9091504,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":209,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"omega-net\":[62535571680.13526,3068,22542,1716]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6262498.5985993445,\"onlineMoneyMade\":62535571680.13526,\"onlineRunningTime\":12011.410000008636,\"ramUsage\":2.45,\"server\":\"omega-net\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"0.1.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":66,\"hackDifficulty\":20.706224,\"minDifficulty\":20.706224,\"moneyAvailable\":734100532.7905934,\"moneyMax\":734100532.7905934,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":263,\"serverGrowth\":33,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"34.1.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":17.871999999999975,\"minDifficulty\":14.7,\"moneyAvailable\":79864188.60870683,\"moneyMax\":317077958.8488107,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[14222378102.265793,2457,41925,1443]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11437875.43973696,\"onlineMoneyMade\":14222378102.265793,\"onlineRunningTime\":12036.210000008727,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":13,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"57.5.0.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":82.5,\"hackDifficulty\":45.835185095231516,\"minDifficulty\":25.826308479999998,\"moneyAvailable\":207684322.31994712,\"moneyMax\":3963474485.610133,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":479,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"millenium-fitness\":[105715713588.97015,1300,10374,156]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4965999.562294422,\"onlineMoneyMade\":105715713588.97015,\"onlineRunningTime\":11919.410000008302,\"ramUsage\":2.45,\"server\":\"millenium-fitness\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"18.7.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"powerhouse-fitness\"}}]]},\"serversOnNetwork\":[\"omnitek\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":93,\"hackDifficulty\":30.084399999999995,\"minDifficulty\":29.772399999999998,\"moneyAvailable\":421142731.63411814,\"moneyMax\":14553878311.16041,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1088,\"serverGrowth\":56,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"powerhouse-fitness\":[212073176069.19977,754,3536,52]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2029584.9948566065,\"onlineMoneyMade\":212073176069.19977,\"onlineRunningTime\":8593.209999996201,\"ramUsage\":2.45,\"server\":\"powerhouse-fitness\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"26.4.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"snap-fitness\"}}]]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":73.5,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":6994366739.311999,\"moneyMax\":6994366739.311999,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":753,\"serverGrowth\":52,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"57.4.7.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.038,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":517,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"run4theh111z\":[0,245856,0,121342]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9125639.96786277,\"onlineMoneyMade\":0,\"onlineRunningTime\":10994.010000004946,\"ramUsage\":2.45,\"server\":\"run4theh111z\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"6.4.0.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":349,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"I.I.I.I\":[0,337558,0,167154]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12557002.599783868,\"onlineMoneyMade\":0,\"onlineRunningTime\":11939.610000008375,\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":26,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"65.4.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.024,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":209,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"avmnite-02h\":[0,174846,0,34812]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3919877.848739316,\"onlineMoneyMade\":0,\"onlineRunningTime\":11945.210000008396,\"ramUsage\":2.45,\"server\":\"avmnite-02h\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"46.6.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.036,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":506,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\".\":[0,96552,0,19152]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2161028.3809550046,\"onlineMoneyMade\":0,\"onlineRunningTime\":10980.210000004896,\"ramUsage\":2.45,\"server\":\".\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":6,\"temporary\":false}}]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"31.8.3.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.054,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":60,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"CSEC\":[0,171402,0,19014]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3088263.808584833,\"onlineMoneyMade\":0,\"onlineRunningTime\":11837.610000008004,\"ramUsage\":2.45,\"server\":\"CSEC\",\"scriptKey\":\"hack-server.js*[]\",\"title\":\"hack-server.js \",\"threads\":3,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"35.6.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"The-Cave\"}}]]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"33.2.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3804.725383687637,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"65.8.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"function computeTargetLevel(currentLevel, targetLevel, a, b) {\\n\\treturn (a * currentLevel + b * targetLevel) / (a + b);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('getServerSecurityLevel');\\n\\tns.disableLog('getServerMinSecurityLevel');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('getServerMaxMoney');\\n\\n\\tconst decimalPlaces = 3;\\n\\tlet a = 10;\\n\\tlet b = 1;\\n\\n\\tconst targetHost = ns.getHostname();\\n\\n\\twhile (true) {\\n\\t\\tconst currentLevel = ns.getServerSecurityLevel(targetHost);\\n\\t\\tconst minLevel = ns.getServerMinSecurityLevel(targetHost);\\n\\t\\tconst targetSecurityLevel = computeTargetLevel(currentLevel, minLevel, a, b);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(targetHost);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(targetHost);\\n\\t\\tconst targetMoneyAmount = computeTargetLevel(currentMoney, maxMoney, a, b);\\n\\n\\t\\tns.print(`a: ${a}, b: ${b}`);\\n\\t\\tns.print('Security\\\\tcurrent: ' + currentLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', minimum: ' + minLevel.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\tns.print('Money\\\\tcurrent: ' + currentMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', maximum: ' + maxMoney.toFixed(decimalPlaces)\\n\\t\\t\\t+ ', target: ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\n\\t\\tfor (let i = 0; i < 25; i++) {\\n\\t\\t\\twhile (ns.getServerSecurityLevel(targetHost) > 1.05 * targetSecurityLevel) {\\n\\t\\t\\t\\tns.print('--> Security level: ' + ns.getServerSecurityLevel(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' > ' + targetSecurityLevel.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.weaken(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile (ns.getServerMoneyAvailable(targetHost) < 0.95 * targetMoneyAmount) {\\n\\t\\t\\t\\tns.print('--> Money: ' + ns.getServerMoneyAvailable(targetHost).toFixed(decimalPlaces)\\n\\t\\t\\t\\t\\t+ ' < ' + targetMoneyAmount.toFixed(decimalPlaces));\\n\\t\\t\\t\\tawait ns.grow(targetHost);\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.hack(targetHost);\\n\\t\\t}\\n\\n\\t\\tif (a > 1) {\\n\\t\\t\\ta--;\\n\\t\\t} else if (b < 100) {\\n\\t\\t\\tb++;\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"darkweb\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"hacknet-server-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-0\",\"httpPortOpen\":false,\"ip\":\"2.0.1.3\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":21,\"hashCapacity\":1048576,\"hashRate\":5.493991658592581,\"level\":100,\"onlineTimeSeconds\":12072.000000008855,\"totalHashesGenerated\":53421.948248874,\"runningScripts\":[]}},\"neighbor-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-0\",\"httpPortOpen\":false,\"ip\":\"46.9.6.6\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[0,0,0,507375],\"vitalife\":[0,0,845625,169125],\"lexo-corp\":[0,0,338250,0],\"titan-labs\":[0,0,507375,169125],\"neo-net\":[0,0,169125,507375],\"ecorp\":[1012523207235.0635,169125,169125,169125],\"syscore\":[0,0,338250,338250],\"megacorp\":[1510922092512.19,338250,0,338250],\"avmnite-02h\":[0,0,507375,0],\"run4theh111z\":[0,0,507375,0],\"defcomm\":[0,0,169125,169125],\"netlink\":[0,0,507375,0],\"solaris\":[0,0,507375,0],\"fulcrumassets\":[15543037.19847111,169125,0,338250],\"I.I.I.I\":[0,0,507375,0],\"phantasy\":[0,0,169125,507375],\"unitalife\":[0,0,338250,0],\"iron-gym\":[0,0,0,169125],\"summit-uni\":[4054873221.8977714,169125,507375,0],\"omnitek\":[0,0,169125,338250],\"darkweb\":[0,0,338250,0],\".\":[0,0,845625,0],\"fulcrumtech\":[0,0,169125,169125],\"stormtech\":[18722134900.69624,169125,169125,0],\"blade\":[153975165319.7397,169125,0,338250],\"deltaone\":[0,0,169125,338250],\"n00dles\":[3198287.9292983836,507375,0,0],\"the-hub\":[0,0,338250,169125],\"omega-net\":[0,0,169125,676500],\"snap-fitness\":[6994366739.311999,169125,169125,0],\"aevum-police\":[0,0,0,845625],\"omnia\":[0,0,169125,338250],\"rho-construction\":[0,0,338250,0],\"galactic-cyber\":[24111278570.645493,338250,338250,0],\"The-Cave\":[0,0,338250,0],\"crush-fitness\":[734100532.7905934,169125,169125,0],\"helios\":[0,0,338250,169125],\"millenium-fitness\":[0,0,169125,338250],\"zb-institute\":[1410890855.3923016,169125,169125,169125],\"zer0\":[0,0,507375,0],\"nectar-net\":[0,0,169125,169125],\"joesguns\":[36751699.4707143,169125,507375,0],\"sigma-cosmetics\":[0,0,0,338250],\"aerocorp\":[0,0,0,169125],\"infocomm\":[11856928070.536917,169125,0,169125],\"microdyne\":[0,0,507375,0],\"computek\":[7685974086.409947,338250,0,0],\"hong-fang-tea\":[0,0,169125,0],\"max-hardware\":[0,0,338250,0],\"applied-energetics\":[0,0,169125,169125],\"johnson-ortho\":[0,0,169125,169125],\"CSEC\":[0,0,169125,0],\"clarkinc\":[388715510793.46594,169125,0,338250],\"b-and-a\":[448535171815.6114,169125,0,0],\"zeus-med\":[0,0,0,338250],\"nova-med\":[0,0,0,169125],\"alpha-ent\":[0,0,338250,0],\"icarus\":[0,0,169125,169125],\"univ-energy\":[0,0,0,169125],\"catalyst\":[0,0,0,169125],\"rothman-uni\":[0,0,169125,0],\"global-pharm\":[0,0,0,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9909028355.8978,\"onlineMoneyMade\":3590297187678.35,\"onlineRunningTime\":5597.009999997101,\"ramUsage\":3.1,\"server\":\"neighbor-0\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"hacknet-server-1\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-1\",\"httpPortOpen\":false,\"ip\":\"27.7.1.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":21,\"hashCapacity\":1048576,\"hashRate\":5.493991658592581,\"level\":100,\"onlineTimeSeconds\":12071.400000008853,\"totalHashesGenerated\":52943.27056030444,\"runningScripts\":[]}},\"hacknet-server-2\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-2\",\"httpPortOpen\":false,\"ip\":\"88.3.0.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":21,\"hashCapacity\":1048576,\"hashRate\":5.493991658592581,\"level\":100,\"onlineTimeSeconds\":12071.000000008851,\"totalHashesGenerated\":52720.01311755629,\"runningScripts\":[]}},\"neighbor-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-1\",\"httpPortOpen\":false,\"ip\":\"43.5.7.4\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,845625,169125],\"unitalife\":[0,0,338250,0],\"kuai-gong\":[0,0,169125,169125],\"alpha-ent\":[0,0,845625,0],\"silver-helix\":[0,0,338250,338250],\"phantasy\":[0,0,169125,169125],\"b-and-a\":[448535171815.6114,169125,169125,169125],\"galactic-cyber\":[0,0,338250,338250],\"fulcrumassets\":[15543037.19847111,338250,0,338250],\".\":[0,0,507375,0],\"zeus-med\":[0,0,169125,0],\"helios\":[0,0,338250,169125],\"crush-fitness\":[734100532.7905934,169125,507375,338250],\"powerhouse-fitness\":[0,0,507375,0],\"infocomm\":[0,0,338250,0],\"rho-construction\":[0,0,169125,0],\"harakiri-sushi\":[58424492.427139565,169125,169125,0],\"vitalife\":[0,0,338250,0],\"foodnstuff\":[0,0,169125,169125],\"sigma-cosmetics\":[0,0,338250,169125],\"omnia\":[28719021930.181602,338250,0,0],\"iron-gym\":[0,0,507375,338250],\"megacorp\":[0,0,169125,0],\"avmnite-02h\":[0,0,169125,0],\"millenium-fitness\":[0,0,169125,169125],\"4sigma\":[0,169125,0,169125],\"nova-med\":[37584292436.477234,338250,169125,338250],\"aerocorp\":[0,0,169125,169125],\"The-Cave\":[0,0,676500,0],\"zer0\":[118904234.568304,169125,676500,169125],\"solaris\":[0,0,676500,338250],\"omnitek\":[0,0,0,338250],\"deltaone\":[22169243763.59963,169125,169125,507375],\"taiyang-digital\":[12952887964.263035,338250,169125,0],\"icarus\":[48197904136.15476,507375,507375,169125],\"catalyst\":[0,0,169125,338250],\"I.I.I.I\":[0,0,338250,0],\"johnson-ortho\":[1238427063.3808649,169125,169125,338250],\"darkweb\":[0,0,169125,0],\"ecorp\":[0,0,169125,169125],\"hong-fang-tea\":[0,0,169125,0],\"netlink\":[0,0,338250,507375],\"clarkinc\":[388715510793.46594,169125,0,0],\"microdyne\":[0,0,338250,0],\"applied-energetics\":[13454900140.550623,169125,0,169125],\"zb-institute\":[0,0,169125,0],\"omega-net\":[0,0,169125,338250],\"CSEC\":[0,0,169125,0],\"blade\":[0,0,0,169125],\"joesguns\":[0,0,169125,0],\"nectar-net\":[82157360.24950376,338250,0,0],\"nwo\":[1066091153142.2544,338250,169125,0],\"the-hub\":[0,0,169125,338250],\"univ-energy\":[0,0,338250,0],\"computek\":[3766895749.073685,169125,169125,169125],\"rothman-uni\":[0,0,169125,338250],\"aevum-police\":[0,0,338250,338250],\"lexo-corp\":[0,0,169125,338250],\"snap-fitness\":[0,0,169125,169125],\"neo-net\":[0,0,0,169125],\"global-pharm\":[0,0,169125,0],\"max-hardware\":[158538979.42440534,169125,169125,0],\"defcomm\":[0,0,169125,0],\"titan-labs\":[0,0,169125,0],\"stormtech\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11106163012.039055,\"onlineMoneyMade\":2072593077571.6714,\"onlineRunningTime\":5597.009999997101,\"ramUsage\":3.1,\"server\":\"neighbor-1\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-2\",\"httpPortOpen\":false,\"ip\":\"80.4.4.2\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"CSEC\":[0,0,338250,0],\"unitalife\":[13512057211.31165,169125,338250,169125],\"phantasy\":[0,0,169125,507375],\"sigma-cosmetics\":[0,0,1014750,169125],\"aevum-police\":[0,0,169125,0],\"icarus\":[16278762324.13174,169125,338250,507375],\"stormtech\":[0,0,676500,0],\"silver-helix\":[0,0,169125,676500],\"nectar-net\":[39383405.82966288,169125,169125,0],\"summit-uni\":[0,0,676500,0],\"4sigma\":[1135944513693.7944,507375,169125,169125],\"rothman-uni\":[0,0,169125,338250],\"helios\":[0,0,169125,169125],\"rho-construction\":[16873009520.176004,338250,507375,338250],\"omega-net\":[0,0,338250,338250],\"fulcrumtech\":[0,0,169125,338250],\"computek\":[0,0,507375,0],\"zb-institute\":[0,0,676500,169125],\"taiyang-digital\":[0,0,169125,0],\"omnia\":[0,0,169125,338250],\"avmnite-02h\":[0,0,507375,0],\"vitalife\":[11343084883.13893,169125,169125,169125],\"defcomm\":[13203433418.859713,169125,169125,169125],\"johnson-ortho\":[1214144179.7851615,169125,338250,338250],\"omnitek\":[0,0,169125,0],\"powerhouse-fitness\":[0,0,169125,507375],\"lexo-corp\":[0,0,338250,0],\"blade\":[0,0,338250,169125],\"syscore\":[6873195311.596316,169125,169125,0],\"the-hub\":[0,0,338250,0],\"univ-energy\":[0,0,507375,0],\"iron-gym\":[0,0,0,169125],\"titan-labs\":[0,0,507375,0],\"clarkinc\":[388715510793.46594,169125,507375,169125],\"I.I.I.I\":[0,0,169125,0],\"aerocorp\":[0,0,338250,0],\"galactic-cyber\":[12175002050.523962,169125,0,338250],\"neo-net\":[0,0,0,169125],\"n00dles\":[1044225.2635144843,169125,0,0],\"nwo\":[0,0,0,507375],\"zeus-med\":[68215302157.91608,507375,169125,169125],\"millenium-fitness\":[0,0,169125,0],\"megacorp\":[755461046256.095,169125,0,169125],\"hong-fang-tea\":[0,0,169125,0],\".\":[0,0,338250,0],\"foodnstuff\":[0,0,169125,0],\"crush-fitness\":[0,0,0,169125],\"harakiri-sushi\":[0,0,169125,0],\"max-hardware\":[0,0,338250,0],\"solaris\":[13871549511.63577,169125,338250,169125],\"catalyst\":[0,0,338250,169125],\"fulcrumassets\":[15543037.19847111,169125,0,0],\"applied-energetics\":[0,0,0,169125],\"darkweb\":[0,0,169125,0],\"microdyne\":[11155999251.907078,169125,338250,0],\"deltaone\":[22169243763.59963,169125,169125,0],\"ecorp\":[0,0,0,169125],\"zb-def\":[0,0,169125,169125],\"kuai-gong\":[397403470757.2593,169125,0,0],\"snap-fitness\":[0,0,0,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10706862287.65535,\"onlineMoneyMade\":2884465295753.488,\"onlineRunningTime\":5597.009999997101,\"ramUsage\":3.1,\"server\":\"neighbor-2\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"hacknet-server-3\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-3\",\"httpPortOpen\":false,\"ip\":\"84.2.9.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":21,\"hashCapacity\":1048576,\"hashRate\":5.493991658592581,\"level\":100,\"onlineTimeSeconds\":12070.400000008849,\"totalHashesGenerated\":52473.24782941689,\"runningScripts\":[]}},\"neighbor-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-3\",\"httpPortOpen\":false,\"ip\":\"24.6.3.3\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"global-pharm\":[0,0,0,507375],\"zeus-med\":[0,0,169125,507375],\"netlink\":[0,0,169125,0],\"4sigma\":[378648171231.2648,169125,169125,169125],\"zb-def\":[0,0,0,338250],\"ecorp\":[0,169125,169125,169125],\"helios\":[0,0,0,338250],\"clarkinc\":[777431021586.9319,338250,0,169125],\"sigma-cosmetics\":[0,0,169125,169125],\"aevum-police\":[0,0,676500,169125],\"CSEC\":[0,0,1183875,0],\"run4theh111z\":[0,0,169125,0],\"lexo-corp\":[12675040539.288385,169125,169125,169125],\"n00dles\":[4176899.1482038037,676500,0,0],\"summit-uni\":[0,0,338250,338250],\"nova-med\":[18792146218.238617,169125,169125,169125],\"johnson-ortho\":[0,169125,338250,169125],\"infocomm\":[11856928070.536917,338250,0,0],\"kuai-gong\":[0,0,169125,0],\"rothman-uni\":[0,0,676500,169125],\"I.I.I.I\":[0,0,676500,0],\"foodnstuff\":[0,0,0,1014750],\"applied-energetics\":[26123508538.939117,338250,169125,676500],\"microdyne\":[0,0,338250,0],\"iron-gym\":[0,0,169125,338250],\"aerocorp\":[36160256906.83498,338250,169125,338250],\"nwo\":[0,0,338250,338250],\"alpha-ent\":[9920159628.491842,169125,676500,0],\"avmnite-02h\":[0,0,1183875,0],\"joesguns\":[36293203.9233063,169125,0,0],\"hong-fang-tea\":[0,0,169125,0],\".\":[0,0,676500,0],\"rho-construction\":[0,0,507375,0],\"nectar-net\":[0,0,507375,0],\"solaris\":[11145854439.391346,169125,507375,0],\"omega-net\":[0,0,169125,507375],\"snap-fitness\":[6994366739.311999,169125,0,169125],\"silver-helix\":[0,0,507375,169125],\"stormtech\":[0,0,169125,0],\"vitalife\":[0,0,338250,169125],\"defcomm\":[0,0,0,169125],\"syscore\":[13479496072.453983,338250,0,338250],\"fulcrumassets\":[0,0,169125,0],\"catalyst\":[0,0,169125,0],\"the-hub\":[2818606856.4621534,169125,676500,169125],\"phantasy\":[0,0,338250,169125],\"zer0\":[0,0,169125,0],\"The-Cave\":[0,0,169125,0],\"millenium-fitness\":[0,0,338250,0],\"omnitek\":[0,0,338250,0],\"unitalife\":[0,0,0,169125],\"taiyang-digital\":[12952887964.263035,169125,338250,169125],\"computek\":[0,0,0,169125],\"univ-energy\":[0,0,169125,507375],\"zb-institute\":[0,0,338250,169125],\"crush-fitness\":[0,0,169125,0],\"b-and-a\":[0,169125,169125,169125],\"max-hardware\":[0,0,169125,0],\"deltaone\":[0,0,0,169125],\"fulcrumtech\":[0,0,338250,169125],\"darkweb\":[0,0,169125,0],\"harakiri-sushi\":[0,0,338250,0],\"icarus\":[0,0,0,169125],\"omnia\":[0,0,169125,0],\"galactic-cyber\":[0,0,0,169125],\"blade\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10803281612.019985,\"onlineMoneyMade\":1319038914895.4807,\"onlineRunningTime\":5597.009999997101,\"ramUsage\":3.1,\"server\":\"neighbor-3\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-4\",\"httpPortOpen\":false,\"ip\":\"16.3.3.2\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"zb-def\":[17656550044.607395,169125,338250,338250],\"run4theh111z\":[0,0,507375,0],\"johnson-ortho\":[0,0,338250,169125],\"iron-gym\":[0,0,169125,676500],\"icarus\":[0,0,169125,0],\"global-pharm\":[0,0,507375,169125],\"unitalife\":[0,0,676500,0],\"fulcrumtech\":[0,0,338250,0],\"applied-energetics\":[12678852911.54102,169125,507375,169125],\"omega-net\":[0,0,338250,169125],\"kuai-gong\":[787014716597.7095,338250,0,169125],\"univ-energy\":[3271453778.5788155,169125,169125,507375],\"rho-construction\":[0,169125,169125,169125],\"summit-uni\":[4054873221.8977714,169125,676500,169125],\"n00dles\":[3132683.3571303925,507375,0,0],\"vitalife\":[0,0,338250,169125],\"omnitek\":[0,0,169125,0],\"taiyang-digital\":[25905775928.52607,338250,169125,0],\"lexo-corp\":[0,0,338250,169125],\"fulcrumassets\":[0,338250,0,169125],\"solaris\":[0,0,169125,0],\"omnia\":[14359510965.090801,169125,169125,169125],\"nwo\":[1066091153142.2544,507375,169125,169125],\"defcomm\":[0,0,0,338250],\"I.I.I.I\":[0,0,507375,0],\"avmnite-02h\":[0,0,338250,0],\"millenium-fitness\":[0,0,507375,338250],\"zb-institute\":[0,0,169125,0],\"CSEC\":[0,0,507375,0],\"The-Cave\":[0,0,507375,0],\"computek\":[3919078337.336262,169125,0,338250],\"joesguns\":[0,0,169125,0],\".\":[0,0,507375,0],\"nova-med\":[18792146218.238617,169125,0,169125],\"megacorp\":[0,0,338250,338250],\"crush-fitness\":[0,0,0,169125],\"alpha-ent\":[0,0,338250,0],\"max-hardware\":[0,0,0,169125],\"the-hub\":[4852617645.574802,338250,507375,169125],\"b-and-a\":[0,0,169125,338250],\"netlink\":[0,0,169125,338250],\"aerocorp\":[18259139626.223602,169125,169125,169125],\"helios\":[0,0,507375,338250],\"aevum-police\":[0,0,169125,0],\"foodnstuff\":[0,0,169125,507375],\"snap-fitness\":[6994366739.311999,169125,169125,169125],\"hong-fang-tea\":[0,0,0,169125],\"stormtech\":[18722134900.69624,169125,169125,0],\"powerhouse-fitness\":[0,0,169125,0],\"titan-labs\":[0,0,507375,0],\"zer0\":[0,0,338250,0],\"microdyne\":[0,0,169125,169125],\"zeus-med\":[0,0,0,169125],\"harakiri-sushi\":[0,0,169125,0],\"darkweb\":[0,0,169125,0],\"phantasy\":[0,0,169125,0],\"deltaone\":[0,0,169125,0],\"4sigma\":[0,0,169125,0],\"sigma-cosmetics\":[0,0,338250,0],\"ecorp\":[1012523207235.0635,169125,0,0],\"clarkinc\":[0,0,169125,169125],\"infocomm\":[0,169125,0,0],\"syscore\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10150028696.996284,\"onlineMoneyMade\":3015098709976.0083,\"onlineRunningTime\":5597.009999997101,\"ramUsage\":3.1,\"server\":\"neighbor-4\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"hacknet-server-4\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-4\",\"httpPortOpen\":false,\"ip\":\"86.7.3.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":21,\"hashCapacity\":1048576,\"hashRate\":5.493991658592581,\"level\":100,\"onlineTimeSeconds\":12070.000000008848,\"totalHashesGenerated\":51951.09819623104,\"runningScripts\":[]}},\"neighbor-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-5\",\"httpPortOpen\":false,\"ip\":\"71.8.4.2\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"fulcrumassets\":[31086074.39694222,338250,169125,338250],\"rho-construction\":[0,0,338250,0],\"zb-institute\":[13877195757.73465,169125,676500,0],\"blade\":[547891664178.7046,169125,169125,169125],\"I.I.I.I\":[0,0,507375,0],\"harakiri-sushi\":[0,0,338250,169125],\"silver-helix\":[0,0,0,507375],\"computek\":[3766895749.073685,169125,169125,507375],\"CSEC\":[0,0,1014750,0],\"syscore\":[13344727536.932486,338250,676500,0],\"aevum-police\":[0,0,338250,169125],\"aerocorp\":[36160256906.83498,338250,169125,169125],\"omnia\":[0,0,507375,0],\"alpha-ent\":[0,0,338250,169125],\"4sigma\":[0,0,338250,169125],\"global-pharm\":[0,0,507375,169125],\"deltaone\":[0,0,0,338250],\"summit-uni\":[0,0,507375,0],\"crush-fitness\":[0,0,0,338250],\"rothman-uni\":[0,0,338250,676500],\"sigma-cosmetics\":[0,0,845625,0],\"powerhouse-fitness\":[0,0,169125,169125],\"clarkinc\":[388715510793.46594,169125,169125,338250],\"zeus-med\":[0,0,338250,169125],\"neo-net\":[0,0,0,169125],\"avmnite-02h\":[0,0,338250,0],\"the-hub\":[0,0,169125,0],\"megacorp\":[755461046256.095,169125,169125,169125],\"stormtech\":[18722134900.69624,169125,0,169125],\"solaris\":[0,0,338250,0],\"fulcrumtech\":[0,0,338250,169125],\"catalyst\":[0,0,338250,338250],\"microdyne\":[0,0,507375,0],\"nova-med\":[0,0,169125,0],\"defcomm\":[13203433418.859713,169125,0,0],\"millenium-fitness\":[0,0,338250,0],\"unitalife\":[34025490156.893394,338250,338250,338250],\"omega-net\":[0,0,676500,169125],\"icarus\":[0,0,169125,0],\"univ-energy\":[3763515674.215353,169125,338250,0],\"omnitek\":[0,0,169125,169125],\"b-and-a\":[0,0,338250,169125],\"applied-energetics\":[0,0,169125,0],\"johnson-ortho\":[1214144179.7851615,169125,0,676500],\"run4theh111z\":[0,0,169125,0],\"galactic-cyber\":[24350004101.047924,338250,0,0],\"kuai-gong\":[794806941514.5186,338250,169125,0],\"zb-def\":[18009681045.499542,169125,169125,0],\"zer0\":[0,0,338250,0],\"foodnstuff\":[0,0,0,338250],\"phantasy\":[0,0,338250,0],\"nectar-net\":[0,0,169125,169125],\"lexo-corp\":[0,0,338250,0],\"ecorp\":[0,0,0,169125],\"darkweb\":[0,0,338250,0],\"iron-gym\":[0,0,338250,338250],\"helios\":[0,0,338250,0],\"snap-fitness\":[0,0,169125,0],\"The-Cave\":[0,0,169125,0],\"joesguns\":[37085770.106899165,169125,0,0],\"titan-labs\":[0,0,169125,0],\".\":[0,0,169125,0],\"hong-fang-tea\":[0,0,169125,0],\"max-hardware\":[0,0,0,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11058001319.669851,\"onlineMoneyMade\":2667380814014.8613,\"onlineRunningTime\":5597.009999997101,\"ramUsage\":3.1,\"server\":\"neighbor-5\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-6\",\"httpPortOpen\":false,\"ip\":\"16.5.1.2\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"lexo-corp\":[0,0,338250,338250],\"netlink\":[0,0,0,338250],\"fulcrumtech\":[0,0,169125,169125],\"phantasy\":[0,0,845625,338250],\"omnitek\":[0,0,338250,0],\"fulcrumassets\":[15543037.19847111,169125,338250,338250],\"4sigma\":[0,0,169125,169125],\"global-pharm\":[0,0,0,169125],\"unitalife\":[0,0,676500,0],\"alpha-ent\":[0,0,0,338250],\"nwo\":[533045576571.1272,338250,169125,338250],\"microdyne\":[0,0,0,169125],\"sigma-cosmetics\":[0,0,676500,676500],\"helios\":[0,0,169125,338250],\"harakiri-sushi\":[63096658.288339436,169125,169125,0],\"megacorp\":[0,0,338250,338250],\"CSEC\":[0,0,338250,0],\"neo-net\":[0,0,0,338250],\"I.I.I.I\":[0,0,338250,0],\"omega-net\":[0,0,169125,0],\"powerhouse-fitness\":[0,0,169125,169125],\"The-Cave\":[0,0,338250,0],\"hong-fang-tea\":[44506360.666057535,169125,169125,0],\"summit-uni\":[0,0,169125,0],\"crush-fitness\":[2202301598.3717804,507375,169125,169125],\"defcomm\":[0,0,169125,0],\"silver-helix\":[0,0,169125,338250],\"nova-med\":[18792146218.238617,169125,169125,507375],\"b-and-a\":[448535171815.6114,169125,0,338250],\"infocomm\":[0,0,169125,169125],\"iron-gym\":[0,0,169125,169125],\"n00dles\":[1044230.4534324282,169125,0,0],\"deltaone\":[0,0,338250,0],\"stormtech\":[18722134900.69624,169125,169125,169125],\"univ-energy\":[0,0,338250,169125],\"nectar-net\":[0,0,507375,0],\"computek\":[3693035048.111456,169125,0,338250],\"darkweb\":[0,0,338250,0],\"kuai-gong\":[0,0,169125,0],\"catalyst\":[0,0,507375,0],\"avmnite-02h\":[0,0,845625,0],\"rho-construction\":[0,0,338250,0],\"rothman-uni\":[0,0,169125,338250],\"taiyang-digital\":[0,0,169125,507375],\"zb-def\":[18369874666.409534,169125,507375,169125],\"blade\":[0,0,169125,0],\"solaris\":[0,0,169125,169125],\"syscore\":[0,0,0,169125],\"joesguns\":[0,0,0,169125],\"titan-labs\":[10257333505.464298,169125,0,0],\"vitalife\":[0,0,169125,0],\"millenium-fitness\":[0,0,0,169125],\"zeus-med\":[22738434052.63869,169125,0,0],\"zer0\":[0,0,507375,0],\".\":[0,0,338250,0],\"applied-energetics\":[13454900140.550623,169125,338250,0],\"max-hardware\":[0,0,0,169125],\"omnia\":[0,0,169125,0],\"johnson-ortho\":[0,0,169125,0],\"clarkinc\":[388715510793.46594,169125,0,169125],\"zb-institute\":[0,0,0,169125],\"aerocorp\":[0,0,0,169125],\"the-hub\":[0,0,0,169125],\"run4theh111z\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9311132605.210808,\"onlineMoneyMade\":1478650609597.292,\"onlineRunningTime\":5597.009999997101,\"ramUsage\":3.1,\"server\":\"neighbor-6\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"hacknet-server-5\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-5\",\"httpPortOpen\":false,\"ip\":\"54.4.2.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":21,\"hashCapacity\":1048576,\"hashRate\":5.493991658592581,\"level\":100,\"onlineTimeSeconds\":12068.400000008842,\"totalHashesGenerated\":51613.143840218654,\"runningScripts\":[]}},\"neighbor-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-7\",\"httpPortOpen\":false,\"ip\":\"54.1.8.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"unitalife\":[0,0,169125,169125],\"zeus-med\":[0,0,169125,338250],\"kuai-gong\":[0,0,169125,338250],\"millenium-fitness\":[0,0,338250,169125],\"infocomm\":[11856928070.536917,169125,169125,169125],\"stormtech\":[0,0,169125,338250],\"ecorp\":[1012523207235.0635,169125,338250,338250],\"zb-institute\":[0,0,338250,338250],\"sigma-cosmetics\":[0,0,0,338250],\"catalyst\":[0,0,169125,338250],\"iron-gym\":[0,0,169125,507375],\"zb-def\":[0,0,169125,169125],\"4sigma\":[378648171231.2648,169125,169125,169125],\"univ-energy\":[3644700297.6644173,169125,338250,338250],\"omnitek\":[0,0,507375,169125],\"The-Cave\":[0,0,507375,0],\"aerocorp\":[0,0,169125,338250],\"rothman-uni\":[0,0,169125,338250],\"neo-net\":[0,0,338250,169125],\"fulcrumtech\":[0,0,338250,0],\"taiyang-digital\":[12952887964.263035,169125,169125,338250],\"galactic-cyber\":[24111278570.645493,338250,0,338250],\"CSEC\":[0,0,507375,0],\"avmnite-02h\":[0,0,507375,0],\"nectar-net\":[0,0,169125,0],\"silver-helix\":[0,0,0,169125],\"helios\":[0,0,169125,338250],\"n00dles\":[1044233.9740472671,169125,0,0],\"alpha-ent\":[0,0,169125,0],\"nwo\":[0,0,338250,169125],\"foodnstuff\":[29991043.865201972,169125,338250,169125],\"zer0\":[0,0,338250,0],\"fulcrumassets\":[15543037.19847111,169125,0,0],\"powerhouse-fitness\":[0,0,0,169125],\"rho-construction\":[0,0,0,338250],\"nova-med\":[0,0,0,169125],\"aevum-police\":[0,0,338250,0],\"darkweb\":[0,0,338250,0],\"snap-fitness\":[6994366739.311999,169125,0,0],\"harakiri-sushi\":[0,0,169125,169125],\"defcomm\":[0,0,0,338250],\"icarus\":[32238333230.14325,338250,0,0],\"deltaone\":[22169243763.59963,169125,169125,0],\"megacorp\":[0,0,169125,169125],\"netlink\":[0,0,169125,0],\"lexo-corp\":[0,0,169125,0],\"computek\":[7535268712.166615,338250,0,169125],\"syscore\":[6873195311.596316,169125,169125,0],\"applied-energetics\":[0,0,0,169125],\"crush-fitness\":[0,0,0,169125],\"omnia\":[0,0,169125,0],\"b-and-a\":[0,0,0,338250],\"blade\":[0,0,338250,169125],\"hong-fang-tea\":[0,0,169125,0],\"vitalife\":[0,0,169125,0],\"titan-labs\":[0,0,169125,0],\"solaris\":[0,0,169125,0],\"joesguns\":[0,0,169125,0],\"summit-uni\":[0,0,169125,0],\"johnson-ortho\":[0,0,0,169125],\"omega-net\":[0,0,0,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9040199100.727484,\"onlineMoneyMade\":1519594159441.2937,\"onlineRunningTime\":5597.009999997101,\"ramUsage\":3.1,\"server\":\"neighbor-7\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-8\",\"httpPortOpen\":false,\"ip\":\"96.7.4.8\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"clarkinc\":[1166146532380.398,507375,338250,338250],\"zb-def\":[18009681045.499542,169125,169125,169125],\"netlink\":[0,0,507375,338250],\"rothman-uni\":[0,0,169125,676500],\"aevum-police\":[0,0,0,169125],\"millenium-fitness\":[0,0,0,676500],\"zer0\":[0,0,169125,507375],\"catalyst\":[0,0,169125,338250],\"unitalife\":[17012745078.446697,169125,507375,169125],\"icarus\":[0,0,169125,507375],\"4sigma\":[0,169125,169125,169125],\"nectar-net\":[0,0,169125,338250],\"omnia\":[0,0,338250,338250],\"univ-energy\":[0,0,338250,338250],\"hong-fang-tea\":[0,0,1014750,0],\"crush-fitness\":[0,0,169125,169125],\"rho-construction\":[8436504760.088002,169125,338250,0],\"applied-energetics\":[13454900140.550623,169125,0,169125],\"fulcrumtech\":[0,0,507375,338250],\"aerocorp\":[0,0,507375,338250],\"summit-uni\":[3043873679.5148935,169125,169125,0],\"silver-helix\":[0,0,0,169125],\"neo-net\":[0,0,338250,169125],\"I.I.I.I\":[0,0,507375,0],\"kuai-gong\":[0,0,0,169125],\"joesguns\":[38306462.58451779,169125,169125,0],\"snap-fitness\":[0,0,507375,0],\".\":[0,0,676500,0],\"nwo\":[533045576571.1272,169125,169125,0],\"computek\":[3693035048.111456,169125,507375,0],\"deltaone\":[66507731290.79889,507375,169125,0],\"stormtech\":[0,0,169125,338250],\"galactic-cyber\":[0,0,0,169125],\"vitalife\":[0,0,507375,0],\"defcomm\":[13203433418.859713,169125,169125,0],\"global-pharm\":[0,0,507375,0],\"alpha-ent\":[7465701695.510784,169125,676500,0],\"titan-labs\":[13003321670.97212,169125,169125,0],\"run4theh111z\":[0,0,338250,0],\"zb-institute\":[1500853991.1188793,169125,169125,0],\"avmnite-02h\":[0,0,507375,0],\"b-and-a\":[897070343631.2228,338250,507375,0],\"johnson-ortho\":[1214144179.7851615,169125,0,169125],\"n00dles\":[2154003.127334447,338250,0,0],\"omega-net\":[0,0,169125,169125],\"the-hub\":[0,0,338250,0],\"foodnstuff\":[0,0,169125,169125],\"sigma-cosmetics\":[0,0,169125,169125],\"taiyang-digital\":[0,0,338250,0],\"microdyne\":[0,0,169125,169125],\"ecorp\":[0,0,0,169125],\"zeus-med\":[0,0,0,169125],\"darkweb\":[0,0,338250,0],\"lexo-corp\":[0,0,169125,0],\"The-Cave\":[0,0,338250,0],\"nova-med\":[18792146218.238617,169125,338250,169125],\"helios\":[0,0,169125,0],\"megacorp\":[0,169125,0,0],\"omnitek\":[0,0,169125,338250],\"infocomm\":[11856928070.536917,169125,0,0],\"harakiri-sushi\":[0,0,169125,0],\"phantasy\":[0,0,338250,0],\"iron-gym\":[0,0,0,169125],\"syscore\":[0,0,0,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11085056294.267693,\"onlineMoneyMade\":2793497913336.492,\"onlineRunningTime\":5597.009999997101,\"ramUsage\":3.1,\"server\":\"neighbor-8\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-9\",\"httpPortOpen\":false,\"ip\":\"82.5.2.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"millenium-fitness\":[0,0,507375,169125],\"n00dles\":[4308047.521306992,676500,0,0],\"infocomm\":[0,0,0,676500],\"syscore\":[0,0,169125,169125],\"b-and-a\":[448535171815.6114,169125,0,507375],\"harakiri-sushi\":[0,0,338250,169125],\"run4theh111z\":[0,0,845625,0],\"univ-energy\":[18289255902.33484,169125,169125,338250],\"iron-gym\":[0,0,169125,338250],\"solaris\":[0,0,338250,0],\"CSEC\":[0,0,676500,0],\"zeus-med\":[45476868105.27738,338250,169125,169125],\"helios\":[0,0,169125,169125],\"zb-def\":[18009681045.499542,169125,169125,0],\"crush-fitness\":[0,0,169125,338250],\"snap-fitness\":[27977466957.247997,676500,169125,169125],\"silver-helix\":[0,0,169125,169125],\"nwo\":[533045576571.1272,169125,338250,0],\"foodnstuff\":[0,0,169125,338250],\"aevum-police\":[0,0,169125,338250],\"vitalife\":[6696086488.403067,169125,338250,0],\"stormtech\":[0,169125,338250,169125],\"unitalife\":[0,0,338250,0],\"I.I.I.I\":[0,0,338250,0],\"johnson-ortho\":[1214144179.7851615,169125,169125,169125],\"deltaone\":[22169243763.59963,169125,507375,169125],\"avmnite-02h\":[0,0,338250,0],\"neo-net\":[0,0,507375,169125],\"darkweb\":[0,0,169125,0],\"fulcrumassets\":[0,169125,0,0],\"blade\":[0,0,338250,0],\"kuai-gong\":[1192210412271.7778,507375,338250,169125],\"omnitek\":[0,0,338250,169125],\".\":[0,0,169125,0],\"phantasy\":[0,0,507375,169125],\"nectar-net\":[0,0,338250,0],\"sigma-cosmetics\":[0,0,0,169125],\"applied-energetics\":[12932429969.77184,169125,0,0],\"lexo-corp\":[0,0,338250,0],\"powerhouse-fitness\":[16100916802.33999,338250,169125,0],\"omnia\":[0,0,169125,169125],\"zb-institute\":[0,0,338250,169125],\"aerocorp\":[0,0,338250,0],\"computek\":[0,0,338250,169125],\"microdyne\":[11155999251.907078,169125,507375,169125],\"catalyst\":[0,0,0,169125],\"summit-uni\":[0,0,169125,0],\"clarkinc\":[0,0,0,507375],\"rho-construction\":[0,0,169125,169125],\"hong-fang-tea\":[0,0,169125,0],\"icarus\":[16278762324.13174,169125,0,338250],\"The-Cave\":[0,0,507375,0],\"ecorp\":[1032773671379.7648,169125,338250,507375],\"galactic-cyber\":[7063390683.938272,169125,0,0],\"the-hub\":[2028045582.6251473,169125,676500,169125],\"nova-med\":[0,0,169125,0],\"zer0\":[0,0,676500,0],\"rothman-uni\":[0,0,0,169125],\"max-hardware\":[0,0,169125,0],\"joesguns\":[0,0,169125,169125],\"defcomm\":[0,0,169125,0],\"netlink\":[0,0,169125,169125],\"4sigma\":[0,0,0,169125],\"taiyang-digital\":[12952887964.263035,169125,0,169125],\"omega-net\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10804720706.413488,\"onlineMoneyMade\":3424914319106.9277,\"onlineRunningTime\":5597.009999997101,\"ramUsage\":3.1,\"server\":\"neighbor-9\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-10\",\"httpPortOpen\":false,\"ip\":\"66.4.5.3\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"phantasy\":[0,0,338250,169125],\"aerocorp\":[0,0,169125,0],\"max-hardware\":[0,0,0,169125],\"4sigma\":[1514592684925.059,676500,0,0],\"icarus\":[0,0,507375,0],\"kuai-gong\":[0,0,0,507375],\"vitalife\":[0,0,507375,0],\"global-pharm\":[0,0,169125,338250],\"alpha-ent\":[0,0,338250,0],\"applied-energetics\":[13454900140.550623,169125,169125,338250],\"zeus-med\":[22738434052.63869,169125,0,338250],\"harakiri-sushi\":[126128274.67814422,338250,507375,0],\"unitalife\":[0,169125,338250,169125],\"silver-helix\":[0,0,0,338250],\"millenium-fitness\":[0,0,169125,169125],\"The-Cave\":[0,0,845625,0],\"iron-gym\":[0,0,0,338250],\"clarkinc\":[0,0,338250,507375],\"rothman-uni\":[0,0,0,169125],\"run4theh111z\":[0,0,1014750,0],\"zb-institute\":[0,0,338250,0],\"summit-uni\":[0,0,507375,169125],\"ecorp\":[0,0,169125,169125],\"netlink\":[0,0,676500,169125],\"johnson-ortho\":[1214144179.7851615,169125,169125,0],\"univ-energy\":[36944296922.71637,338250,338250,338250],\"galactic-cyber\":[0,0,338250,169125],\"aevum-police\":[0,0,676500,169125],\"deltaone\":[22169243763.59963,338250,169125,0],\"joesguns\":[0,0,169125,169125],\"lexo-corp\":[0,0,169125,0],\"helios\":[0,0,169125,338250],\"omnia\":[0,0,338250,0],\"n00dles\":[2154006.3570966157,338250,0,0],\"megacorp\":[755461046256.095,169125,0,338250],\"taiyang-digital\":[0,0,169125,169125],\"hong-fang-tea\":[0,0,338250,169125],\"powerhouse-fitness\":[0,0,169125,338250],\"titan-labs\":[20674589148.894295,338250,338250,0],\"nova-med\":[18792146218.238617,169125,338250,169125],\"fulcrumtech\":[0,0,0,169125],\"zer0\":[0,0,169125,0],\"defcomm\":[0,0,169125,0],\"I.I.I.I\":[0,0,507375,0],\"stormtech\":[0,0,0,169125],\"darkweb\":[0,0,507375,0],\"zb-def\":[18009681045.499542,169125,0,169125],\"catalyst\":[0,0,338250,0],\"sigma-cosmetics\":[0,0,169125,169125],\".\":[0,0,507375,0],\"avmnite-02h\":[0,0,676500,0],\"neo-net\":[0,0,338250,0],\"foodnstuff\":[0,0,0,676500],\"crush-fitness\":[0,0,338250,0],\"blade\":[0,0,169125,338250],\"infocomm\":[0,0,338250,0],\"b-and-a\":[448535171815.6114,169125,0,0],\"microdyne\":[0,0,169125,169125],\"solaris\":[0,0,338250,0],\"omega-net\":[0,0,338250,169125],\"snap-fitness\":[0,0,0,338250],\"omnitek\":[0,0,169125,0],\"CSEC\":[0,0,169125,0],\"the-hub\":[0,0,169125,0],\"computek\":[0,0,0,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10287798000.267548,\"onlineMoneyMade\":2872714620749.723,\"onlineRunningTime\":5597.009999997101,\"ramUsage\":3.1,\"server\":\"neighbor-10\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-11\",\"httpPortOpen\":false,\"ip\":\"35.7.9.3\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"omega-net\":[0,0,169125,169125],\"silver-helix\":[0,0,169125,507375],\"n00dles\":[5352222.136325295,845625,0,0],\"powerhouse-fitness\":[14553878311.16041,169125,169125,0],\"microdyne\":[8841509702.881302,169125,507375,338250],\"alpha-ent\":[0,0,338250,169125],\"fulcrumassets\":[0,0,0,338250],\"sigma-cosmetics\":[0,0,338250,507375],\"ecorp\":[0,0,338250,338250],\"titan-labs\":[12748354579.384432,169125,0,0],\"rothman-uni\":[0,0,169125,338250],\"omnitek\":[0,0,0,507375],\"CSEC\":[0,0,676500,0],\"crush-fitness\":[0,0,507375,0],\"computek\":[7612113385.447718,338250,0,169125],\"The-Cave\":[0,0,507375,0],\"zeus-med\":[45476868105.27738,338250,169125,169125],\"snap-fitness\":[0,0,169125,338250],\"univ-energy\":[0,0,507375,0],\"summit-uni\":[3042331997.5090714,169125,507375,169125],\"iron-gym\":[0,0,338250,169125],\"I.I.I.I\":[0,0,676500,0],\"4sigma\":[378648171231.2648,169125,0,169125],\"joesguns\":[0,0,338250,0],\"stormtech\":[0,0,169125,338250],\"omnia\":[8560685129.570487,169125,507375,0],\"harakiri-sushi\":[41154910.07477596,169125,507375,0],\"aerocorp\":[0,0,169125,338250],\"max-hardware\":[0,0,507375,0],\"vitalife\":[0,0,0,169125],\"johnson-ortho\":[0,0,169125,0],\"b-and-a\":[0,0,169125,169125],\"neo-net\":[0,0,338250,169125],\"millenium-fitness\":[0,0,0,338250],\"applied-energetics\":[13191078569.167276,169125,169125,169125],\"nwo\":[0,0,338250,169125],\"darkweb\":[0,0,676500,0],\"infocomm\":[11856928070.536917,169125,169125,338250],\"solaris\":[0,0,169125,0],\"netlink\":[0,0,169125,338250],\"hong-fang-tea\":[0,0,338250,0],\"foodnstuff\":[0,0,169125,169125],\"unitalife\":[0,0,169125,338250],\"global-pharm\":[0,0,0,169125],\"zer0\":[0,0,507375,0],\"nectar-net\":[0,0,0,338250],\"defcomm\":[0,0,0,507375],\"fulcrumtech\":[0,0,338250,169125],\"the-hub\":[0,0,169125,0],\"helios\":[9037536130.95112,169125,0,0],\"galactic-cyber\":[0,0,338250,169125],\"syscore\":[0,0,0,338250],\"taiyang-digital\":[25905775928.52607,338250,0,0],\".\":[0,0,338250,0],\"zb-institute\":[0,0,169125,0],\"nova-med\":[18792146218.238617,169125,338250,169125],\"rho-construction\":[0,0,169125,0],\"lexo-corp\":[0,0,169125,0],\"phantasy\":[0,0,0,169125],\"avmnite-02h\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9450820701.006744,\"onlineMoneyMade\":558313884492.1267,\"onlineRunningTime\":5597.009999997101,\"ramUsage\":3.1,\"server\":\"neighbor-11\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-12\",\"httpPortOpen\":false,\"ip\":\"38.6.6.8\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"omnitek\":[0,0,169125,676500],\"stormtech\":[0,0,169125,0],\"defcomm\":[0,0,169125,0],\"omega-net\":[0,0,507375,845625],\"hong-fang-tea\":[0,0,169125,0],\"taiyang-digital\":[0,0,169125,338250],\"aevum-police\":[0,0,676500,338250],\"aerocorp\":[0,0,169125,338250],\"crush-fitness\":[1439412809.3933203,338250,169125,169125],\"nectar-net\":[40968547.08116894,169125,169125,169125],\"microdyne\":[0,0,338250,0],\"fulcrumassets\":[0,0,169125,338250],\"I.I.I.I\":[0,0,338250,0],\"foodnstuff\":[0,0,0,169125],\"zb-institute\":[13877195757.73465,169125,169125,0],\"galactic-cyber\":[11936276520.12153,169125,0,338250],\"catalyst\":[0,0,169125,169125],\"applied-energetics\":[0,169125,169125,169125],\"megacorp\":[0,0,0,169125],\"rho-construction\":[0,0,507375,0],\"solaris\":[0,0,676500,0],\"clarkinc\":[0,0,169125,507375],\"4sigma\":[0,0,169125,338250],\"nova-med\":[18792146218.238617,169125,0,0],\"avmnite-02h\":[0,0,338250,0],\".\":[0,0,507375,0],\"deltaone\":[0,169125,0,0],\"millenium-fitness\":[0,0,169125,507375],\"summit-uni\":[0,0,507375,0],\"iron-gym\":[0,0,169125,0],\"The-Cave\":[0,0,338250,0],\"rothman-uni\":[0,0,338250,0],\"CSEC\":[0,0,507375,0],\"johnson-ortho\":[3642432539.3554845,507375,0,169125],\"helios\":[0,0,169125,338250],\"b-and-a\":[0,0,507375,169125],\"unitalife\":[0,169125,169125,0],\"snap-fitness\":[0,0,507375,507375],\"alpha-ent\":[0,0,338250,0],\"titan-labs\":[0,0,169125,169125],\"joesguns\":[0,0,169125,0],\"sigma-cosmetics\":[0,0,169125,0],\"powerhouse-fitness\":[0,0,169125,0],\"zer0\":[0,0,507375,0],\"phantasy\":[0,0,169125,169125],\"netlink\":[0,0,169125,0],\"harakiri-sushi\":[0,0,169125,0],\"the-hub\":[0,0,507375,169125],\"infocomm\":[11856928070.536917,169125,169125,169125],\"neo-net\":[0,0,169125,0],\"zb-def\":[18009681045.499542,169125,0,169125],\"n00dles\":[3132670.362810504,507375,0,0],\"zeus-med\":[22738434052.63869,169125,0,169125],\"max-hardware\":[0,0,169125,0],\"silver-helix\":[0,0,0,507375],\"computek\":[0,0,169125,0],\"nwo\":[0,0,507375,0],\"fulcrumtech\":[0,0,0,169125],\"lexo-corp\":[12675040539.288385,169125,169125,0],\"vitalife\":[0,0,0,169125],\"ecorp\":[0,0,169125,0],\"kuai-gong\":[0,0,0,169125],\"univ-energy\":[0,0,0,169125],\"omnia\":[0,0,0,169125],\"global-pharm\":[0,0,0,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9598951483.911224,\"onlineMoneyMade\":115011648770.25111,\"onlineRunningTime\":5597.009999997101,\"ramUsage\":3.1,\"server\":\"neighbor-12\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-13\",\"httpPortOpen\":false,\"ip\":\"28.1.4.8\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"clarkinc\":[0,0,507375,0],\"infocomm\":[23713856141.073833,338250,169125,507375],\"nova-med\":[0,0,169125,169125],\"sigma-cosmetics\":[0,0,507375,169125],\"icarus\":[0,0,0,845625],\"summit-uni\":[0,0,1014750,0],\"harakiri-sushi\":[0,0,676500,0],\"ecorp\":[0,0,169125,0],\"iron-gym\":[0,0,338250,338250],\"solaris\":[0,0,338250,0],\"deltaone\":[44338487527.19926,338250,169125,338250],\"foodnstuff\":[0,0,0,1014750],\"fulcrumassets\":[0,0,0,169125],\"kuai-gong\":[0,0,338250,338250],\"global-pharm\":[0,0,338250,169125],\"omnitek\":[0,0,169125,845625],\"powerhouse-fitness\":[0,0,169125,169125],\"helios\":[0,0,169125,338250],\"I.I.I.I\":[0,0,507375,0],\"zb-def\":[0,169125,169125,169125],\"zer0\":[0,0,1014750,169125],\"stormtech\":[0,0,0,169125],\"rho-construction\":[0,0,338250,0],\"lexo-corp\":[0,0,338250,0],\"avmnite-02h\":[0,0,507375,0],\".\":[0,0,507375,0],\"neo-net\":[0,0,507375,0],\"unitalife\":[0,0,338250,0],\"aerocorp\":[0,0,169125,169125],\"johnson-ortho\":[1214144179.7851615,169125,169125,169125],\"nwo\":[533045576571.1272,169125,0,0],\"applied-energetics\":[13191078569.167276,169125,169125,0],\"joesguns\":[0,0,0,169125],\"zb-institute\":[0,0,0,169125],\"nectar-net\":[0,0,169125,0],\"titan-labs\":[0,0,1014750,0],\"snap-fitness\":[13988733478.623999,338250,338250,169125],\"n00dles\":[4176883.5238473825,676500,0,0],\"the-hub\":[0,0,507375,0],\"computek\":[0,0,169125,169125],\"millenium-fitness\":[0,0,338250,0],\"catalyst\":[0,0,169125,0],\"4sigma\":[378648171231.2648,169125,169125,169125],\"rothman-uni\":[0,0,169125,0],\"taiyang-digital\":[0,0,0,169125],\"The-Cave\":[0,0,169125,0],\"alpha-ent\":[0,0,338250,0],\"microdyne\":[10937254168.53635,169125,0,0],\"blade\":[0,0,338250,169125],\"hong-fang-tea\":[0,0,338250,0],\"silver-helix\":[0,0,0,169125],\"phantasy\":[0,0,169125,0],\"syscore\":[6873195311.596316,169125,0,0],\"megacorp\":[0,0,0,338250],\"vitalife\":[0,0,169125,0],\"zeus-med\":[22738434052.63869,169125,169125,169125],\"univ-energy\":[0,0,169125,0],\"max-hardware\":[0,0,169125,0],\"netlink\":[0,0,0,169125],\"galactic-cyber\":[0,0,0,169125],\"omega-net\":[0,0,169125,0],\"fulcrumtech\":[0,0,169125,0],\"run4theh111z\":[0,0,169125,0],\"CSEC\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9722329843.24747,\"onlineMoneyMade\":1048693108114.5366,\"onlineRunningTime\":5577.009999997119,\"ramUsage\":3.1,\"server\":\"neighbor-13\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-14\",\"httpPortOpen\":false,\"ip\":\"63.3.4.3\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"nectar-net\":[0,0,169125,169125],\"clarkinc\":[0,0,169125,0],\"I.I.I.I\":[0,0,676500,0],\"phantasy\":[0,0,676500,0],\"aevum-police\":[0,0,338250,169125],\"summit-uni\":[0,0,169125,169125],\"applied-energetics\":[0,0,507375,507375],\"omnia\":[0,0,338250,0],\"taiyang-digital\":[25905775928.52607,338250,0,169125],\"ecorp\":[1012523207235.0635,169125,338250,169125],\"helios\":[0,0,507375,0],\"global-pharm\":[0,0,0,169125],\"megacorp\":[1510922092512.19,507375,0,0],\"rothman-uni\":[0,0,0,338250],\"max-hardware\":[0,0,0,169125],\"titan-labs\":[0,0,169125,169125],\"millenium-fitness\":[0,0,507375,676500],\"4sigma\":[378648171231.2648,169125,338250,169125],\"iron-gym\":[0,0,169125,169125],\"fulcrumtech\":[0,0,169125,507375],\"microdyne\":[0,0,338250,169125],\"zer0\":[0,0,676500,169125],\"avmnite-02h\":[0,0,169125,0],\"stormtech\":[18722134900.69624,169125,0,338250],\"univ-energy\":[0,0,169125,0],\"lexo-corp\":[0,0,169125,169125],\"b-and-a\":[0,0,169125,0],\"icarus\":[0,0,338250,507375],\"unitalife\":[17012745078.446697,169125,0,338250],\"blade\":[0,0,0,507375],\"harakiri-sushi\":[0,0,507375,0],\"hong-fang-tea\":[0,0,676500,0],\"neo-net\":[0,0,0,169125],\"The-Cave\":[0,0,1014750,0],\"n00dles\":[3132702.1029466437,507375,0,0],\"computek\":[3842233664.055159,169125,169125,169125],\"omega-net\":[0,0,169125,169125],\"rho-construction\":[0,0,676500,0],\"the-hub\":[0,0,338250,169125],\"joesguns\":[36401141.82636677,169125,0,0],\"omnitek\":[0,0,169125,338250],\"snap-fitness\":[6994366739.311999,169125,169125,338250],\"netlink\":[0,0,338250,169125],\"zb-institute\":[0,0,0,169125],\".\":[0,0,169125,0],\"foodnstuff\":[0,0,0,169125],\"defcomm\":[13203433418.859713,169125,338250,169125],\"fulcrumassets\":[0,169125,0,0],\"deltaone\":[0,0,0,169125],\"silver-helix\":[0,0,169125,0],\"crush-fitness\":[2202301598.3717804,507375,0,0],\"galactic-cyber\":[0,0,0,169125],\"zeus-med\":[0,0,0,169125],\"vitalife\":[0,0,0,169125],\"nova-med\":[0,0,0,169125],\"darkweb\":[0,0,169125,0],\"solaris\":[0,0,338250,0],\"catalyst\":[0,0,169125,169125],\"kuai-gong\":[0,0,169125,169125],\"alpha-ent\":[0,0,0,169125],\"sigma-cosmetics\":[0,0,0,169125],\"run4theh111z\":[0,0,169125,0],\"johnson-ortho\":[1214144179.7851615,169125,0,169125],\"nwo\":[0,0,0,169125],\"CSEC\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9697193661.174297,\"onlineMoneyMade\":2991230140330.5005,\"onlineRunningTime\":5577.009999997119,\"ramUsage\":3.1,\"server\":\"neighbor-14\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-15\",\"httpPortOpen\":false,\"ip\":\"1.3.9.3\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"johnson-ortho\":[1214144179.7851615,169125,0,507375],\"harakiri-sushi\":[62405252.04669985,169125,338250,169125],\"aerocorp\":[18259139626.223602,169125,169125,338250],\"deltaone\":[0,169125,0,507375],\"vitalife\":[0,0,169125,169125],\"ecorp\":[1012523207235.0635,169125,169125,169125],\"galactic-cyber\":[0,0,338250,0],\"lexo-corp\":[0,0,338250,0],\"clarkinc\":[0,0,0,169125],\"CSEC\":[0,0,169125,0],\"fulcrumassets\":[0,0,169125,169125],\"unitalife\":[0,0,338250,169125],\"taiyang-digital\":[0,0,169125,507375],\"syscore\":[6606300760.857666,169125,0,169125],\"applied-energetics\":[0,0,169125,0],\"nwo\":[533045576571.1272,169125,169125,169125],\"silver-helix\":[0,0,0,507375],\"univ-energy\":[0,0,507375,0],\"omnia\":[0,169125,338250,0],\"rho-construction\":[0,0,676500,0],\"foodnstuff\":[0,0,0,338250],\"4sigma\":[0,0,169125,0],\"b-and-a\":[897070343631.2228,338250,0,676500],\"summit-uni\":[0,0,169125,338250],\"omega-net\":[0,0,0,169125],\"computek\":[0,0,0,169125],\"the-hub\":[0,0,338250,0],\"neo-net\":[0,0,507375,338250],\".\":[0,0,338250,0],\"iron-gym\":[0,0,169125,338250],\"hong-fang-tea\":[32430809.03039033,169125,338250,0],\"n00dles\":[2153996.1780119236,338250,0,0],\"defcomm\":[0,0,169125,338250],\"phantasy\":[0,0,338250,0],\"I.I.I.I\":[0,0,169125,0],\"icarus\":[0,0,338250,338250],\"microdyne\":[0,0,507375,0],\"nova-med\":[0,0,0,169125],\"infocomm\":[0,0,169125,0],\"megacorp\":[0,169125,169125,169125],\"alpha-ent\":[0,0,338250,0],\"omnitek\":[0,0,0,338250],\"stormtech\":[0,169125,0,169125],\"helios\":[0,0,338250,338250],\"netlink\":[0,0,169125,169125],\"max-hardware\":[0,0,169125,0],\"nectar-net\":[0,0,169125,0],\"global-pharm\":[0,0,169125,0],\"rothman-uni\":[0,0,0,338250],\"run4theh111z\":[0,0,169125,0],\"avmnite-02h\":[0,0,338250,0],\"millenium-fitness\":[0,0,169125,0],\"titan-labs\":[0,0,507375,0],\"kuai-gong\":[397403470757.2593,169125,169125,0],\"zeus-med\":[0,0,338250,169125],\"zb-def\":[18369874666.409534,169125,0,0],\"catalyst\":[0,0,338250,0],\"solaris\":[0,0,169125,0],\"crush-fitness\":[0,0,169125,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9019859899.965986,\"onlineMoneyMade\":2884589047485.2036,\"onlineRunningTime\":5572.0099999971235,\"ramUsage\":3.1,\"server\":\"neighbor-15\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-16\",\"httpPortOpen\":false,\"ip\":\"71.5.2.7\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,0,338250],\"vitalife\":[0,0,0,338250],\"summit-uni\":[0,0,507375,169125],\"megacorp\":[0,0,676500,338250],\"hong-fang-tea\":[0,0,507375,169125],\"titan-labs\":[0,0,169125,338250],\"blade\":[0,0,338250,0],\"joesguns\":[0,0,338250,0],\"alpha-ent\":[0,0,169125,0],\"univ-energy\":[0,0,338250,169125],\"lexo-corp\":[0,0,169125,0],\"The-Cave\":[0,0,845625,0],\"syscore\":[0,0,0,338250],\"global-pharm\":[25895143448.455383,169125,169125,0],\"crush-fitness\":[1439412809.3933203,338250,169125,169125],\"unitalife\":[0,0,338250,338250],\"omnia\":[0,0,0,338250],\"zeus-med\":[45476868105.27738,338250,0,169125],\"galactic-cyber\":[24111278570.645493,338250,676500,0],\"phantasy\":[0,0,169125,169125],\"nectar-net\":[0,0,507375,169125],\"omega-net\":[0,0,338250,169125],\"b-and-a\":[897070343631.2228,338250,169125,0],\"avmnite-02h\":[0,0,845625,0],\"the-hub\":[0,0,169125,169125],\"infocomm\":[0,0,169125,338250],\"zb-def\":[0,0,169125,169125],\"icarus\":[0,0,169125,169125],\"sigma-cosmetics\":[0,0,338250,0],\"zb-institute\":[1479510582.6354198,169125,169125,169125],\"kuai-gong\":[0,0,169125,169125],\"n00dles\":[4308004.205615431,676500,0,0],\"max-hardware\":[0,0,169125,0],\"zer0\":[0,0,676500,169125],\"foodnstuff\":[0,0,0,338250],\"stormtech\":[18722134900.69624,169125,0,0],\"I.I.I.I\":[0,0,507375,0],\"millenium-fitness\":[0,0,169125,169125],\"snap-fitness\":[6994366739.311999,169125,338250,169125],\"neo-net\":[0,0,0,338250],\"microdyne\":[10937254168.53635,169125,169125,169125],\"nwo\":[533045576571.1272,169125,0,0],\"applied-energetics\":[8405757189.473109,338250,169125,0],\"CSEC\":[0,0,1353000,0],\"omnitek\":[0,0,169125,169125],\"clarkinc\":[388715510793.46594,169125,0,0],\"rho-construction\":[0,0,338250,0],\"catalyst\":[0,0,338250,676500],\"deltaone\":[0,0,0,169125],\"aevum-police\":[0,0,507375,169125],\"rothman-uni\":[0,0,169125,169125],\"solaris\":[0,0,169125,0],\"computek\":[3693035048.111456,169125,169125,0],\"fulcrumtech\":[0,0,0,507375],\"johnson-ortho\":[1214144179.7851615,169125,338250,338250],\"fulcrumassets\":[0,0,0,169125],\"silver-helix\":[0,0,169125,169125],\"helios\":[0,0,0,507375],\"darkweb\":[0,0,845625,0],\".\":[0,0,169125,0],\"defcomm\":[13203433418.859713,169125,169125,169125],\"aerocorp\":[36518279252.447205,338250,338250,0],\"harakiri-sushi\":[0,0,169125,0],\"iron-gym\":[0,0,0,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10466629463.566727,\"onlineMoneyMade\":2016926357413.65,\"onlineRunningTime\":5517.0099999971735,\"ramUsage\":3.1,\"server\":\"neighbor-16\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-17\",\"httpPortOpen\":false,\"ip\":\"89.8.8.2\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"microdyne\":[10937254168.53635,169125,676500,0],\"I.I.I.I\":[0,0,338250,0],\"iron-gym\":[0,0,169125,845625],\"phantasy\":[0,0,338250,0],\"icarus\":[31606209049.16005,507375,0,169125],\"unitalife\":[0,0,676500,0],\"univ-energy\":[0,0,338250,169125],\"ecorp\":[1012523207235.0635,169125,169125,169125],\"clarkinc\":[388715510793.46594,169125,338250,169125],\"snap-fitness\":[0,0,169125,0],\"applied-energetics\":[13191078569.167276,169125,0,169125],\"catalyst\":[0,0,338250,507375],\"solaris\":[11147004980.74546,169125,338250,0],\"silver-helix\":[0,0,0,845625],\"defcomm\":[12944542567.509521,169125,0,0],\"4sigma\":[378648171231.2648,169125,338250,0],\"kuai-gong\":[0,0,0,338250],\"summit-uni\":[0,0,338250,169125],\"zb-institute\":[0,0,169125,169125],\"galactic-cyber\":[0,0,676500,0],\"sigma-cosmetics\":[0,0,507375,0],\"lexo-corp\":[25350081078.57677,338250,338250,0],\"infocomm\":[0,0,0,169125],\"fulcrumassets\":[0,0,338250,338250],\"joesguns\":[0,0,507375,0],\"run4theh111z\":[0,0,676500,0],\"neo-net\":[0,0,338250,0],\"vitalife\":[0,0,507375,0],\"crush-fitness\":[1453806937.4872537,338250,338250,0],\"zb-def\":[0,169125,0,0],\"computek\":[0,0,169125,169125],\"aevum-police\":[0,0,169125,169125],\"zeus-med\":[0,0,338250,0],\"the-hub\":[0,0,1014750,169125],\"syscore\":[13479496072.453983,338250,0,0],\"b-and-a\":[0,0,338250,169125],\"aerocorp\":[0,0,507375,0],\"CSEC\":[0,0,338250,0],\"taiyang-digital\":[0,0,169125,169125],\"nwo\":[533045576571.1272,169125,0,0],\"global-pharm\":[0,0,338250,0],\"omega-net\":[0,0,0,338250],\"avmnite-02h\":[0,0,169125,0],\"deltaone\":[0,0,169125,169125],\"hong-fang-tea\":[46031223.82547443,169125,338250,0],\"omnitek\":[0,0,169125,169125],\".\":[0,0,338250,0],\"foodnstuff\":[0,0,0,338250],\"powerhouse-fitness\":[0,0,0,338250],\"rothman-uni\":[0,0,169125,0],\"johnson-ortho\":[2428288359.570323,338250,0,169125],\"helios\":[0,0,169125,507375],\"max-hardware\":[0,0,169125,169125],\"blade\":[0,0,338250,338250],\"omnia\":[0,0,169125,0],\"nectar-net\":[42207221.62838359,169125,169125,0],\"nova-med\":[18792146218.238617,169125,0,0],\"stormtech\":[0,0,169125,0],\"millenium-fitness\":[0,0,0,169125],\"harakiri-sushi\":[0,0,0,169125],\"n00dles\":[1044224.6456481748,169125,0,0],\"zer0\":[0,0,169125,0],\"darkweb\":[0,0,169125,0],\"fulcrumtech\":[0,0,0,169125]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10117984861.834303,\"onlineMoneyMade\":2454351656502.466,\"onlineRunningTime\":5417.0099999972645,\"ramUsage\":3.1,\"server\":\"neighbor-17\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-18\",\"httpPortOpen\":false,\"ip\":\"76.1.4.7\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"darkweb\":[0,0,169125,0],\"ecorp\":[1032773671379.7648,169125,169125,169125],\"phantasy\":[0,0,338250,169125],\"johnson-ortho\":[2428288359.570323,338250,169125,0],\"unitalife\":[0,0,507375,338250],\"solaris\":[11117617540.425194,169125,338250,169125],\"catalyst\":[0,0,169125,169125],\"computek\":[7386070096.222912,338250,0,338250],\"omnia\":[14359510965.090801,169125,169125,0],\"netlink\":[0,0,0,169125],\"alpha-ent\":[0,0,169125,169125],\"global-pharm\":[0,0,169125,0],\"sigma-cosmetics\":[0,0,507375,169125],\"microdyne\":[10937254168.53635,169125,507375,169125],\"CSEC\":[0,0,676500,0],\"neo-net\":[0,0,169125,338250],\"rho-construction\":[6462707078.548302,169125,338250,169125],\"harakiri-sushi\":[0,0,676500,0],\"omnitek\":[0,0,0,169125],\"aerocorp\":[36160256906.83498,338250,0,0],\"crush-fitness\":[0,0,0,338250],\"taiyang-digital\":[25905775928.52607,338250,169125,169125],\"zb-def\":[0,0,169125,338250],\".\":[0,0,507375,0],\"deltaone\":[22169243763.59963,169125,0,169125],\"omega-net\":[0,0,169125,0],\"syscore\":[0,0,0,169125],\"avmnite-02h\":[0,0,338250,0],\"defcomm\":[12944542567.509521,169125,338250,0],\"stormtech\":[18722134900.69624,169125,169125,169125],\"I.I.I.I\":[0,0,338250,0],\"summit-uni\":[0,0,507375,0],\"lexo-corp\":[0,0,338250,338250],\"nova-med\":[18792146218.238617,169125,169125,338250],\"run4theh111z\":[0,0,676500,0],\"max-hardware\":[0,0,1014750,0],\"joesguns\":[36894179.16589942,169125,338250,169125],\"foodnstuff\":[0,0,0,338250],\"blade\":[0,0,507375,169125],\"vitalife\":[0,0,169125,0],\"fulcrumassets\":[15543037.19847111,169125,169125,507375],\"helios\":[0,0,169125,0],\"4sigma\":[378648171231.2648,169125,0,169125],\"the-hub\":[0,0,169125,0],\"zb-institute\":[0,0,338250,169125],\"megacorp\":[755461046256.095,169125,0,169125],\"titan-labs\":[0,0,507375,169125],\"fulcrumtech\":[0,0,169125,0],\"zer0\":[0,0,507375,0],\"b-and-a\":[0,0,169125,169125],\"galactic-cyber\":[0,0,0,169125],\"The-Cave\":[0,0,169125,0],\"millenium-fitness\":[0,0,169125,169125],\"snap-fitness\":[0,0,0,338250],\"powerhouse-fitness\":[0,0,169125,0],\"icarus\":[32557524648.26348,338250,0,169125],\"applied-energetics\":[13191078569.167276,169125,169125,169125],\"clarkinc\":[0,0,169125,0],\"nectar-net\":[0,0,169125,0],\"aevum-police\":[0,0,169125,0],\"hong-fang-tea\":[0,0,169125,0],\"silver-helix\":[0,0,0,169125],\"infocomm\":[11856928070.536917,169125,0,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9737104545.687416,\"onlineMoneyMade\":2411926405865.256,\"onlineRunningTime\":5317.009999997355,\"ramUsage\":3.1,\"server\":\"neighbor-18\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"neighbor-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neighbor-19\",\"httpPortOpen\":false,\"ip\":\"47.1.3.1\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction buildServerList(ns) {\\n\\tlet serversToScan = ['home'];\\n\\tlet serverList = [];\\n\\n\\twhile (serversToScan.length > 0) {\\n\\t\\tconst server = serversToScan.pop();\\n\\t\\tconst neighbors = ns.scan(server);\\n\\n\\t\\tfor (const neighbor of neighbors) {\\n\\t\\t\\tif (neighbor != 'home' && !serverList.includes(neighbor)) {\\n\\t\\t\\t\\tserversToScan.push(neighbor);\\n\\t\\t\\t\\tserverList.push(neighbor);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverList;\\n}\\n\\n/** @param {NS} ns */\\nfunction isAccessible(ns, server) {\\n\\treturn ns.hasRootAccess(server) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel();\\n}\\n\\n/** @param {NS} ns */\\nfunction hasMoney(ns, server) {\\n\\tconst currentMoney = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst target = 0.90 * maxMoney;\\n\\n\\tns.print(`[${server}] Money -> current: ${currentMoney.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentMoney > target;\\n}\\n\\n/** @param {NS} ns */\\nfunction hasSecurityLevel(ns, server) {\\n\\tconst currentLevel = ns.getServerSecurityLevel(server);\\n\\tconst minLevel = ns.getServerMinSecurityLevel(server);\\n\\tconst target = 1.10 * minLevel;\\n\\n\\tns.print(`[${server}] Security level -> current: ${currentLevel.toFixed(2)}, target: ${target.toFixed(2)}`);\\n\\treturn currentLevel < target;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tns.enableLog('grow');\\n\\tns.enableLog('hack');\\n\\tns.enableLog('weaken');\\n\\n\\tconst runningScript = ns.getRunningScript();\\n\\tconst numThreads = runningScript.threads;\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(500);\\n\\n\\t\\tconst fullServerList = buildServerList(ns);\\n\\t\\tconst filteredServerList = fullServerList.filter(name => !name.startsWith('neighbor-') && !name.startsWith('hacknet-'));\\n\\n\\t\\tconst serverIndex = Math.floor(Math.random() * filteredServerList.length);\\n\\t\\tconst server = filteredServerList[serverIndex];\\n\\n\\t\\tif (!isAccessible(ns, server)) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasSecurityLevel(ns, server)) {\\n\\t\\t\\tawait ns.weaken(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Security level weakened to ${ns.getServerSecurityLevel(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!hasMoney(ns, server)) {\\n\\t\\t\\tawait ns.grow(server, { threads: numThreads });\\n\\t\\t\\tns.print(`[${server}] Money grown to ${ns.getServerMoneyAvailable(server).toFixed(2)}`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tns.print(`[${server}] Hacking`);\\n\\t\\tawait ns.hack(server, { threads: numThreads });\\n\\t}\\n}\\n\",\"filename\":\"hack-remote.js\",\"server\":\"neighbor-19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"galactic-cyber\":[0,0,169125,0],\"syscore\":[6606300760.857666,169125,169125,507375],\"joesguns\":[37285309.84164651,169125,338250,0],\"aevum-police\":[0,0,0,338250],\"omnia\":[0,0,0,169125],\"stormtech\":[37077169117.0651,338250,0,0],\"vitalife\":[0,0,338250,169125],\"omnitek\":[0,0,169125,338250],\"zb-def\":[54029043136.49863,507375,0,507375],\"summit-uni\":[0,0,169125,0],\"hong-fang-tea\":[0,0,169125,0],\"b-and-a\":[0,0,338250,338250],\"taiyang-digital\":[0,0,338250,169125],\"clarkinc\":[388715510793.46594,169125,0,338250],\"aerocorp\":[36518279252.447205,338250,0,507375],\"computek\":[3693035048.111456,169125,338250,169125],\"netlink\":[0,0,169125,507375],\"titan-labs\":[13003321670.97212,169125,676500,338250],\"phantasy\":[0,0,507375,169125],\"applied-energetics\":[0,0,0,169125],\"silver-helix\":[0,0,0,169125],\"n00dles\":[3198208.1946816333,507375,0,0],\"zer0\":[0,0,338250,169125],\"ecorp\":[1012523207235.0635,169125,0,0],\"fulcrumtech\":[0,0,0,338250],\"run4theh111z\":[0,0,338250,0],\"I.I.I.I\":[0,0,1014750,0],\"avmnite-02h\":[0,0,338250,0],\"foodnstuff\":[0,0,338250,169125],\"CSEC\":[0,0,507375,0],\"nova-med\":[0,169125,169125,169125],\"nwo\":[0,0,169125,338250],\"catalyst\":[0,0,338250,676500],\".\":[0,0,676500,0],\"max-hardware\":[43750915.12926188,169125,169125,0],\"johnson-ortho\":[0,0,338250,169125],\"harakiri-sushi\":[0,0,507375,0],\"icarus\":[0,0,169125,169125],\"lexo-corp\":[12675040539.288385,169125,338250,0],\"The-Cave\":[0,0,338250,0],\"infocomm\":[0,0,169125,0],\"helios\":[0,0,338250,0],\"alpha-ent\":[0,0,338250,0],\"iron-gym\":[0,0,169125,169125],\"neo-net\":[0,0,169125,169125],\"omega-net\":[0,0,338250,169125],\"4sigma\":[0,0,0,338250],\"millenium-fitness\":[0,0,0,169125],\"unitalife\":[17012745078.446697,169125,169125,0],\"univ-energy\":[0,0,507375,0],\"rho-construction\":[6502817352.6262455,169125,0,169125],\"powerhouse-fitness\":[0,0,169125,338250],\"solaris\":[0,0,338250,0],\"sigma-cosmetics\":[0,0,169125,0],\"fulcrumassets\":[0,0,0,338250],\"zb-institute\":[0,0,169125,169125],\"zeus-med\":[0,0,169125,0],\"snap-fitness\":[0,0,0,169125],\"global-pharm\":[0,0,169125,0],\"kuai-gong\":[0,0,169125,0],\"nectar-net\":[0,0,169125,0]},\"filename\":\"hack-remote.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9560383754.165369,\"onlineMoneyMade\":1588440704418.0083,\"onlineRunningTime\":5317.009999997355,\"ramUsage\":3.1,\"server\":\"neighbor-19\",\"scriptKey\":\"hack-remote.js*[]\",\"title\":\"hack-remote.js \",\"threads\":169125,\"temporary\":false}}]}},\"hacknet-server-6\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-6\",\"httpPortOpen\":false,\"ip\":\"5.6.8.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":21,\"hashCapacity\":1048576,\"hashRate\":5.493991658592581,\"level\":100,\"onlineTimeSeconds\":11832.600000007984,\"totalHashesGenerated\":51342.296727775014,\"runningScripts\":[]}},\"hacknet-server-7\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-7\",\"httpPortOpen\":false,\"ip\":\"11.7.1.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":21,\"hashCapacity\":1048576,\"hashRate\":5.493991658592581,\"level\":100,\"onlineTimeSeconds\":11477.400000006692,\"totalHashesGenerated\":50693.24661598566,\"runningScripts\":[]}},\"hacknet-server-8\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-8\",\"httpPortOpen\":false,\"ip\":\"84.0.5.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":21,\"hashCapacity\":1048576,\"hashRate\":5.493991658592581,\"level\":100,\"onlineTimeSeconds\":10639.400000003654,\"totalHashesGenerated\":49459.11928474981,\"runningScripts\":[]}},\"hacknet-server-9\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-9\",\"httpPortOpen\":false,\"ip\":\"96.9.8.0\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":21,\"hashCapacity\":1048576,\"hashRate\":5.493991658592581,\"level\":100,\"onlineTimeSeconds\":10001.800000001334,\"totalHashesGenerated\":48272.595668378555,\"runningScripts\":[]}},\"hacknet-server-10\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-10\",\"httpPortOpen\":false,\"ip\":\"97.1.9.5\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":21,\"hashCapacity\":1048576,\"hashRate\":5.493991658592581,\"level\":100,\"onlineTimeSeconds\":9248.399999998594,\"totalHashesGenerated\":46856.14256013623,\"runningScripts\":[]}},\"hacknet-server-11\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":21,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-11\",\"httpPortOpen\":false,\"ip\":\"2.4.0.5\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":15,\"cores\":21,\"hashCapacity\":1048576,\"hashRate\":5.493991658592581,\"level\":100,\"onlineTimeSeconds\":9121.399999998122,\"totalHashesGenerated\":46515.657917524324,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":5.2536,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":99235.11262954533}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":217.4647,\"isBanned\":false,\"isMember\":true,\"playerReputation\":3140441.014777486}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":185.827,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":148.4383,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":343.7229,\"isBanned\":false,\"isMember\":true,\"playerReputation\":4105373.2354615433}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":37.268,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":52.7238,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":146458.02544528685}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":41.5201,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":122.613,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":136458.5701895946}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":53.8438,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":500,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false,\"EnableHistorySearch\":true}","VersionSave":"33","AllGangsSave":"{\"Slum Snakes\":{\"power\":4663.640395957083,\"territory\":0},\"Tetrads\":{\"power\":4554.372575689119,\"territory\":0},\"The Syndicate\":{\"power\":4572.543343416227,\"territory\":0},\"The Dark Army\":{\"power\":4691.653182322281,\"territory\":0},\"Speakers for the Dead\":{\"power\":3509.8363325140317,\"territory\":0},\"NiteSec\":{\"power\":1,\"territory\":0.14285714285714474},\"The Black Hand\":{\"power\":16997.380160080967,\"territory\":0.8571428571428553}}","LastExportBonus":"1703113796034","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}